//shop.zsc

Class DIShop : DIShop_Base
{
	Array<String> filedata; //all the lines from DISHOP.
	Array<String> itempool; //only the lines that match user_shoptype. if user_shoptype is blank, it uses all items in DISHOP.
	Array<String> groupdata; //used mainly if the shop is using a group instead of a standard item category. groups will inherit all items for each category it calls.
	Array<String> blacklist; //a list of items that cannot be added to the shop pool.
	Array<String> itempool_blacklist; //a list of blacklisted items that were removed from the item pool.

	//these start with "user_" so that Ultimate Doom Builder is able to manually add in stuff here.
	//the ones with "shop_" are the ones that this actor actually uses.
	string user_currentitem, shop_currentitem; //what item is currently available at this shop.
	int user_baseprice, shop_baseprice; //the base price of the user_currentitem.
	string user_shoptype; //for use with random shops, this tells the shop which item pool to look through.
	double user_pricemult, extra_pricemult, default_pricemult; //multiplier for the base price.
	double item_pricemult; //another multiplier for the base price. controlled by Passive items.
	bool user_alwaysreroll; //forces the shop to always reroll their item upon every restock.
	string user_blacklist; //map editor defined item blacklist. can be used to fine-tune your item shops. uses same format as regular blacklist.
	
	Inventory itemactor; //points to the inventory class for the current item, but only if the player already has the item.
	int itemmax; //the item's built in max amount value. only applies if the player already has the item.
	
	int user_pricedown_round; //how many rounds until the price can decrease. default is 2.
	int user_pricedown_base; //when price can decrease, decrease by this amount.
	double user_pricedown_mult; //when price can decrease, multiply price by this amount.
	int LevelSale; //extra sale percentage added from level scripts.
	
	bool user_dontprogress; //dont progress the shop level, if applicable.
	
	bool user_debugpool; //prints the itempool to the console.
	
	Property AlwaysReroll : user_alwaysreroll;
	Property ReducePriceRound : user_pricedown_round;
	Property ReducePriceBase : user_pricedown_base;
	Property ReducePriceMult : user_pricedown_mult;
	Property DontProgress : user_dontprogress;
	
	Default
	{
		DIShop_Base.AllowDebt true;
		DIShop_Base.DebtHP 1;
		DIShop.ReducePriceRound 2;
		DIShop.ReducePriceBase 5;
		DIShop.ReducePriceMult 0.95;
		//$Title "Shop (Instant Use)"
	}
	
	override void PostBeginPlay()
	{	
		ParseBlacklist();
		ParseDISHOP();
		
		if (user_pricemult < 1) {user_pricemult = 1;}
		default_pricemult = user_pricemult;
		if (user_itemstock == 0) {user_itemstock = 1;}
		
		ChooseNewShopItem();
		shop_currentitem = user_currentitem;
		shop_currentsprite = user_currentsprite;
		shop_baseprice = user_baseprice;
		shop_itemstock = user_itemstock;
		
		SpawnShopExtras();
		if (IsBlacklisted(shop_currentitem) == false) {canshop = true;}
		
		if (!plr) {plr = players[consoleplayer].mo;} //NOT MULTIPLAYER COMPATIBLE!!!!!!!!!!!!
	}
	
	override void tick(void)
	{
		super.tick();
		
		if (canshop) {A_AttachLight("shoplight", DynamicLight.PointLight, "White", 20, 20, 0, (0, 0, 32));}
		else {A_RemoveLight("shoplight");}
		
		++checkcount;
		if (checkcount >= 35)
		{
			int newround = ACS_NamedExecuteWithResult("DICheckWave", 0, 0, 0, 0);
			
			if (newround != curround)
			{
				RestockShop();
				
				AddPriceMult(0); //refresh price mult to allow passive items to work.
			
				if ((canshop == true) || (user_alwaysreroll == true)) {ChooseNewShopItem();} //previously used shops do not reroll, unless marked to always reroll.
			
				if (itempool.Size() > 0)
				{
					if ((newround >= lastpurchased + user_pricedown_round) && (currentprice > 0))
					{
						currentprice *= user_pricedown_mult;
						currentprice -= user_pricedown_base * (1 + newround - (lastpurchased + user_pricedown_round));
					}
					if (currentprice < 0) {currentprice = 0;}
					
					//calculate chance of sale.
					//sale can only occur on items with a base price of at least 2.
					//sale chance increases based on how long since the last sale 
					//and also how long since the player last purchased from this shop.
					extrasale = newround - lastpurchased;
					if ((random(1, 30) <= 1 + extrasale + lastsale) && (shop_baseprice >= 2)) {dosale = true; lastsale = 0;}
					else {dosale = false; ++lastsale;}
					GetSalePercent();
					if (shop_itemstock > 0) {canshop = true;} //if shop is restocked, reenable shopping.
					curround = newround;
				}
			}
		}
	}
	
	virtual void ParseBlacklist(void)
	{
		//look through the di_unlock_blacklist cvar and create a list of blacklisted items.
		//the blacklist uses the class name of the item for identification.
		
		//this function should only be run once, as running this again would remove any items blacklisted mid-game.
		cvar listcvar = cvar.getcvar("di_unlock_blacklist");
		if (listcvar)
		{
			blacklist.Clear();
			itempool_blacklist.Clear();
			string fulllist = listcvar.getstring();
			fulllist.Split(blacklist, ",", TOK_SKIPEMPTY);
			user_blacklist.Split(blacklist, ",", TOK_SKIPEMPTY);
		}
	}
	
	virtual bool AddBlacklist(string newitem, bool forcereroll = false)
	{
		//console.printf("attempting to add %s to shop blacklist...", newitem); 
		bool alreadydone = false;
		int blacklistnum = blacklist.Find(newitem);
		if (blacklistnum < blacklist.Size()) {alreadydone = true;} //skip if item already blacklisted
		
		if (alreadydone == false) 
		{
			blacklist.Push(newitem);
			bool wasinpool = false;
			for(int i = 0; i < itempool.Size(); ++i)
			{
				Array<String> currentitem;
				itempool[i].Split(currentitem, " ", TOK_SKIPEMPTY);
			
				if (currentitem[1] == newitem)
				{
					if (user_debugpool) {console.printf("\cq%s has been removed from this shop's pool.", newitem);}
					itempool_blacklist.Push(itempool[i]); //add to blacklisted pool
					itempool.Delete(i); //remove from item pool
					wasinpool = true;
				}
			}
			if (user_debugpool && (wasinpool == false)) {console.printf("\ca%s is blacklisted, but wasn't in this shop's itempool!", newitem);}
			if (newitem == shop_currentitem) 
			{
				if (user_debugpool) {console.printf("\cq%s", "rerolling shop...");}
				RerollShopItem(); //reroll shop if current item is now blacklisted
			}
			else if (forcereroll) {RerollShopItem();}
			
			if (user_debugpool) {console.printf("\ca%s has been successfully blacklisted.", newitem);}
			
			return true;
		}
		else 
		{
			//console.printf("%s", "\cgblacklist attempt has failed.");
			return false;
		}
	}
	
	virtual bool RemoveBlacklist(string delitem, bool forcereroll = false)
	{
		int itemnum = blacklist.Find(delitem); //see if item is in blacklist
		if (itemnum < blacklist.Size())
		{
			blacklist.Delete(itemnum); //remove from blacklist
			for (int i = 0; i < itempool_blacklist.size(); ++i)
			{
				Array<String> currentitem;
				itempool_blacklist[i].Split(currentitem, " ", TOK_SKIPEMPTY);
				if (currentitem[1] == delitem)
				{
					itempool.Push(itempool_blacklist[i]); //add item back into shop pool
					itempool_blacklist.Delete(i); //remove from removed items list
				}
			}
			if (forcereroll) {RerollShopItem();} //rerolling can give the shops a chance to immediately display the newly unblacklisted item.
			return true;
		}
		else {return false;}
	}
	
	virtual bool IsBlacklisted(string itemfind)
	{
		int itemnum = blacklist.Find(itemfind);
		if (itemnum < blacklist.Size()) 
		{
			//console.printf("%s", "BLACKLISTED ITEM DETECTED!!!!!"); 
			return true;
		}
		else {return false;}
	}
	
	virtual void ParseDISHOP(void)
	{
		//clear file data and item pool. in case this function gets ran multiple times. (like for example if this shop were to change item pools mid-game.)
		filedata.Clear();
		itempool.Clear();
		groupdata.Clear();
	
		int ThisLump = Wads.FindLump("DISHOP", 0, Wads.ANYNAMESPACE);
		int NextLump = Wads.FindLump("DISHOP", ThisLump + 1, Wads.ANYNAMESPACE);
		
		while (ThisLump != -1)
		{
			Wads.ReadLump(ThisLump).Split(filedata, "\n", TOK_SKIPEMPTY);
			ThisLump = NextLump;
			NextLump = Wads.FindLump("DISHOP", ThisLump + 1, 1);
		}
		
		//check for category grouping. identified by the presence of "[".
		if (user_shoptype.Left(1) == "[")
		{
			for (int i = 0; i < filedata.Size(); i++)
			{
				if (filedata[i].Left(2) == ">>") {continue;} //dont bother reading the next lines of code if it's a comment (starts with ">>")
				if (filedata[i].Length() < 3) {continue;}
				filedata[i] = filedata[i].Left(filedata[i].IndexOf(";"));
				
				Array<String> currentline;
				filedata[i].Split(currentline, " ", TOK_SKIPEMPTY);
				
				if (currentline[0] == user_shoptype) //This is case sensitive!
				{
					groupdata.Push(currentline[1]); //add this category to the group.
				}
			}
		}
		else {groupdata.Push(user_shoptype);} //this is just 1 category, no grouping needed.
		
		//add valid items to this shop's pool
		int debugline;
		for (int i = 0; i < filedata.Size(); i++)
		{
			if (user_debugpool) {++debugline;}
			if (filedata[i].Left(2) == ">>") {continue;} //dont bother reading the next lines of code if it's a comment (starts with ">>")
			if (filedata[i].Length() < 3) {continue;}
			filedata[i] = filedata[i].Left(filedata[i].IndexOf(";"));
			
			Array<String> currentline;
			filedata[i].Split(currentline, " ", TOK_SKIPEMPTY);
			
			int pushchance = 256;
			if (currentline.Size() >= 5) {pushchance = currentline[4].ToInt(10);}
			
			cvar cheatmode = cvar.getcvar("di_unlock_cheat");
			bool docheat = cheatmode.getbool();
			
			for (int j = 0; j < groupdata.Size(); j++)
			{
				bool correctgroup = false;
				bool singleitemmode = false;
				if (currentline[0] == groupdata[j]) {correctgroup = true;} //case sensitive cuz i didnt make it a name instead of a string for some reason!
				else if ((user_shoptype == "") || (user_shoptype == " ")) {correctgroup = true;} //if no group is defined, load EVERY item.
				
				if ((user_currentitem != "") && (user_currentitem != " ")) {singleitemmode = true;}
				
				if (correctgroup)
				{
					if (singleitemmode) 
					{
						if (user_currentitem != currentline[1]) {continue;} 
					}
					else if (random(0, 255) > pushchance) 
					{
						if (debugline > 0) 
						{
							console.printf("%s wasn't added due to random chance.", currentline[1]);
							debugline = 0;
						}
						continue; //random chance to not add item to array.
					}
					if ((currentline.Size() > 5) && (docheat == false))
					{
						cvar curcvar = cvar.getcvar(currentline[5]);
						if ((curcvar) && (curcvar.getbool() == false)) 
						{
							if (debugline > 0) 
							{
								console.printf("%s hasn't been unlocked yet.", currentline[1]);
								debugline = 0;
							}
							continue; //dont add item if it's still locked.
						}
					}
					if (blacklist.Find(currentline[1]) != blacklist.Size())
					{
						itempool_blacklist.Push(filedata[i]);
						if (debugline > 0) 
						{
							console.printf("%s wasn't added because it was blacklisted.", currentline[1]);
							debugline = 0;
						}
						continue;
					}
					itempool.Push(filedata[i]); //only add relevant item pool data to this array.
					if (user_debugpool) 
					{
						if (debugline > 1) 
						{
							console.printf("\ck%d DISHOP lines skipped.", debugline - 1);
						}
						debugline = 0;
						console.printf("\cd%s added successfully.", currentline[1]);
					}
				}
			}
		}
		if (debugline > 0) 
		{
			console.printf("\ck%d DISHOP lines skipped.\n\ctDEBUG: Shop has completed parsing data.", debugline);
			debugline = 0;
		}
	}
	
	virtual void RestockShop(void)
	{
		//override this if you want the shop to not restock every round.
		if (IsBlacklisted(shop_currentitem) == false) 
		{
			shop_itemstock = user_itemstock;
			if (shop_itemstock < 1) {shop_itemstock = 1;}
		}
		else {shop_itemstock = 0;}
	}
	
	virtual void ChooseNewShopItem(void)
	{
		if (itempool.Size() == 0) 
		{
			//console.printf("%s", "we selling NOTHING bruh"); 
			canshop = false;
		}
		else if ((canshop == true) || (user_alwaysreroll == true))
		{
			int chosenitem = random(0, itempool.Size() - 1);
		
			Array<String> currentitem;
			itempool[chosenitem].Split(currentitem, " ", TOK_SKIPEMPTY);
		
			if ((user_currentitem != "") && (user_currentitem != " ")) {shop_currentitem = user_currentitem;}
			else {shop_currentitem = currentitem[1];}
			if (user_hideitem == false)
			{
				//might've been causing VM aborts, idk...
				if ((user_currentsprite != "") && (user_currentsprite != " ")) {shop_currentsprite = user_currentsprite;}
				else {shop_currentsprite = currentitem[2];}
			}
			if (user_baseprice > 0) {shop_baseprice = user_baseprice;}
			else {shop_baseprice = currentitem[3].ToInt(10);}
		}
	}
	
	override void RerollShopItem(void)
	{
		//choose a new shop item, and then reset the stock.
		A_ResetScale();
		A_DIScale(0.25, -0.25);
		A_SpawnItemEX("DI_Teleport", flags: SXF_NOCHECKPOSITION);
		ChooseNewShopItem();
		RestockShop();
		AddPriceMult(0);
		if (shop_itemstock != 0) {canshop = true;}
		if (IsBlacklisted(shop_currentitem)) {canshop = false;}
	}
	
	override void PurchaseShopItem(void)
	{
		if (target is "PlayerPawn") 
		{
			A_ResetScale();
			A_DIScale(0.25, -0.25);
			
			bool hasroom = true;
			bool canafford = false;
			itemmax = 0;
		
			int buyprice = GetShopPrice();
			plr = PlayerPawn(target);
			let desc2 = String.Format("$shopdesc2_%s", shop_currentitem); //GROSS HACK !!!!!!!!!!
			itemactor = plr.FindInventory(shop_currentitem);
			desc2 = StringTable.Localize(desc2);
			if (desc2.Left(9) ~== "IsBundle ")
			{
				let itemname = desc2.Mid(9);
				itemactor = plr.FindInventory(itemname);
			}
			if ((itemactor) && (itemactor.maxamount))
			{
				itemmax = itemactor.maxamount;
				if (plr.CountInv(itemactor.getclassname()) >= itemmax) {hasroom = false;}
			}
			if ((plr.score >= buyprice) || (user_allowdebt == true)) {canafford = true;}
			if ((canafford == true) && (canshop == true) && (hasroom == true) && (CanDoDebt(plr) == true))
			{
				DoDebt(buyprice); //must run before making the purchase.
				DoPurchase(buyprice);
			}
			else 
			{
				A_StartSound("player/noway");
				string failmsg;
				if (itempool.Size() == 0) 
				{
					if (itempool_blacklist.Size() > 0)
					{
						failmsg = "\crthis shop has no items to sell.\n\ckmaybe the shop items were blacklisted?";
					}
					else {failmsg = "\crthis shop does not have any valid items to sell.";}
				}
				else if (canshop == false) {failmsg = "\crthis shop is out of stock.";}
				else if (hasroom == false) {failmsg = "\cryou're out of inventory space.";}
				else if ((canafford == false) && (user_allowdebt == false)) {failmsg = "\cryou cannot afford this item.";}
				//else if ((canafford == false) && (user_allowdebt == true)) {failmsg = "\cryou cannot buy this item while in debt.";}
				else if (CanDoDebt(plr) == false) {failmsg = "\cryou don't have enough HP to buy this.";}
				else {failmsg = "\cra mysterious force prevents you from buying this item.";}
				
				console.printf("%s", failmsg);
			}
		}
	}
	
	override int GetShopPrice(void)
	{
		int getshopprice_int = ((shop_baseprice + currentprice) * user_pricemult) * CheckSaleNum();
		if (getshopprice_int < 1) {getshopprice_int = 1;}
		return getshopprice_int;
	}
	
	override int GetShopBasePrice(void)
	{
		int getshopprice_int = shop_baseprice * user_pricemult;
		return getshopprice_int;
	}
	
	override string GetShopItem(void)
	{
		return shop_currentitem;
	}
	
	override void GetSalePercent(void)
	{
		if (dosale)
		{
			float minsale = user_salemin + (0.01 * LevelSale);
			float maxsale = user_salemax + (0.03 * (extrasale + lastsale)) + (0.01 * LevelSale);
			int based = shop_baseprice * user_pricemult;
			if (based <= 0) {based = 1;}
			float overpricesale = (0.1 * ((currentprice + based) / based)) - 0.1;
			minsale += overpricesale;
			maxsale += overpricesale;
			if (maxsale > 0.9) {maxsale = 0.9;}
			if (minsale > maxsale) {minsale = maxsale;}
			float rtn = 1.0 - frandom(minsale, maxsale); //generate random sale percentage. sales get better depending on player's last purchase and the shop's last sale.
			salenum = rtn;
			//console.printf("%.2f", rtn);
		}
		else {salenum = 1.0;}
	}
	
	override bool IsPriceDecreased(void)
	{
		if ((curround >= lastpurchased + user_pricedown_round) && (currentprice > 0)) {return true;}
		else {return false;}
	}
	
	virtual void DoPurchase(int buyprice)
	{
		frame += 1;
		A_StartSound("switches/normbutn");
		PurchaseMessage(buyprice);
		plr.score -= buyprice;
		let diplr = DI_PlayerBase(plr);
		diplr.buycounter += 1;
		diplr.moneyspent += buyprice;
		int priceincrease = shop_baseprice * CheckSaleNum();
		if (priceincrease < 2) {priceincrease = 1;}
		currentprice += priceincrease;
		lastpurchased = curround;
		plr.ACS_ScriptCall("di_shopbought", buyprice, user_dontprogress);
		plr.A_SpawnItemEX(shop_currentitem, zofs: 16, flags: SXF_NOCHECKPOSITION);
		plr.Thrust(0.01); //gross hack to make player instantly pickup an item.
		A_SpawnItemEX("DI_Teleport", flags: SXF_NOCHECKPOSITION);
		AddPriceMult(0); //refresh price mult for passive items.
		--shop_itemstock;
		if (shop_itemstock == 0) {canshop = false;}
	}
	
	virtual void PurchaseMessage(int price)
	{
		console.printf("\cfPurchased an item for %d coins.", price);
	}
	
	virtual void AddPriceMult(int addmult)
	{
		item_pricemult = 1.0;
		DI_PlayerBase diplr = DI_PlayerBase(plr);
		if (diplr && (diplr.knownpassives.Size() > 0))
		{
			foreach(mo : diplr.knownpassives)
			{
				DIPassiveInventory passive = DIPassiveInventory(diplr.FindInventory(mo));
				if (passive)
				{
					item_pricemult *= passive.MultiplyShopPrices(self);
					//console.printf("%s is adding %.1f to the shop", passive.getclassname(), passive.multiplyshopprices(self));
				}
			}
		}
	
		if (extra_pricemult < 1) {extra_pricemult = 1;}
		extra_pricemult += addmult;
		user_pricemult = default_pricemult * extra_pricemult * item_pricemult;
		//console.printf("%.1f", user_pricemult);
	}
}

Class DIRentShop : DIShop
{
	override void DoPurchase(int buyprice)
	{
		Super.DoPurchase(buyprice);
		if (plr is "DI_PlayerBase")
		{
			DI_PlayerBase diplr = DI_PlayerBase(plr);
			diplr.renteditems.Push(shop_currentitem);
		}
		
	}

	override void PurchaseMessage(int price)
	{
		console.printf("\cfRented an item for %d coins.", price);
	}
	
	Default
	{
		//$Title "Shop (Rental)"
	}

	States
	{
		Spawn:
			SHOP C -1;
			Stop;
		Inactive:
		Active:
			SHOP C 1 A_Jump(256, "Purchase");
			Stop;
	}
}

Class DIPermaShop : DIShop
{	
	override void DoPurchase(int buyprice)
	{
		Super.DoPurchase(buyprice);
		
		if (plr is "DI_PlayerBase")
		{
			DI_PlayerBase diplr = DI_PlayerBase(plr);
			diplr.BuyPermaItem(shop_currentitem);
		}
	}
	
	override void PurchaseMessage(int price)
	{
		console.printf("\cfPurchased a \czpermanent \cfitem for %d coins.", price);
	}
	
	Default
	{
		//$Title "Shop (Permanent)"
	}

	States
	{
		Spawn:
			SHOP E -1;
			Stop;
		Inactive:
		Active:
			SHOP E 1 A_Jump(256, "Purchase");
			Stop;
	}
}

Class DIConsumableShop : DIShop
{
	//set "user_itemstock" to -1 in the map editor to give this shop unlimited stock.
	
	Default
	{
		//$Title "Shop (Consumables)"
	}

	States
	{
		Spawn:
			SHOP G -1;
			Stop;
		Inactive:
		Active:
			SHOP G 1 A_Jump(256, "Purchase");
			Stop;
	}
}