Class DIShop_Base : SwitchableDecoration abstract
{
	mixin DI_ActorMixin;
	
	string user_currentsprite, shop_currentsprite; //the sprite of the current item.
	int user_itemstock, shop_itemstock; //how many items this shop can sell per round. set to -1 for unlimited stock. defaults to 1.
	bool user_allowdebt; //allow the player to buy from this shop even if they're in debt.
	int user_debthp; //minimum HP to take from the player upon going into debt.
	bool user_hideitem; //does not reveal the item to the player.
	bool user_hideprice; //hides the price of the item. not recommended to use.
	int user_displayoffset; //add/reduce the Z offset for the displays above the shop.
	
	property AllowDebt: user_allowdebt;
	property DebtHP: user_debthp;
	property HideItem: user_hideitem;
	property HidePrice: user_hideprice;
	property DisplayOffset: user_displayoffset;
	
	int currentprice; //how much the price has increased.
	int lastpurchased; //checks how many rounds ago the last purchase was.
	int curround; //the current round.
	int checkcount; //timer for checking round.
	int saleamount; //total price gets divided by this.
	int lastsale; //how many rounds ago the last sale was.
	bool canshop;
	
	PlayerPawn plr; //the player who is attempting to make a purchase.
	
	override void PostBeginPlay()
	{
		SpawnShopExtras();
	}
	
	virtual void SpawnShopExtras(void)
	{
		if (user_hideitem == false) {A_SpawnItemEX("DIShop_Item", flags: SXF_SETMASTER | SXF_NOCHECKPOSITION);}
		if (user_hideprice == false)
		{
			A_SpawnItemEX("DIShop_Number1", flags: SXF_SETMASTER | SXF_NOCHECKPOSITION);
			A_SpawnItemEX("DIShop_Number2", flags: SXF_SETMASTER | SXF_NOCHECKPOSITION);
			A_SpawnItemEX("DIShop_Number3", flags: SXF_SETMASTER | SXF_NOCHECKPOSITION);
			A_SpawnItemEX("DIShop_Number4", flags: SXF_SETMASTER | SXF_NOCHECKPOSITION);
			A_SpawnItemEX("DIShop_Number5", flags: SXF_SETMASTER | SXF_NOCHECKPOSITION);
			A_SpawnItemEX("DIShop_Number6", flags: SXF_SETMASTER | SXF_NOCHECKPOSITION);
			A_SpawnItemEX("DIShop_Number7", flags: SXF_SETMASTER | SXF_NOCHECKPOSITION);
		}
	}
	
	abstract void PurchaseShopItem();
	
	abstract void RerollShopItem();
	
	abstract clearscope int GetShopPrice();
	
	abstract clearscope int GetShopBasePrice();
	
	abstract clearscope string GetShopItem();
	
	clearscope virtual int GetDebt(PlayerPawn buyer, int buyprice = -999999)
	{
		//overwrite this if you want to change how debt is calculated.
		if (buyprice = -999999)
		{
			//change the buyprice integer if you want to calculate the debt for a custom price.
			buyprice = GetShopPrice();
		}
		if (buyer && (user_allowdebt == true)) //only calculate debt if you're allowed to go into debt!
		{
			//debtnum = the base rate of DebtHP assigned by the shop itself, then +1 for every 50 coins you couldn't afford.
			if (buyprice < buyer.score) {return 0;}
			else
			{
				let debtnum = (buyprice - buyer.score) / 50;
				if (buyer.score < 0) {debtnum = buyprice / 50;}
				if (debtnum < 0) {debtnum = 0;}
				debtnum += user_debthp;
				return debtnum;
			}
		}
		else {return 0;}
	}
	
	virtual void DoDebt(int buyprice)
	{
		//overwrite this if you want something custom to happen upon the player going into debt.
		if (GetDebt(plr) >= 1)
		{
			plr.A_GiveInventory("DI_Degen", GetDebt(plr));
			plr.ACS_ScriptCall("DebtMSG");
		}
	}
	
	
	Default
	{
		Radius 20;
		Height 96;
		Activation THINGSPEC_Switch | THINGSPEC_ThingTargets;
		+SOLID;
		+USESPECIAL;
	}
	
	States
	{
		Spawn:
			SHOP A -1;
			Stop;
		Inactive:
		Active:
			SHOP A 1 A_Jump(256, "Purchase");
		Purchase:
			#### # 1 PurchaseShopItem();
			#### # 0 A_Jump(256, "Squish");
			Stop;
		Reroll:
			#### # 1 RerollShopItem();
			#### # 0 A_Jump(256, "Squish");
			Stop;
		Squish:
			#### ########## 1 A_DIScale(-0.025, 0.025);
			#### # 0 A_Jump(256, "Spawn");
			Stop;
	}
}