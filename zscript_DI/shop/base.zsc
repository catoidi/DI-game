Class DIShop_Base : SwitchableDecoration abstract
{
	mixin DI_ActorMixin;
	
	string user_currentsprite, shop_currentsprite; //the sprite of the current item.
	int user_itemstock, shop_itemstock; //how many items this shop can sell per round. set to -1 for unlimited stock. defaults to 1.
	bool user_allowdebt; //allow the player to buy from this shop even if they're in debt.
	int user_debthp; //minimum HP to take from the player upon going into debt.
	bool user_hideitem; //does not reveal the item to the player.
	bool user_hideprice; //hides the price of the item. not recommended to use.
	int user_displayoffset; //add/reduce the Z offset for the displays above the shop.
	float user_salemin; //minimum sale amount. default is 25%. sale chance also increases sale amount.
	float user_salemax; //maximum sale amount. default is 60%. rarely reaches this number.
	bool teleportfix; //prevent shops from telefragging players, and vice versa.
	int teleporttic; //timer for teleportfix.
	
	property AllowDebt: user_allowdebt;
	property DebtHP: user_debthp;
	property HideItem: user_hideitem;
	property HidePrice: user_hideprice;
	property DisplayOffset: user_displayoffset;
	property MinSale: user_salemin;
	property MaxSale: user_salemax;
	property TeleportFix: teleportfix;
	
	int currentprice; //how much the price has increased.
	int lastpurchased; //checks how many rounds ago the last purchase was.
	int curround; //the current round.
	int checkcount; //timer for checking round.
	int lastsale; //how many rounds ago the last sale was.
	int extrasale;
	float salenum; //current sale percentage.
	bool dosale; //puts the shop item on sale when true.
	bool canshop;
	
	int newitem_size; //size of newitem_icon, horizontally.
	string newitem_icon, newitem_name, newitem_desc; //used for activating the DI_NewItem ACS Script. Provides the sprite, name, and first description of the most recently purchased item.
	
	PlayerPawn plr; //the player who is attempting to make a purchase.
	
	override void PostBeginPlay()
	{
		SpawnShopExtras();
	}
	
	virtual void SpawnShopExtras(void)
	{
		if (user_hideitem == false) {A_SpawnItemEX("DIShop_Item", flags: SXF_SETMASTER | SXF_NOCHECKPOSITION);}
		if (user_hideprice == false)
		{
			A_SpawnItemEX("DIShop_Number1", flags: SXF_SETMASTER | SXF_NOCHECKPOSITION);
			A_SpawnItemEX("DIShop_Number2", flags: SXF_SETMASTER | SXF_NOCHECKPOSITION);
			A_SpawnItemEX("DIShop_Number3", flags: SXF_SETMASTER | SXF_NOCHECKPOSITION);
			A_SpawnItemEX("DIShop_Number4", flags: SXF_SETMASTER | SXF_NOCHECKPOSITION);
			A_SpawnItemEX("DIShop_Number5", flags: SXF_SETMASTER | SXF_NOCHECKPOSITION);
			A_SpawnItemEX("DIShop_Number6", flags: SXF_SETMASTER | SXF_NOCHECKPOSITION);
			A_SpawnItemEX("DIShop_Number7", flags: SXF_SETMASTER | SXF_NOCHECKPOSITION);
		}
	}
	
	abstract void PurchaseShopItem(); //player is attempting to purchase an item.
	
	abstract void RerollShopItem(); //the shop is being forced to reroll.
	
	abstract clearscope int GetShopPrice(); //get shop's current price displayed to the player.
	
	abstract clearscope int GetShopBasePrice(); //get the base price of the shop's item.
	
	abstract clearscope string GetShopItem(); //give the name of the current shop item.
	
	abstract clearscope bool IsPriceDecreased(); //whether or not the shop's price is currently decreasing. (does not account for sales.)
	
	abstract void GetSalePercent(); //returns a multiplier for the sale price. 1.0 means there's no sale. below 1.0 means the price is marked down, and vice versa.
	
	clearscope float CheckSaleNum() 
	{
		//if (salenum == 0.0) {return 1.0;}
		//else {return salenum;}
		
		return salenum;
	}
	
	clearscope virtual int GetDebt(PlayerPawn buyer, int buyprice = -999999)
	{
		//overwrite this if you want to change how debt is calculated.
		if (buyprice == -999999)
		{
			//change the buyprice integer if you want to calculate the debt for a custom price.
			buyprice = GetShopPrice();
		}
		if (buyer && (user_allowdebt == true)) //only calculate debt if you're allowed to go into debt!
		{
			//debtnum = the base rate of DebtHP assigned by the shop itself, then +1 for every 50 coins you couldn't afford.
			if (buyprice < buyer.score) {return 0;}
			else
			{
				let debtnum = (buyprice - buyer.score) / 5;
				if (buyer.score < 0) {debtnum = buyprice / 5;}
				if (debtnum < 0) {debtnum = 0;}
				debtnum += user_debthp;
				if (buyer.score == buyprice) {debtnum = 0;}
				return debtnum;
			}
		}
		else {return 0;}
	}
	
	clearscope virtual bool CanDoDebt(PlayerPawn buyer, int buyprice = -999999)
	{
		int debtnum = GetDebt(buyer, buyprice);
		if (buyer.GetMaxHealth(true) <= buyer.CountInv("DI_Degen") + debtnum) {return false;}
		else {return true;}
	}
	
	virtual void DoDebt(int buyprice)
	{
		//overwrite this if you want something custom to happen upon the player going into debt.
		if (GetDebt(plr) >= 1)
		{
			plr.A_GiveInventory("DI_Degen", GetDebt(plr));
			plr.ACS_ScriptCall("DebtMSG");
		}
	}
	
	override bool Used(Actor user)
	{
		if (user is "DI_PlayerBase")
		{
			bool distancecheck = false;
			
			target = user;
			A_FaceTarget(max_pitch: 180, flags: FAF_MIDDLE);
			FLineTraceData ptr;
			
			if (LineTrace(angle, 100, pitch, TRF_THRUSPECIES, height / 2, data: ptr) == true)
			{
				if (ptr.HitActor == target) {distancecheck = true;}
			}
		
			if (distancecheck)
			{
				target = user;
				PurchaseShopItem();
				SetStateLabel("Squish");
				return true;
			}
		}
		return false;
	}
	
	override bool PreTeleport(Vector3 destpos, double destangle, int flags)
	{
		if (teleportfix) {bSOLID = false;}
		return Super.PreTeleport(destpos, destangle, flags);
	}
	
	override void PostTeleport(Vector3 destpos, double destangle, int flags)
	{
		//if (teleportfix) {bSOLID = true;}
		Super.PostTeleport(destpos, destangle, flags);
	}
	
	override void Tick()
	{
		Super.Tick();
		TeleportCheck();
	}
	
	virtual void TeleportCheck()
	{
		if (teleportfix)
		{
			++teleporttic;
			if (teleporttic >= 35)
			{
				if (!bSOLID && CheckRange(128.0, true)) {bSOLID = true;}
				
				teleporttic = 0;
			}
		}
	}
	
	Default
	{
		Radius 20;
		Height 96;
		Species "DIShop";
		//Activation THINGSPEC_Switch | THINGSPEC_ThingTargets;
		+SOLID;
		+TELESTOMP;
		//+USESPECIAL;
		DIShop_Base.MinSale 0.1;
		DIShop_Base.MaxSale 0.3;
		DIShop_Base.TeleportFix true; //implies that the shop is SOLID.
		//$Category "DI/Shops/"
		//$Color 14
	}
	
	States
	{
		Spawn:
			SHOP A -1;
			Stop;
		Inactive:
		Active:
			SHOP A 1 A_Jump(256, "Purchase");
		Purchase:
			#### # 1 PurchaseShopItem();
			#### # 0 A_Jump(256, "Squish");
			Stop;
		Reroll:
			#### # 1 RerollShopItem();
			#### # 0 A_Jump(256, "Squish");
			Stop;
		Squish:
			#### ########## 1 A_DIScale(-0.025, 0.025);
			#### # 0 A_Jump(256, "Spawn");
			Stop;
	}
}