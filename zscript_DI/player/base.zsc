Class DI_PlayerBase : PlayerPawn abstract
{
	mixin DI_ActorMixin;

	Default
	{
		Speed 0.7;
		Health 1000;
		Player.MaxHealth 1000;
		Radius 16;
		Height 56;
		Mass 1000;
		BloodColor "Red";
		PainChance 255;
		SelfDamageFactor 0.25;
		Player.ViewBob 0.4;
		Player.JumpZ 11;
		Player.CrouchSprite "PLYC";
		Player.ColorRange 144, 189;
		Player.Colorset 0, "$TXT_COLOR_GREEN", 144, 191, 144;
		Player.Colorset 1, "$TXT_COLOR_RED", 96, 143, 96;
		Player.Colorset 2, "$TXT_COLOR_BLUE", 192, 239, 192;
	}
	
	string autoblacklist;
	string permastart;
	Property AutoBlacklist : autoblacklist; //Add multiple items to this list by separating them with a comma.
	Property Permastart : permastart;
	
	bool diefade;
	int combonum;
	int combonum_bonus;
	int combodrain;
	bool hpupdate;
	int prevhp;
	int degentimer;
	int cointimer;
	int killtic; //list of confirmed weapon kills this tic.
	string LastWeaponKill;
	string CurrentWeaponKill;
	int LastKillTimer, LastKillTimer_Max;
	bool JustKilled; //returns true when the player activates a fresh weapon kill.
	bool justfired; //set to true on tics where the player has fired their weapon.
	Array<String> freshlist; //every weapon that's activated a fresh weapon bonus.
	Array<String> wavewipe; //a list of items to wipe every wave.
	Array<String> wavekeep; //any items you've purchased that should not be wiped every wave.
	Array<String> renteditems; //a list of all items you've rented this round.
	
	Array<String> knownpassives; //NOT A LIST OF ITEMS CURRENTLY IN YOUR INVENTORY. this shows every passive you've ever interacted with.
	int boxammonum;
	
	int lastscore; //the score you had last round.
	int killcounter; //how many enemies you've killed.
	int buycounter; //how many times you've bought from a shop.
	int moneyspent; //how much money you've spent at shops.
	
	Vector2 OldMove;
	bool switchtime;
	Weapon oldweapon;
	DI_Weapon wpn;
	
	int weaponnum;
	
	int chance_ice; //chance of your attack dealing this damage type.
	int chance_fire;
	int chance_lightning;
	int chance_poison;
	string statusreplace; //this tells bullets/projectiles to replace their damage type with this.
	
	bool freshmsg;
	
	bool iamfrozen;
	
	bool inwave;
	string currentevent;
	
	DIHandler thebrain;
	DIPopupHandler popuphandler;
	
	ui DI_HUD thehud;
	
	bool hidemap;
	
	override void PostBeginPlay(void)
	{
		Super.PostBeginPlay();
		
		int ThisLump = Wads.FindLump("DIWIPE", 0, Wads.ANYNAMESPACE);
		int NextLump = Wads.FindLump("DIWIPE", ThisLump + 1, Wads.ANYNAMESPACE);
		
		while (ThisLump != -1)
		{
			Wads.ReadLump(ThisLump).Split(wavewipe, "\n", TOK_SKIPEMPTY);
			ThisLump = NextLump;
			NextLump = Wads.FindLump("DIWIPE", ThisLump + 1, 1);
		}
		
		DoPermaStart();
		DoAutoBlacklist();
	}
	
	override void Tick(void)
	{
		Super.Tick();
		
		if (self.health > 0)
		{
			inwave = CallACS("DICheckWaveProgress");
		
			ComboFreezer();
			ScaleSquish();
			ComboCounter();
			BoxAmmoChecker();
			StatusChance();
			if (player.ReadyWeapon == oldweapon)
			{
				AutoOffset();
			}
			else
			{
				ResetAutoOffset();
				oldweapon = player.ReadyWeapon;
			}
			
			wpn = DI_Weapon(player.ReadyWeapon);
			
			//weaponnum = 0;
			
			justfired = false;
			JustKilled = false;
			
			if (prevhp != self.health) {hpupdate = true;}
			else if (hpupdate == true)  //delayed by 1 tic.
			{
				if (prevhp < self.health - 50) {prevhp = self.health - 50;} //capped to prevent extreme scaling issues.
				else {prevhp = self.health;}
			}
			
			if (cointimer > 50) {cointimer *= 0.98;}
			else if (cointimer > 0) {--cointimer;}
			
			/*
			if (isFrozen() == false)
			{
				int degenmax = 210;
				if (self.CountInv("DI_Degen") > 0) {degenmax /= 3;}
				if (self.Health > (self.GetMaxHealth(true) - self.CountInv("DI_Degen")) * 2) {degenmax /= 7;}
				if (self.degentimer > degenmax)
				{
					if ((inwave) && (self.Health > (self.GetMaxHealth(true) - self.CountInv("DI_Degen"))) && (self.CountInv("DI_Regen") == 0))
					{
						A_SetHealth(self.Health - 1);
						if (self.Health < 1) {self.A_Die();}
						if (bNOBLOOD == false) {A_DISpawnPlayerBlood();}
					}
					self.degentimer = 0;
				}
				else {++self.degentimer;}
			}
			*/
		}
		
		if (killtic > 0) {killtic = 0;}
	}
	
	override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
	{
		if ((damage > 0) && wpn)
		{
			//add recoil to the current weapon upon taking damage.
			double addrecoil = (3 + (damage / 2.5)) / (DIMaxHealth() / 100.0);
			if (addrecoil > 20) (addrecoil = 20.0);
			wpn.current_recoil += addrecoil / wpn.wpn_recoil_offset;
		}
		
		Super.TakeSpecialDamage(inflictor, source, damage, damagetype);
		
		return damage;
	}
	
	
	int deathrestart;
	//COPY PASTED FROM GZDOOM.pk3
	//IF UPDATING TO NEW ENGINE THIS MUST BE UPDATED TOO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	override void DeathThink ()
	{
		let player = self.player;
		int dir;
		double delta;

		player.Uncrouch();
		TickPSprites();

		player.onground = (pos.Z <= floorz);
		if (self is "PlayerChunk")
		{ // Flying bloody skull or flying ice chunk
			player.viewheight = 6;
			player.deltaviewheight = 0;
			if (player.onground)
			{
				if (Pitch > -19.)
				{
					double lookDelta = (-19. - Pitch) / 8;
					Pitch += lookDelta;
				}
			}
		}
		else if (!bIceCorpse)
		{ // Fall to ground (if not frozen)
			player.deltaviewheight = 0;
			if (player.viewheight > 6)
			{
				player.viewheight -= 1;
			}
			if (player.viewheight < 6)
			{
				player.viewheight = 6;
			}
			if (Pitch < 0)
			{
				Pitch += 3;
			}
			else if (Pitch > 0)
			{
				Pitch -= 3;
			}
			if (abs(Pitch) < 3)
			{
				Pitch = 0.;
			}
		}
		player.mo.CalcHeight ();
			
		if (player.attacker && player.attacker != self)
		{ // Watch killer
			double diff = deltaangle(angle, AngleTo(player.attacker));
			double delta = abs(diff);
	
			if (delta < 10)
			{ // Looking at killer, so fade damage and poison counters
				if (player.damagecount)
				{
					player.damagecount--;
				}
				if (player.poisoncount)
				{
					player.poisoncount--;
				}
			}
			delta /= 8;
			Angle += clamp(diff, -5., 5.);
		}
		else
		{
			if (player.damagecount)
			{
				player.damagecount--;
			}
			if (player.poisoncount)
			{
				player.poisoncount--;
			}
		}		

		//prevent player from leaving level before seeing death popups
		if ((player.cmd.buttons & BT_USE ||
			((deathmatch || alwaysapplydmflags) && sv_forcerespawn)) && !sv_norespawn)
		{
			++deathrestart;
			
			if (deathrestart > 35)
			{
				if (Level.maptime >= player.respawn_time || ((player.cmd.buttons & BT_USE) && player.Bot == NULL))
				{
					player.cls = NULL;		// Force a new class if the player is using a random class
					player.playerstate = (multiplayer || level.AllowRespawn || sv_singleplayerrespawn || G_SkillPropertyInt(SKILLP_PlayerRespawn)) ? PST_REBORN : PST_ENTER;
					if (special1 > 2)
					{
						special1 = 0;
					}
				}
			}
		}
		else if (deathrestart > 20) {deathrestart -= 10;}
		else if (deathrestart > 10) {deathrestart = 10;}
		else if (deathrestart > 0) {--deathrestart;}
	}
	
	void DoPermaStart()
	{
		array<string> currentline;
		permastart.split(currentline, ","); //Use commas to add multiple items to the wavekeep array.
		for (int i = 0; i < currentline.size(); ++i) {BuyPermaItem(currentline[i]);}
	}
	
	void DoAutoBlacklist()
	{
		array<string> thelist;
		autoblacklist.split(thelist, ","); //Use commas to add multiple items to the blacklist.
		for (int i = 0; i < thelist.size(); ++i)
		{
			let cmd = string.format("autoblacklist %s", thelist[i]);
			eventhandler.sendnetworkevent(cmd);
		}
	}
	
	static void PlayerDoUnlock(string uncvar, int plrnum = 0)
	{
		uncvar = string.format("diunlock_%s", uncvar);
		EventHandler.SendInterfaceEvent(plrnum, uncvar);
	}
	
	clearscope virtual bool CanFreshKill(string freshweapon = "")
	{
		if (!player.ReadyWeapon) {return false;}
		if (freshweapon == "") {freshweapon = player.ReadyWeapon.GetClassName();}
		if ((LastWeaponKill != freshweapon) && (LastKillTimer < 1)) {return true;}
		else if (JustKilled == true) {return true;}
		else {return false;}
	}
	
	virtual void IsFreshKill(DI_Weapon curwpn)
	{
		int LastKillTimer_Count = 0;
		freshlist.Push(curwpn.GetClassName());
		for (int i = 0; i < freshlist.Size(); ++i)
		{
			if (freshlist[i] == curwpn.GetClassName()) {++LastKillTimer_Count;}
		}
		LastWeaponKill = CurrentWeaponKill;
		LastKillTimer = 35 * (1 + LastKillTimer_Count);
		if (score > 0) {LastKillTimer += score / weaponnum;} //if number of weapons is 0 this will crash :)
		LastKillTimer_Max = LastKillTimer;
		JustKilled = true;
		A_StartSound("combord", 0);
		int diwep_fresh = curwpn.wpn_freshbonus;
		string plussign = "+";
		ACS_ScriptCall("dofreshflash");
		eventhandler.sendnetworkevent("diplayerfreshbonus");
		if (diwep_fresh < 0) {plussign = "";}
		console.printf("\cnfresh weapon bonus! (%s%d)", plussign, diwep_fresh);
	}
	
	virtual int FreshKillCount()
	{
		return freshlist.Size();
	}
	
	virtual void DIMonsterKilled(DI_Monster mon, bool notweapon = false)
	{
		++killcounter;
		
		int freshnum = 1;
		int freshcharge = 1;
		int islastweapon = 1;
		
		DI_Weapon curwpn;
		if (player.ReadyWeapon)
		{
			if (mon.plrwpn)
			{
				curwpn = mon.plrwpn;
				CurrentWeaponKill = mon.plrwpn.GetClassName();
			}
			else
			{
				CurrentWeaponKill = player.ReadyWeapon.GetClassName();
				curwpn = wpn;
			}
			
			if (curwpn.wpn_freshbonus) {freshnum = curwpn.wpn_freshbonus;}
			if (notweapon == true) {freshnum = 0;}
			else {++killtic;}
			
			freshcharge += curwpn.wpn_freshcharge;
			
			if (CurrentWeaponKill == LastWeaponKill) {islastweapon = 2;}
		}
		
		int killbonus = ((combonum * 10) + (freshnum * 3) * islastweapon) + (freshcharge * 15);
			
		LastKillTimer -= killbonus;
		if (LastKillTimer < 1) {LastKillTimer = 0;}

		if (curwpn && CanFreshKill(CurrentWeaponKill) && !notweapon) 
		{
			IsFreshKill(curwpn);
			mon.wasfreshkilled = true;
		}
	}
	
	virtual void BoxAmmoChecker(void)
	{
		boxammonum = 0;
		if (FindInventory("LaserPointer")) {++boxammonum;}
		if (FindInventory("PartyShotty")) {++boxammonum;}
		if (FindInventory("PopcornGun")) {++boxammonum;}
	}
	
	virtual void StatusChance(void)
	{
		int statuschance4 = chance_ice + chance_fire + chance_lightning + chance_poison;
		if (statuschance4 > 0)
		{
			int randomchance = random(-2, statuschance4);
			if (randomchance <= 0) {statusreplace = "";}
			else if (randomchance <= chance_ice) {statusreplace = "Ice";}
			else if (randomchance <= chance_ice + chance_fire) {statusreplace = "Fire";}
			else if (randomchance <= chance_ice + chance_fire + chance_lightning) {statusreplace = "Lightning";}
			else if (randomchance <= statuschance4) {statusreplace = "Poison";}
			else {statusreplace = "";}
		}
		else {statusreplace = "";}
		
		chance_ice = 0;
		chance_fire = 0;
		chance_lightning = 0;
		chance_poison = 0;
	}
	
	clearscope virtual int ComboThreshold(int cnum, bool ignoreitems = false)
	{
		//use this to check how much combo points the player must generate to reach certain combo numbers.
		int cret = 0;
		int numcheck = cnum;
		if (ignoreitems == false)
		{
			numcheck -= CountInv("DI_WealthJar");
		}
		switch (numcheck)
		{
			default: cret = 0; break;
			case 2: cret = 350; break;
			case 3: cret = 1050; break;
			case 4: cret = 2100; break;
			case 5: cret = 3500; break;
			case 6: cret = 5250; break;
			case 7: cret = 10500; break;
			case 8: cret = 21000; break;
			case 9: cret = 42000; break;
		}

		return cret;
	}
	
	clearscope virtual int GetCombo(bool getdrain = false)
	{
		//use this to check the player's current combo number.
		int cnum = 1;
		int cdrain = 1;
		if (CountInv("DI_TokenComboTimer") > ComboThreshold(9)) {cnum = 9; cdrain = 110;}
		else if (CountInv("DI_TokenComboTimer") > ComboThreshold(8)) {cnum = 8; cdrain = 55;}
		else if (CountInv("DI_TokenComboTimer") > ComboThreshold(7)) {cnum = 7; cdrain = 36;}
		else if (CountInv("DI_TokenComboTimer") > ComboThreshold(6)) {cnum = 6; cdrain = 21;}
		else if (CountInv("DI_TokenComboTimer") > ComboThreshold(5)) {cnum = 5; cdrain = 10;}
		else if (CountInv("DI_TokenComboTimer") > ComboThreshold(4)) {cnum = 4; cdrain = 6;}
		else if (CountInv("DI_TokenComboTimer") > ComboThreshold(3)) {cnum = 3; cdrain = 3;}
		else if (CountInv("DI_TokenComboTimer") > ComboThreshold(2)) {cnum = 2; cdrain = 2;}
		
		if (wpn)
		{
			double drainmult = wpn.plr_combodrainbonus;
			if (drainmult < 0.1) {drainmult = 0.1;}
			
			cdrain *= drainmult;
			//console.printf("%.2f", drainmult);
		}
		
		if (getdrain == true) {return cdrain;}
		else {return cnum;}
	}
	
	clearscope virtual int GetScore()
	{
		double skillmult = 1.0;
		int wavenum = CallACS("DICheckWave");
		if (skill == 0) {skillmult = 0.25;}
		double itemmult = 1.0;
		if (knownpassives.Size() > 0)
		{
			foreach(mo : knownpassives)
			{
				DIPassiveInventory passive = DIPassiveInventory(FindInventory(mo));
				if (passive)
				{
					itemmult *= passive.MultiplyFinalScore();
				}
			}
		}
	
		return ((((wavenum - 1) * 100) * (0.2 * wavenum)) + (killcounter * 3) + (buycounter * 25) + (Score + moneyspent)) * skillmult * itemmult;
	}
	
	virtual void ComboCounter(void)
	{
		combonum = GetCombo();
		combodrain = GetCombo(true);
		
		//if (combodrain == 0) {combodrain = combonum;}
		
		combonum_bonus = 0;
		if (wpn)
		{
			combonum_bonus += wpn.wpn_extracoin;
			
			if ((CountInv("DI_TokenComboFreeze") == 0) && (Level.Total_Monsters > Level.Killed_Monsters)) 
			{
				if (combodrain > 0) {A_TakeInventory("DI_TokenComboTimer", combodrain);}
				if (LastKillTimer > 0) {LastKillTimer -= 1 + wpn.wpn_freshcharge;}
				if (LastKillTimer < 0) {LastKillTimer = 0;}
				
				if ((LastKillTimer == 0) && (freshmsg == false))
				{
					ACS_ScriptCall("FreshReadyMSG", 0, 0, 0, 0);
					freshmsg = true;
				}
				else if ((LastKillTimer > 0) && (freshmsg == true)) {freshmsg = false;}
			}
			A_SetInventory("DI_TokenCombo", combonum + combonum_bonus);
		}
	}
	
	virtual void ScaleSquish(void)
	{
		if (self.scale.X < self.default.scale.X) {A_DIScale(0.01, 0);}
		if (self.scale.Y < self.default.scale.Y) {A_DIScale(0, 0.01);}
		if (self.scale.X > self.default.scale.X) {A_DIScale(-0.01, 0);}
		if (self.scale.Y > self.default.scale.Y) {A_DIScale(0, -0.01);}
		
		if (self.scale.X < self.default.scale.X / 4) {self.scale.X = self.default.scale.X / 4;}
		if (self.scale.Y < self.default.scale.Y / 4) {self.scale.Y = self.default.scale.Y / 4;}
		if (self.scale.X > self.default.scale.X * 1.5) {self.scale.X = self.default.scale.X * 1.5;}
		if (self.scale.Y > self.default.scale.Y * 1.5) {self.scale.Y = self.default.scale.Y * 1.5;}
			
		if (diefade == true)
		{
			A_FadeTo(1.0, 99999.0);
			diefade = false;
		}
	}
	
	virtual void ComboFreezer()
	{
		if (isFrozen() && (iamfrozen == false)) 
		{
			A_GiveInventory("DI_TokenComboFreeze", 1);
			iamfrozen = true;
		}
		else if ((isFrozen() == false) && iamfrozen) 
		{
			A_TakeInventory("DI_TokenComboFreeze", 1);
			iamfrozen = false;
		}
	}
	
	clearscope virtual int DIMaxHealth(bool dodegen = true, bool dohpbuff = true)
	{
		let heal = GetMaxHealth(true);
		if (dodegen) {heal -= CountInv("DI_Degen");}
		if (dohpbuff && wpn) {heal *= wpn.plr_maxhp;} //HP Debt is proportional to any Max HP buffs applied to the player.
		if (heal < 1) {heal = 1;} //Minimum player HP of 1.
		return heal;
	}
	
	action void BuyPermaItem(string itemsave, int addamount = 1)
	{
		//marks an item in a player's inventory as permanent, which means they'll always keep that item when their items get wiped at the end of a wave.
		//can also accept multiple permanent items.
		//you can remove permanent items by setting addamount to a negative number.
		//setting addamount to 0 will completely remove that item from the permanent list.
		
		Array<String> removelist;
	
		string pushstring;
		bool alreadyadded = false;
		for (int j = 0; j < invoker.wavekeep.Size(); j++)
		{
			int itemlength = itemsave.Length();
			if (invoker.wavekeep[j].Left(itemlength) ~== itemsave)
			{
				string oldamount_str = invoker.wavekeep[j].Mid(itemlength + 1);
				//console.printf("old num: %s", oldamount_str);
				int oldamount = oldamount_str.ToInt(10);
				if (addamount != 0) {oldamount += addamount;}
				else {oldamount = 0;}
				
				if (oldamount > 0)
				{
					pushstring = string.format("%s,%d", itemsave, oldamount);
					invoker.wavekeep[j] = pushstring;
				}
				else 
				{
					removelist.Push(invoker.wavekeep[j]);
					//invoker.wavekeep.Delete(j);
				}
				
				alreadyadded = true;
				j = invoker.wavekeep.Size();
			}
		}
		if (addamount > 0)
		{
			if ((alreadyadded == false) || (invoker.wavekeep.Size() == 0))
			{
				pushstring = string.format("%s,%d", itemsave, addamount);
			
				invoker.wavekeep.Push(pushstring);
			}
		}
		for (int i = 0; i < removelist.Size(); ++i)
		{
			let spot = invoker.wavekeep.Find(removelist[i]);
			if (spot < invoker.wavekeep.Size())
			{
				invoker.wavekeep.Delete(spot);
			}
		}
	}
	
	clearscope virtual int GetPermaItemAmount(string itemcheck = "")
	{
		//returns how much the player has permanent versions of a specific item.
		//if no item is specified, returns how many perma items the player owns in totality.
	
		int returnnum = 0;
	
		bool checkall = false;
		if (itemcheck == "") {checkall = true;}
		
		for (int i = 0; i < wavekeep.Size(); i++)
		{
			Array<String> keeparray;
			wavekeep[i].Split(keeparray, ",");
			int keepnum = keeparray[1].ToInt(10);
			
			if (checkall) {returnnum += keepnum;}
			else if (itemcheck ~== keeparray[0]) {returnnum += keepnum;}
		}
		
		return returnnum;
	}
	
	action void DIWave_Start(void)
	{
		invoker.lastscore = invoker.score; //track how many points you start the wave with.
		
		//let all passives do enter wave functions.
		for (int i = 0; i < invoker.knownpassives.Size(); ++i)
		{
			DIPassiveInventory pass = DIPassiveInventory(invoker.FindInventory(invoker.knownpassives[i]));
			if (pass) {pass.EnterWave();}
		}
	}
	
	action void DIWave_End(void)
	{
		//forgive some debts
		int scoregained = invoker.score - invoker.lastscore; //how much money you earned this round.
		float interestrate = 1.2 - (0.002 * (invoker.GetMaxHealth(true) - invoker.CountInv("DI_Degen"))); //intrest on borrowed health is itself to the power of 1.4, subtracted by your max health.
		if (interestrate < 0.6) {interestrate = 0.6;} //dont let interest get too stupidly low.
		else if (interestrate > 1.4) {interestrate = 1.4;} //interest cant go above 40%.
		int interest = invoker.CountInv("DI_Degen") ** interestrate;
		if (interest > scoregained) {interest = scoregained;} //caps interest to whatever amount of money you made this round.
		if (interest > 0) 
		{
			invoker.score += interest;
			console.printf("\cxYou've received %d in interest from borrowed health.", interest);
		}
		int curdegen = invoker.CountInv("DI_Degen");
		if ((invoker.score >= 0) && (curdegen > 0)) //calculate returned health after interest is done.
		{
			if (curdegen > 10) {curdegen *= 0.9;}
			else {--curdegen;}
			
			console.printf("\cx%d borrowed health has been returned.", invoker.CountInv("DI_Degen") - curdegen); //return 10% of borrowed health to players with no debts.
			invoker.A_SetInventory("DI_Degen", curdegen);
		}
		
		//let all passives run enter shop functions before items get cleared.
		for (int i = 0; i < invoker.knownpassives.Size(); ++i)
		{
			DIPassiveInventory pass = DIPassiveInventory(invoker.FindInventory(invoker.knownpassives[i]));
			if (pass) {pass.EnterShop();}
		}
	
		Array<String> keeparray;
		
		for (int i = 0; i < invoker.wavekeep.Size(); i++) //return any permanent items that were lost during wave
		{
			keeparray.Clear();
			invoker.wavekeep[i].Split(keeparray, ",");
			int keepnum = keeparray[1].ToInt(10);
			
			if (invoker.CountInv(keeparray[0]) < keepnum)
			{
				invoker.A_SetInventory(keeparray[0], keepnum);
			}
		}
	
		for (int i = 0; i < invoker.wavewipe.Size(); i++) //wipe all rented items, but keep any permanent items bought.
		{
			Array<String> currentwipe;
			invoker.wavewipe[i].Split(currentwipe, ";");
			
			int saveitemnum = 0;
			
			keeparray.Clear();
			for (int j = 0; j < invoker.wavekeep.Size(); j++)
			{
				invoker.wavekeep[j].Split(keeparray, ",");
				if (currentwipe[0] == keeparray[0])
				{
					saveitemnum = keeparray[1].ToInt(10);
					j = invoker.wavekeep.Size();
				}
				else {keeparray.Clear();}
			}
			
			invoker.A_SetInventory(currentwipe[0], saveitemnum);
		}
			
		invoker.renteditems.Clear();
		
		//reset fresh weapon bonus
		invoker.LastKillTimer = 0;
		invoker.LastWeaponKill = "";
		invoker.freshlist.Clear();
		
		console.printf("%s", "\cxReturning any rented items...");
		
		console.printf("\cxYou earned %d coins this round.", scoregained);
		
		//reset all weapon's ammo counts to default values
		Array<String> allwpns;
		//copy/pasted from the ammo satchel
				
		for (int i = 0; i < 10; ++i)
		{
			for (int j = 0; j < invoker.player.Weapons.SlotSize(i); ++j)
			{
				class curwpn = invoker.player.Weapons.GetWeapon(i, j);
				if (curwpn)
				{
					allwpns.push(curwpn.GetClassName());
				}
			}
		}
		for (int i = 0; i < allwpns.Size(); ++i)
		{
			let curwpn = DI_Weapon(invoker.FindInventory(allwpns[i]));
			if (curwpn != null) {curwpn.RestoreStartAmmo();}
		}

		//remove spawned coins
		EventHandler.SendNetworkEvent("DI_RemoveAllCoins");
		
		//clear random event data
		invoker.currentevent = "";
	}

	action void A_DIPlayerPain(bool noblood = false)
	{
		A_Pain();
		A_RemoveLight("shoot");
		A_DIScale(0.05, -0.05);
		A_TakeInventory("DI_TokenComboTimer", 35 * invoker.combodrain);
		if (!noblood) {A_DISpawnPlayerBlood();}
	}
	
	action void A_DISpawnPlayerBlood()
	{
		double diX = frandom(-self.Radius, self.Radius);
		double diY = frandom(-self.Radius, self.Radius);
		double diZ = frandom(self.Height / 2, self.Height);
		A_SpawnItemEX(self.BloodType, diX, diY, diZ, 0, 0, random(6, 10), 0, SXF_USEBLOODCOLOR | SXF_NOCHECKPOSITION, 96);
	}
	
	action void DI_HealSelf(int healamount = 1, float maxheal = 1.0, bool doregen = false, bool dobuff = true)
	{
		//give health/regen to the player without going beyond the max health (minus borrowed health).
		if (dobuff && invoker.wpn) {healamount *= invoker.wpn.plr_healing;}
		if (healamount < 1) {healamount = 1;}
		int healnum = (invoker.DIMaxHealth() * maxheal) - invoker.health;
		if (healnum > 0)
		{
			if (healnum > healamount) {healnum = healamount;}
			if (doregen) {invoker.GiveInventory("DI_Regen", healnum);}
			else {invoker.GiveBody(healnum, 9999999);}
		}
	}
	
	action void AutoOffset()
	{	
		//when enabled, auto adjust weapon sprite's offset based off current recoil and player's relative velocity.
		//this setup cannot be used with the default weapon bobbing enabled, as it will cause visual issues.
		//you can disable autooffset in the weapon's properties.
		
		if (invoker.wpn && invoker.wpn.wpn_autooffset == true && invoker.switchtime == false)
		{
			//recoil part
			double newoffset = invoker.wpn.current_recoil * invoker.wpn.wpn_recoil_offset;
			if (newoffset != invoker.wpn.autooffset_prev)
			{
				Vector2 shootoffset = 
				(
					(newoffset - invoker.wpn.autooffset_prev) * invoker.wpn.wpn_recoil_offset_x,
					(newoffset - invoker.wpn.autooffset_prev) * invoker.wpn.wpn_recoil_offset_y
				);
				
				//Use these 2 debug things if you're having issues with weapon offsets.
				//console.printf("newoffset: %.1f\nautooffset_prev: %.1f\nx: %.1f\ny: %.1f", newoffset, diwep.autooffset_prev, diwep.wpn_recoil_offset_x, diwep.wpn_recoil_offset_y);
				//console.printf("\ct%s: %.1f, %.1f", diwep.GetClassName(), shootoffset.x, shootoffset.y);
				A_WeaponOffset(shootoffset.x, shootoffset.y, WOF_ADD);
			
				invoker.wpn.autooffset_prev = newoffset;
			}
			
			//velocity part
			Vector3 CVel = invoker.Vel;
			double CAng = invoker.Angle;
			Vector2 NewMove =
			(
				(CVel.X * sin(CAng)) - (CVel.Y * cos(CAng)), //right/left movement relative to angle
				((CVel.Y * sin(CAng)) + (CVel.X * cos(CAng))) + CVel.Z //forward/backward movement relative to angle, plus Z velocity
				//had to pull out the graphing calculator to get this one right
			);
			
			if (NewMove != invoker.OldMove) 
			{
				Vector2 moveoffset = 
				(
					//velocity affects horizontal offset more than vertical offset
					(NewMove.X - invoker.OldMove.X) * 1.5,
					(NewMove.Y - invoker.OldMove.Y) * 0.67
				);
				
				A_WeaponOffset(moveoffset.x, moveoffset.y, WOF_ADD);
				invoker.OldMove = NewMove;
			}
		}
		invoker.switchtime = false;
	}
	
	action void ResetAutoOffset()
	{
		invoker.switchtime = true;
		invoker.OldMove = (0, 0);
		A_WeaponOffset(0, 64);
	}

	States
	{
		Spawn:
			PLAY A -1;
			Loop;
		See:
			#### AB 8;
			Loop;
		Missile:
			#### # 1;
			#### # 11;
			#### # 0 A_Jump(256, "Spawn");
			Stop;
			//Goto Spawn;
		Melee:
			#### # 1 BRIGHT {A_DIScale(0.05, -0.05);} //A_AttachLightDef("shoot", "BULLETSHOOT");}
			#### # 3 BRIGHT;
			#### # 2; //A_RemoveLight("shoot");
			#### # 0 A_DIScale(-0.05, 0.05);
			#### # 0 A_Jump(256, "Missile");
			Stop;
			//Goto Missile;
		Pain:
			#### # 8 A_DIPlayerPain();
			#### # 0 A_Jump(256, "Spawn");
			Stop;
			//Goto Spawn;
		Pain.Lightning:
			#### # 0
			{
				A_DIShocked();
				A_DIShocked();
				A_DIShocked();
				invoker.Vel = (0, 0, 0);
			}
			#### # 0 A_Jump(256, "Pain");
			Stop;
			//Goto Pain;
		Death:
			#### # 0 {self.Alpha *= 0.5;}
			#### ### 0 
			{
				A_PlayerScream();
				A_NoBlocking();
				A_RemoveLight("shoot");
				double diX = frandom(-self.Radius, self.Radius);
				double diY = frandom(-self.Radius, self.Radius);
				double diZ = frandom(self.Height / 2, self.Height);
				A_SpawnItemEX(self.BloodType, diX, diY, diZ, 0, 0, random(6, 10), 0, SXF_USEBLOODCOLOR | SXF_NOCHECKPOSITION, 96);
			}
			#### ################################# 1 
			{
				diefade = true;
				A_DIScale(1.01, 0.95, true);
				A_FadeOut(0.03);
			}
			#### # -1;
			Stop;
	}
}

Class DI_PlayerTeleSwap : DI_Actor
{
	Default 
	{
		+INVISIBLE; 
		+NOINTERACTION;
		//$Category "DI/Unused"
		//$Color 5
		//$Title "Player Position Swap (WIP)"
		//$Sprite "LOOKB0"
	}
	
	States
	{
		Spawn:
			PLAY A -1;
			Stop;
	}
}

Class DI_Token : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
		+Inventory.UNDROPPABLE;
		+Inventory.PERSISTENTPOWER;
		+Inventory.UNTOSSABLE;
		+INVENTORY.ALWAYSPICKUP;
	}
}

Class DI_TokenCombo : DI_Token //the player's current combo multiplier.
{
	Default
	{
		Inventory.MaxAmount 100;
	}
}

Class DI_TokenComboTimer : DI_Token //the player's current combo timer.
{
	Default
	{
		Inventory.MaxAmount 84000;
	}
}

Class DI_TokenComboFreeze : DI_Token {}