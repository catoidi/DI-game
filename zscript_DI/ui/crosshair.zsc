//zscript_DI/handlers/crosshair.zsc

//keeping UI related eventhandler stuff in it's own separate class for no reason other than it looks nicer to me.

class DIXHairHandler : EventHandler
{
	TextureID xhair_dottex, xhair_tex, xhair_freshtex; //crosshair textures.
	transient ui cvar xhair_toggle;
	transient ui cvar photomode;
	transient ui cvar xhair_scale;
	transient ui cvar xhair_alpha;
	transient ui cvar xhair_color;
	transient ui cvar xhair_precise;
	transient ui cvar xhair_precise_toggle;
	transient ui cvar dot_toggle;
	transient ui cvar fresh_toggle;
	transient ui cvar fresh_scale;
	transient ui cvar fresh_alpha;
	transient ui double xspread, curspread;
	transient ui double xhair_startalpha;
	transient ui string diwep_name;
	transient double wep_acc; //base weapon accuracy.
	transient double wep_rec; //current weapon recoil.
	transient DI_Weapon diwep; //the player's current weapon.
	transient DI_PlayerBase diplayer; //the current console player.
	transient ui bool showwheel; //is the weapon wheel active on this tic?
	
	override void WorldLoaded(WorldEvent e)
	{
		xhair_dottex = TexMan.CheckForTexture("graphics/dixhair_dot.png");
		xhair_tex = TexMan.CheckForTexture("dixhair");
		xhair_freshtex = TexMan.CheckForTexture("graphics/dixhair_fresh.png");
	}

	override void WorldTick()
	{
		GetWeaponAccuracy();
		Super.WorldTick();
	}
	
	override void UITick()
	{
		if (diwep && diplayer)
		{
			if (diplayer.Health > 0)
			{ 
				if (xhair_startalpha < 1.0) {xhair_startalpha += 0.1;}
			}
			else if (xhair_startalpha > 0) {xhair_startalpha -= 0.02;}
			if (diwep_name != diwep.GetClassName()) {xhair_startalpha = 0.0;}
			diwep_name = diwep.GetClassName();
			
			if (curspread ~== xspread) {xspread = curspread;}
			else if (curspread > xspread) {xspread += (curspread - xspread) / 3.0;}
			else if (curspread < xspread) {xspread -= (xspread - curspread) / 3.0;}
		}
		Super.UITick();
	}
	
	override void InterfaceProcess(ConsoleEvent e)
	{
		if (e.Name == "di_showwheel") {showwheel = true;}
	}
	
	void GetWeaponAccuracy()
	{
		if (players[consoleplayer].ReadyWeapon is "DI_Weapon")
		{
			diwep = DI_Weapon(players[consoleplayer].ReadyWeapon);
			diplayer = DI_PlayerBase(players[consoleplayer].mo);
			
			wep_acc = diwep.wpn_accuracy; //weapon's base accuracy.
			wep_rec = diwep.current_recoil; //calculation of weapon's current recoil.
		}
		else {diwep = null;}
	}
	
	override void RenderUnderlay(RenderEvent e)
	{
		xhair_toggle = CVar.GetCVar("di_xhair_toggle", players[consoleplayer]);
		photomode = cvar.getcvar("di_photomode", players[consoleplayer]);
		xhair_scale = CVar.GetCVar("di_xhair_scale", players[consoleplayer]);
		xhair_alpha = CVar.GetCVar("di_xhair_alpha", players[consoleplayer]);
		xhair_color = CVar.GetCVar("di_xhair_color", players[consoleplayer]);
		xhair_precise = CVar.GetCVar("pc_y", players[consoleplayer]);
		xhair_precise_toggle = CVar.GetCVar("di_xhair_precise", players[consoleplayer]);
		fresh_toggle = CVar.GetCVar("di_xhair_fresh_toggle", players[consoleplayer]);
		fresh_scale = CVar.GetCVar("di_xhair_fresh_scale", players[consoleplayer]);
		fresh_alpha = CVar.GetCVar("di_xhair_fresh_alpha", players[consoleplayer]);
		dot_toggle = CVar.GetCVar("di_xhair_dot", players[consoleplayer]);
	
		if ((diwep) && (diplayer) && (xhair_toggle.GetInt() > 0) && (photomode.GetBool() == false))
		{
			double cenx = screen.GetWidth() / 2;
			double ceny = screen.GetHeight() / 2;
			if (xhair_precise_toggle.GetBool() == true) {ceny = xhair_precise.GetFloat();} //mod compatibility with Precise Crosshair.
			
			//get variables
			double pfov = diplayer.player.fov;
			double xscale = xhair_scale.GetFloat();
			double fracspread = xspread;
			double accnum = wep_acc;
			if (xhair_toggle.GetInt() == 2) {accnum += wep_rec;} //if dynamic crosshair, get weapon recoil too
			//get next frame's spread
			curspread = (3.0 * xscale) + (accnum * ((screen.GetWidth() / screen.GetAspectRatio()) / pfov));
			//calculate the "between tic" spread
			if (fracspread > curspread) {fracspread += ((curspread - xspread) / 3.0) * e.FracTic;}
			else if (curspread < fracspread) {fracspread -= ((xspread - curspread) / 3.0) * e.FracTic;}
			double xalpha = ((1.0 - (wep_rec / ((pfov / 2) - wep_acc))) * xhair_alpha.GetFloat()) * xhair_startalpha; //calculate xhair alpha
			if (showwheel) {xalpha *= 0.25;} //hide xhair when weapon wheel is open
			let xcolor = Translation.GetID("DamWhite");
			if (diplayer.CanFreshKill()) {xcolor = Translation.GetID("IsFresh");} //change xhair color to blue when fresh is ready
			else if ((diplayer.LastKillTimer >= 1) && (diplayer.LastWeaponKill == diwep.GetClassName())) {xcolor = Translation.GetID("DamDarkGrey");}
			else if (diplayer.LastKillTimer < 1) {xcolor = Translation.GetID("NotFresh");} //fresh is ready but the weapon is wrong
			
			if (dot_toggle.GetBool() == true)
			{
				Screen.DrawTexture(xhair_dottex, false, cenx, ceny, DTA_KeepRatio, true, DTA_Alpha, xalpha, DTA_ScaleX, xscale, DTA_ScaleY, xscale, DTA_CenterOffset, true, DTA_TranslationIndex, xcolor);
			}
			
			Screen.DrawTexture(xhair_tex, false, cenx + fracspread, ceny, DTA_KeepRatio, true, DTA_Alpha, xalpha, DTA_ScaleX, xscale, DTA_ScaleY, xscale, DTA_CenterOffset, true, DTA_TranslationIndex, xcolor); //right
			Screen.DrawTexture(xhair_tex, false, cenx - fracspread, ceny, DTA_KeepRatio, true, DTA_Alpha, xalpha, DTA_ScaleX, xscale, DTA_ScaleY, xscale, DTA_CenterOffset, true, DTA_TranslationIndex, xcolor); //left
			Screen.DrawTexture(xhair_tex, false, cenx, ceny + fracspread, DTA_KeepRatio, true, DTA_Alpha, xalpha, DTA_ScaleX, xscale, DTA_ScaleY, xscale, DTA_CenterOffset, true, DTA_TranslationIndex, xcolor, DTA_Rotate, 90.0); //down
			Screen.DrawTexture(xhair_tex, false, cenx, ceny - fracspread, DTA_KeepRatio, true, DTA_Alpha, xalpha, DTA_ScaleX, xscale, DTA_ScaleY, xscale, DTA_CenterOffset, true, DTA_TranslationIndex, xcolor, DTA_Rotate, 90.0); //up
			
			if ((diplayer.LastKillTimer > 0) && (fresh_toggle.GetBool() == true))
			{
				Screen.DrawTexture(xhair_freshtex, false, cenx, ceny + fracspread + (12 * xscale), DTA_KeepRatio, true, DTA_Alpha, xalpha * fresh_alpha.GetFloat(), DTA_ScaleX, xscale * ((sqrt(diplayer.LastKillTimer / 2.0) * 0.25) * fresh_scale.GetFloat()), DTA_ScaleY, xscale, DTA_CenterOffset, true);
			}
		}
		
		showwheel = false;
	}
}