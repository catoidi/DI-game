//zscript_DI/ui/unlock/handler.zsc

class DI_UnlockMenuHandler : boxparty_ZF_Handler
{
	DI_UnlockMenu link;
	
	override void buttonClickCommand (boxparty_ZF_Button caller, Name command)
    {
		link.MenuSound("menu/activate");
	
		cvar cheatmode = cvar.FindCVAR('di_unlock_cheat');
		cvar blacklist = cvar.FindCVAR('di_unlock_blacklist');
		string commandstring = command;
		
		if (command == 'sorrynothing')
		{
			link.UpdateInfoLabel("There is nothing there...");
		}
		else if (command == 'ResetBlacklist')
		{
			link.UpdateInfoLabel("\caUnlock blacklist has been reset.");
			blacklist.SetString("");
			link.blacklistdata.Clear();
			link.UpdateUnlocks();
		}
		else if (command == 'ToggleDefaults')
		{
			int prevtab = link.tabnum;
		
			string dotexture, labelmsg;
			if (!link.defaultcvar.GetBool()) 
			{
				link.defaultcvar.SetBool(true);
				link.showdefaults = true;
				dotexture = "graphics/hat/DIDEFAULTA.png";
				labelmsg = "\cnDefault Items are now shown.";
				if (prevtab > 0) {labelmsg.AppendFormat("%s", "\n\n\cbNow displaying: \ccall items.");}
			}
			else
			{
				link.defaultcvar.SetBool(false);
				link.showdefaults = false;
				dotexture = "graphics/hat/DIDEFAULTB.png";
				labelmsg = "\cnDefault Items are now hidden.";
				if (prevtab > 0) {labelmsg.AppendFormat("%s", "\n\n\cbNow displaying: \ccall items.");}
			}
			let newtex = boxparty_ZF_BoxTextures.CreateTexturePixels(dotexture, (0, 0), (44, 44), true, true);
			link.defaultimage.setBoxTex(newtex);
			link.UpdateInfoLabel(labelmsg);
			
			link.pagenum = 0;
			link.GenerateUnlocks(link.tabnum);
			link.UpdatePageLabel();
			link.UpdateUnlocks();
			link.UpdateUnlockLabel();
		}
		else if (command == 'GoRight')
		{
			link.ChangePage(true);
		}
		else if (command == 'GoLeft')
		{
			link.ChangePage(false);
		}
		else if (commandstring.Left(9) == 'UNLOCKED:')
		{
			commandstring = commandstring.Mid(9);
			let itemname = string.format("$SHOPITEM_%s", commandstring);
			itemname = stringtable.localize(itemname);
			let labelcommand = string.format("'%s' has been \cdenabled.", itemname);
			if (link.UpdateBlacklistCVAR(commandstring) == true)
			{
				labelcommand = string.format("'%s' has been \cadisabled.", itemname);
			}
			link.UpdateUnlocks();
			link.UpdateInfoLabel(labelcommand);
		}
		else if (commandstring.Left(7) == 'LOCKED:')
		{
			commandstring = commandstring.Mid(7);
			let lockmsg = string.format("$SHOPLOCK_%s", commandstring);
			lockmsg = stringtable.localize(lockmsg);
			let itemname = string.format("$SHOPITEM_%s", commandstring);
			itemname = stringtable.localize(itemname);
			let labelcommand = string.format("\ca%s is locked.\n\n\cc%s", itemname, lockmsg);
			string progressname = link.FindCVARProgress(commandstring);
			if (progressname != "")
			{
				//console.printf("%s", "yea");
				
				cvar progresscvar = cvar.findcvar(progressname);
				if (progressname != "di_playerkills") {labelcommand.appendformat(" \cn(Progress: %d)", progresscvar.getint());}
				else
				{
					array<string> currentkills, filedata, cvarunlocks;
		
					int ThisLump = Wads.FindLump("DIKILL", 0, Wads.ANYNAMESPACE);
					int NextLump = Wads.FindLump("DIKILL", ThisLump + 1, Wads.ANYNAMESPACE);
					
					while (ThisLump != -1)
					{
						Wads.ReadLump(ThisLump).Split(filedata, "\n", TOK_SKIPEMPTY);
						ThisLump = NextLump;
						NextLump = Wads.FindLump("DIKILL", ThisLump + 1, 1);
					}
					
					for (int i = 0; i < filedata.Size(); i++)
					{
						//console.printf("reading: '%s'", filedata[i]);
						if (filedata[i].Left(2) == ">>") {continue;} //dont bother reading the next lines of code if it's a comment (starts with ">>")
						if (filedata[i].Length() < 3) {continue;}
						filedata[i] = filedata[i].Left(filedata[i].IndexOf(";"));
						
						Array<String> currentline;
						filedata[i].Split(currentline, " ");
						if (currentline.Size() != 3) {continue;} //this is not a valid kill cvar.
						let currentcvar = cvar.getcvar(currentline[2]);
						if (!currentcvar) {continue;} //dont bother adding invalid cvars.
						//else if (currentcvar.GetBool()) {continue;} //dont bother adding CVARs that are already unlocked.
						
						//console.printf("adding: '%s' to cvarunlocks", filedata[i]); 
						//Weapon Name
						cvarunlocks.Push(currentline[0]);
						//Number of Kills
						cvarunlocks.Push(currentline[1]);
						//Item Unlock CVAR
						cvarunlocks.Push(currentline[2]);
					}
					
					string masteryitem = "";
					string masteryweapon = "";
					
					for (int i = 0; i < link.unlocklist.Size(); i++)
					{
						if (masteryitem != "") {continue;}
						array<string> curline;
						link.unlocklist[i].Split(curline, " ");
						if (curline[1] ~== commandstring)
						{
							masteryitem = curline[0];
						}
					}
					
					if (masteryitem == "") {console.printf("failed to find %s in link.unlocklist", commandstring);}
					string cvarstring = progresscvar.GetString();
					cvarstring.Split(currentkills, ",");
					int pos = cvarunlocks.Find(masteryitem);
					int pos2 = currentkills.Size();
					
					for (int i = 0; i < cvarunlocks.Size(); ++i)
					{
						//console.printf(cvarunlocks[i]);
					}
					if (pos != cvarunlocks.Size())
					{
						masteryweapon = cvarunlocks[pos - 2];
						pos2 = currentkills.Find(masteryweapon);
						//console.printf("%s", masteryweapon);  
					}
					else {console.printf("failed to find %s in cvarunlocks", masteryitem);}
					
					if (pos2 != currentkills.Size())
					{
						labelcommand.appendformat(" \cn(Progress: %d)", currentkills[pos2 + 1].ToInt(10));
					}
					else 
					{
						labelcommand.appendformat(" \cn(Progress: %d)", 0);
					}
				}
			}
			link.UpdateInfoLabel(labelcommand);
		}
		else if (commandstring.Left(8) == 'DEFAULT:')
		{
			commandstring = commandstring.Mid(8);
			let itemname = string.format("$SHOPITEM_%s", commandstring);
			itemname = stringtable.localize(itemname);
			let labelcommand = string.format("\ca%s is a default item and cannot be blacklisted.", itemname);
			link.UpdateInfoLabel(labelcommand);
		}
		else if (commandstring.Left(9) == 'SwitchTab')
		{
			link.pagenum = 0;
			int tabnum = commandstring.Mid(9).ToInt(10);
			string labelmsg;
			switch(tabnum)
			{
				case 1: labelmsg = "\cbNow displaying: \cgonly weapons."; break;
				case 2: labelmsg = "\cbNow displaying: \cdonly passives."; break;
				case 3: labelmsg = "\cbNow displaying: \cvonly consumables."; break;
			}
			if (tabnum == link.tabnum) {labelmsg = "\cbNow displaying: \ccall items.";}
			link.GenerateUnlocks(tabnum);
			link.UpdateUnlocks();
			link.UpdateInfoLabel(labelmsg);
			link.UpdatePageLabel();
			link.UpdateUnlockLabel();
		}
	}
}