//zscript_DI/handlers/itemhud.zsc

class DIItemHUDHandler : EventHandler
{
	Array<String> filedata; //all the lines from DISHOP.

	transient ui cvar itemscale, scalefactor, itemhudtoggle, itemalpha, photomode;
	ui font countfont;
	ui DI_PlayerBase diplr;
	ui Array<String> itemnames;
	ui Array<String> itemsprites;
	ui Array<String> validitems;
	ui Array<String> validsprites;
	ui Array<Int> validcount;
	ui Array<Int> validperm;
	ui Array<Bool> ispowerup;
	ui bool heartfade;
	ui int heartfade_int;
	
	override void WorldLoaded(WorldEvent e)
	{	
		EventHandler.SendInterfaceEvent(consoleplayer, "diitemhudfont");
	
		int ThisLump = Wads.FindLump("DISHOP", 0, Wads.ANYNAMESPACE);
		int NextLump = Wads.FindLump("DISHOP", ThisLump + 1, Wads.ANYNAMESPACE);
		
		while (ThisLump != -1)
		{
			Wads.ReadLump(ThisLump).Split(filedata, "\n", TOK_SKIPEMPTY);
			ThisLump = NextLump;
			NextLump = Wads.FindLump("DISHOP", ThisLump + 1, 1);
		}
		
		for (int i = 0; i < filedata.Size(); i++)
		{
			if (filedata[i].Left(2) == ">>") {continue;} //dont bother reading the next lines of code if it's a comment (starts with ">>")
			if (filedata[i].Length() < 3) {continue;}
			filedata[i] = filedata[i].Left(filedata[i].IndexOf(";"));
			
			Array<String> currentline;
			filedata[i].Split(currentline, " ");
			if (currentline.Size() < 4) {continue;} //this is not an item. skipped.
			let inttxt = String.Format("diitemhud %s %s", currentline[1], currentline[2]);
			EventHandler.SendInterfaceEvent(consoleplayer, inttxt); //send the item name and sprite to the ui scope, for use with HUD elements.
		}
	}
	
	override void InterfaceProcess(ConsoleEvent e)
	{
		if (e.Name.Left(10) == "diitemhud ")
		{
			Array<String> currentline;
			e.Name.Split(currentline, " ");
			if (itemnames.Find(currentline[1]) == itemnames.Size()) //not a duplicate, add to the list of shop items.
			{
				itemnames.Push(currentline[1]); //create a list of all valid shop item names and sprites.
				itemsprites.Push(currentline[2]);
			}
		}
		else if (e.Name == "diitemhudfont")
		{
			countfont = font.getfont('smallfont');
		}
	}
	
	override void UITick()
	{
		diplr = DI_PlayerBase(players[consoleplayer].mo);
		if (!diplr) {return;} //no player = no inventory!
		itemhudtoggle = cvar.GetCVAR("di_itemhud_toggle", players[consoleplayer]);
		itemscale = cvar.GetCVAR("di_itemhud_scale", players[consoleplayer]);
		scalefactor = cvar.getcvar("hud_scalefactor", players[consoleplayer]);
		itemalpha = cvar.GetCVAR("di_itemhud_alpha", players[consoleplayer]);
		photomode = cvar.getcvar("di_photomode", players[consoleplayer]);
		if (!itemhudtoggle) {return;}
		if (!itemscale) {return;}
		if (!photomode) {return;}
		validitems.Clear();
		validsprites.Clear();
		validcount.Clear();
		validperm.Clear();
		ispowerup.Clear();
		if (itemhudtoggle.GetInt() < 1) {return;}
		for (int i = 0; i < itemnames.Size(); i++)
		{
			inventory curitem = diplr.FindInventory(itemnames[i], false); //search player's inventory.
			if (curitem is "DIPassiveInventory") //Only look for Passive items. No weapons, no consumables, etc.)
			{
				DIPassiveInventory hiddencheck = DIPassiveInventory(curitem);
				if ((hiddencheck.dipassive_hidden == false) && (hiddencheck.dipassive_nobar == false))
				{
					validitems.Push(itemnames[i]);
					validsprites.Push(itemsprites[i]);
					validcount.Push(diplr.CountInv(itemnames[i]));
					bool hasperma = false;
					for (int j = 0; j < diplr.wavekeep.Size(); ++j) //horrible. no good.
					{
						if (hasperma == true) {continue;}
						if (itemnames[i].MakeLower() == diplr.wavekeep[j].Left(itemnames[i].Length()).MakeLower()) {hasperma = true;}
					}
					if (hasperma == true) {validperm.Push(1);}
					else {validperm.Push(0);}
					if (curitem is "DIPowerup") {ispowerup.Push(true);}
					else {ispowerup.Push(false);}
				}
			}
		}
		
		if (heartfade == true)
		{
			++heartfade_int;
			if (heartfade_int >= 35) {heartfade = false;}
		}
		else
		{
			--heartfade_int;
			if (heartfade_int <= 0) {heartfade = true;}
		}
	}
	
	override void RenderOverlay(RenderEvent e)
	{
		//keep track of previous passives/powerups for sorting
		int passivecount;
		int powerupcount;
		
		for (int i = 0; i < validitems.Size(); i++) //iterate through all recorded items
		{
			//sanity checks
			if (photomode.GetBool() == true) {return;}
			if (!itemscale) {return;}
			
			//initial powerup checks
			bool dopowerup = ispowerup[i];
			if (itemhudtoggle.getint() == 2) //only powerups mode
			{
				if (dopowerup) {dopowerup = false;} //not drawing passives, so don't do powerup offsets
				else {continue;} //skip non-powerup items
			}
			
			//get item hud scale/alpha cvars
			let scalenum = itemscale.GetFloat() * scalefactor.GetFloat();
			let alphanum = itemalpha.GetFloat();
			
			//find the sprite graphic for listed item
			let realsprite = TexMan.CheckForTexture(String.Format("%s0", validsprites[i])); //gross hack
			if (realsprite) //dont run code if item sprite not found
			{
				//calculate sizing for single item.
				let limitX = Screen.GetWidth() / 3;
				let singleX = (24 * CleanXFac * scalenum);
				int Xmax = limitX / singleX;
				//find item's position in itemhud grid.
				int xnum = passivecount;
				int itemrows = xnum / Xmax; //max number items per row is determined by how many sprites can fit in 1/3 of the screen. there is no limit to the amount of rows, for now.
				float powerspace;
				if (dopowerup) //separate powerups from passives
				{
					powerspace = 0.4; //add some whitespace for better clarity
					xnum = powerupcount;
					itemrows += 1 + (xnum / Xmax);
					++powerupcount;
				}
				else {++passivecount;}
				//calculate x/y coordinates
				let startx = Screen.GetWidth() - (singleX * ((xnum % Xmax) + 0.5));
				let starty = (25 * (1 + itemrows + powerspace)) * CleanYFac * scalenum;
				//draw item sprite
				Screen.DrawTexture(realsprite, false, startx, starty,
					DTA_ScaleX, scalenum * CleanXFac,
					DTA_ScaleY, scalenum * CleanYFac,
					DTA_Alpha, alphanum * 0.8,
					DTA_KeepRatio, true
				);
				//permanent item check
				if (validperm[i] == 1)
				{
					Screen.DrawTexture(TexMan.CheckForTexture("PUFFH0"), false,
						startx - (8 * CleanXFac * scalenum), 
						starty - (20 * CleanYFac * scalenum),
						DTA_ScaleX, scalenum * CleanXFac,
						DTA_ScaleY, scalenum * CleanYFac,
						DTA_Alpha, alphanum * (heartfade_int / 35.0),
						DTA_KeepRatio, true
					);
				}
				//item counter
				if (validcount[i] > 1)
				{
					int itemcount = validcount[i];
					if (itemcount > 9999) {itemcount = 9999;}
					string countstring = string.format("%d", validcount[i]);
					startx += 12 * CleanXFac * scalenum;
					starty -= 2 * CleanYFac * scalenum;
					startx -= countfont.StringWidth(countstring, false) * CleanXFac * scalenum; //make sure to take font size into account when calculating offset
					Screen.DrawText(countfont, Font.CR_GOLD, startx, starty, countstring,
						DTA_ScaleX, scalenum * CleanXFac,
						DTA_ScaleY, scalenum * CleanYFac,
						DTA_Alpha, alphanum,
						DTA_KeepRatio, true
					);
				}
			}
		}
	}
}