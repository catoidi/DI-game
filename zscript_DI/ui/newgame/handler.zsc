//zscript_DI/ui/newgame/handler.zsc"

Class DINewGameHandler : boxparty_ZF_Handler
{
	DINewGameMenu link;
	
	cvar tutorialcheck;
	
	cvar curlvl_cvar, curplr_cvar, curskl_cvar;
	
	int currentclass, currentlvl, currentskill;
	
	bool stayonpage; //prevents handler from advancing to the next page.
	
	enum dimenu_key
	{
		dimenu_key_up,
		dimenu_key_down,
		dimenu_key_left,
		dimenu_key_right,
		dimenu_key_pgup,
		dimenu_key_pgdown,
		dimenu_key_enter,
		dimenu_key_back
	}
	
	override void buttonClickCommand (boxparty_ZF_Button caller, Name command)
    {
		link.MenuSound("menu/activate");
		
		curlvl_cvar = cvar.findcvar("di_menu_current_lvl");
		curplr_cvar = cvar.findcvar("di_menu_current_plr");
		curskl_cvar = cvar.findcvar("di_menu_current_skl");
	
		string cmd = command;
		cmd = cmd.MakeLower();
		if (cmd == "dotutorial")
		{
			if (stayonpage == false)
			{
				tutorialcheck = link.tutcvar;
				tutorialcheck.SetBool(true);
				Menu.SetMenu("EpisodeMenu", 0);    	// Class Selection Response
				Menu.SetMenu("SkillMenu", 0);    	// Episode Selection Response
				Menu.SetMenu("StartGame", 0);     	// Skill Selection Response (Starts Game), Use StartgameConfirm for Nightmare skills
			}
		}
		else if (cmd == "skiptutorial")
		{
			if (stayonpage == false)
			{
				tutorialcheck = link.tutcvar;
				tutorialcheck.SetBool(true);
				link.pagenum = 0;
				link.UpdatePage();
			}
		}
        else if (cmd.Left(12) == "lockedplayer")
		{
			let plrstr = cmd.Mid(12);
			let plrnum = plrstr.ToInt(10);
			string plrclass = link.playerpool[plrnum];
			string plrlocked = Stringtable.Localize(String.Format("$dimenu_locked_%s", plrclass));
			link.UpdateTopLabel(String.Format("%s", "\cgthis character is locked."), plrlocked);
			currentclass = -1;
			link.SetKeyPos(plrnum);
			//link.UpdateKeySelect();
		}
		else if (cmd.Left(6) == "player")
		{
			let plrstr = cmd.Mid(6);
			let plrnum = plrstr.ToInt(10);
			string plrclass = string.format("$dimenu_select_%s", link.playerpool[plrnum]);
			plrclass = stringtable.localize(plrclass);
			link.playername = link.playerpool[plrnum];
			string infopic = String.Format("%s%s.png", "graphics/info_", plrclass);
			//console.printf("%s", infopic);
			string scoreline = string.format("\cbTotal Score: %d\nTotal Deaths: %d", link.GetHighScore(link.playerpool[plrnum]), link.GetHighScore(link.playerpool[plrnum], cvarstring: "di_playerdeaths"));
			link.plrinfo.SetImage(infopic);
			link.UpdateTopLabel(String.Format("\cnselected: %s", plrclass), scoreline); 
			if (currentclass == plrnum) {link.pagenum = 1;}
			currentclass = plrnum;
			curplr_cvar.setint(plrnum);
			link.SetKeyPos(plrnum);
			//link.UpdateKeySelect();
		}
		else if (cmd.Left(11) == "lockedlevel")
		{
			let lvlstr = cmd.Mid(11);
			let lvlnum = lvlstr.ToInt(10);
			string lvlclass = link.levelpool[lvlnum];
			string lvllocked = Stringtable.Localize(String.Format("$dimenu_locked_level_%s", lvlclass));
			link.UpdateTopLabel(String.Format("%s", "\cgthis level is locked."), lvllocked);
			currentlvl = -1;
			link.SetKeyPos(lvlnum);
			//link.UpdateKeySelect();
		}
		else if (cmd.Left(5) == "level")
		{
			let lvlstr = cmd.Mid(5);
			let lvlnum = lvlstr.ToInt(10);
			string lvlclass = link.lvllabels[lvlnum].GetText();
			link.levelname = link.levelpool[lvlnum];
			link.UpdateTopLabel(String.Format("\cnselected: %s", lvlclass), string.format("\cbBest Player Score: %d\nTotal Deaths: %d", link.GetHighScore(link.playername, link.levelpool[lvlnum]), link.GetHighScore(link.playername, link.levelpool[lvlnum], cvarstring: "di_playerdeaths"))); 
			//console.printf("%s", lvlclass);
			curlvl_cvar.setint(lvlnum);
			if (currentlvl == lvlnum) {link.pagenum = 2;}
			else {link.SetKeyPos(lvlnum);}
			currentlvl = lvlnum;
			//link.UpdateKeySelect();
		}
		else if (cmd.Left(11) == "lockedskill")
		{
		
		}
		else if (cmd.Left(5) == "skill")
		{
			let sklstr = cmd.Mid(5);
			let sklnum = sklstr.ToInt(10);
			string sklclass = link.skllabels[sklnum].GetText();
			link.UpdateTopLabel(String.Format("\cnselected Difficulty: %s", sklclass)); 
			//console.printf("%s", lvlclass);
			curskl_cvar.setint(sklnum);
			if (currentskill == sklnum) 
			{
				if (currentskill == 1) {currentskill = 2;}
				CheatModCheck();
				PlayDI(currentclass, currentlvl, currentskill);
			} //{link.pagenum = 2;}
			else {link.SetKeyPos(sklnum);}
			currentskill = sklnum;
			//link.UpdateKeySelect();
		}
		else if ((cmd.Left(3) == "mod") || (cmd.Left(8) == "cheatmod"))
		{
			bool ischeatmod = (cmd.Left(8) == "cheatmod");
			let modstr = ischeatmod ? cmd.Mid(8) : cmd.Mid(3);
			let modnum = modstr.ToInt(10);
			string modclass = stringtable.localize(link.modpool[modnum], false);
			//link.levelname = link.levelpool[lvlnum];
			link.UpdateTopLabel(String.Format("\cnselected Modifier: %s", modclass)); 
			//console.printf("%s", lvlclass);
			//curlvl_cvar.setint(lvlnum);
			if (currentskill == modnum + 2) 
			{
				cvar curmod = cvar.findcvar(link.modpool[modnum]);
				if (curmod.GetBool()) 
				{
					curmod.SetBool(false);
					--link.modsactive;
					if (ischeatmod) {--link.cheatmodsactive;}
				}
				else 
				{
					curmod.SetBool(true);
					++link.modsactive;
					if (ischeatmod) {++link.cheatmodsactive;}
				}
				
				string labeltxt = stringtable.localize(link.modpool[modnum], false);
				if (!curmod.GetBool()) {labeltxt.AppendFormat("%s", ": \cd[ON]");}
				else {labeltxt.AppendFormat("%s", ": \ca[OFF]");}
				link.skllabels[modnum + 2].SetText(labeltxt);
			}
			string newmodtex = string.format("graphics/unlocks/%s.png", link.modlock[modnum]);
			link.modselect.SetBoxTex(boxparty_ZF_BoxTextures.CreateTexturePixels(newmodtex, (0, 0), (64, 64), true, true));
			string newmodlabel = stringtable.localize(string.format("$DIMODDESC_%s", link.modpool[modnum]));
			newmodlabel.AppendFormat("\n\cf%d mod(s) active.", link.modsactive);
			link.modlabel.SetText(newmodlabel);
			link.SetKeyPos(modnum + 2);
			currentskill = modnum + 2;
			//link.UpdateKeySelect();
		}
		else if (cmd.Left(9) == "lockedmod")
		{
			let modstr = cmd.Mid(9);
			let modnum = modstr.ToInt(10);
			string modlocked = Stringtable.Localize(link.modlock[modnum], false);
			link.UpdateTopLabel(String.Format("%s", "\cgthis modifier is locked."), modlocked);
			currentskill = -1;
			link.SetKeyPos(modnum + 2);
			//link.UpdateKeySelect();
		}
		else {console.printf("%s'%s'", "epic line failure: ", cmd);}
    }
	
	virtual void doKeyPress(int keytype)
	{
		link.MenuSound("menu/choose");
		if (link.keyboardselect) {link.keyboardselect.SetAlpha(1.0);}
		
		curlvl_cvar = cvar.findcvar("di_menu_current_lvl");
		curplr_cvar = cvar.findcvar("di_menu_current_plr");
		curskl_cvar = cvar.findcvar("di_menu_current_skl");
		
		switch(link.pagenum)
		{
			case -1: //tutorial menu
				if (link.keypos == -1) {link.keypos = 0;}
				switch(keytype)
				{
					case dimenu_key_up:
						--link.keypos;
						if (link.keypos < 0) {link.keypos = 1;}
						stayonpage = true;
						buttonClickCommand(link.tutbuttons[link.keypos], link.tutbuttons[link.keypos].getcommand());
						//link.UpdateKeySelect();
						stayonpage = false;
						break;
					case dimenu_key_down:
						++link.keypos;
						if (link.keypos > 1) {link.keypos = 0;}
						stayonpage = true;
						buttonClickCommand(link.tutbuttons[link.keypos], link.tutbuttons[link.keypos].getcommand());
						//link.UpdateKeySelect();
						stayonpage = false;
						break;
					case dimenu_key_enter:
						buttonClickCommand(link.tutbuttons[link.keypos], link.tutbuttons[link.keypos].getcommand());
						break;
				}
				break;
			case 0: //player select menu
				if (link.keypos == -1) {link.keypos = curplr_cvar.getint();}
				switch(keytype)
				{
					case dimenu_key_up:
						--link.keypos;
						if (link.keypos < 0) {link.keypos = link.plrbuttons.Size() - 1;}
						stayonpage = true;
						buttonClickCommand(link.plrbuttons[link.keypos], link.plrbuttons[link.keypos].getcommand());
						//link.UpdateKeySelect();
						stayonpage = false;
						break;
					case dimenu_key_down:
						++link.keypos;
						if (link.keypos > link.plrbuttons.Size() - 1) {link.keypos = 0;}
						stayonpage = true;
						buttonClickCommand(link.plrbuttons[link.keypos], link.plrbuttons[link.keypos].getcommand());
						//link.UpdateKeySelect();
						stayonpage = false;
						break;
					case dimenu_key_enter:
						buttonClickCommand(link.plrbuttons[link.keypos], link.plrbuttons[link.keypos].getcommand());
						break;
				}
				break;
			case 1: //level select menu
				if (link.keypos == -1) {link.keypos = curlvl_cvar.getint();}
				switch(keytype)
				{
					case dimenu_key_up:
						--link.keypos;
						if (link.keypos < 0) {link.keypos = link.lvlbuttons.Size() - 1;}
						stayonpage = true;
						buttonClickCommand(link.lvlbuttons[link.keypos], link.lvlbuttons[link.keypos].getcommand());
						//link.UpdateKeySelect();
						stayonpage = false;
						break;
					case dimenu_key_down:
						++link.keypos;
						if (link.keypos > link.lvlbuttons.Size() - 1) {link.keypos = 0;}
						stayonpage = true;
						buttonClickCommand(link.lvlbuttons[link.keypos], link.lvlbuttons[link.keypos].getcommand());
						//link.UpdateKeySelect();
						stayonpage = false;
						break;
					case dimenu_key_enter:
						buttonClickCommand(link.lvlbuttons[link.keypos], link.lvlbuttons[link.keypos].getcommand());
						break;
				}
				break;
			case 2: //skill select menu
				if (link.keypos == -1) {link.keypos = curskl_cvar.getint();}
				switch(keytype)
				{
					case dimenu_key_up:
						--link.keypos;
						if (link.keypos < 0) {link.keypos = link.sklbuttons.Size() - 1;}
						stayonpage = true;
						buttonClickCommand(link.sklbuttons[link.keypos], link.sklbuttons[link.keypos].getcommand());
						//link.UpdateKeySelect();
						stayonpage = false;
						break;
					case dimenu_key_down:
						++link.keypos;
						if (link.keypos > link.sklbuttons.Size() - 1) {link.keypos = 0;}
						stayonpage = true;
						buttonClickCommand(link.sklbuttons[link.keypos], link.sklbuttons[link.keypos].getcommand());
						//link.UpdateKeySelect();
						stayonpage = false;
						break;
					case dimenu_key_enter:
						buttonClickCommand(link.sklbuttons[link.keypos], link.sklbuttons[link.keypos].getcommand());
						break;
				}
				break;
		}
	}
	
	virtual void CheatModCheck()
	{
		let cheatcvar = cvar.findcvar("di_unlock_cheat");
		let forcelockcvar = cvar.findcvar("di_menu_forcelock");
		let progresscvar = cvar.findcvar("di_progression");
		
		if (link.cheatmodsactive > 0)
		{
			if (!forcelockcvar.getbool())
			{
				cheatcvar.setbool(true);
				forcelockcvar.setbool(true);
				progresscvar.setbool(false);
			}
		}
		else
		{
			if (forcelockcvar.getbool())
			{
				cheatcvar.setbool(false);
				forcelockcvar.setbool(false);
				progresscvar.setbool(true);
			}
		}
	}
	
	virtual void PlayDI(int cl = 0, int ep = 0, int sk = 0)
	{
		Menu.SetMenu("EpisodeMenu", cl);    	// Class Selection Response
		Menu.SetMenu("SkillMenu", ep);    	// Episode Selection Response
		Menu.SetMenu("StartGame", sk);     	// Skill Selection Response (Starts Game), Use StartgameConfirm for Nightmare skills
	}
}