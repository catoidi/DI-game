//zscript_DI/enemies/special/bigmelon.zsc

Class DI_BigMelon : DI_Boss
{
	Default
	{
		Health 1500;
		Speed 10;
		Radius 96;
		Height 120;
		Mass 20000;
		MinMissileChance 1;
		MissileChanceMult 0.0625;
		MeleeThreshold 0;
		MeleeRange 128;
		PainChance 64;
		RadiusDamageFactor 0.25;
		Tag "* SUPER TURBO FRUIT PUNCHER *";
		BloodType "DI_BigMelonBlood";
		DI_Monster.GibType "DI_BigMelonExplosion";
		DI_Monster.DIDrop "DI_Gem";
		+THRUSPECIES;
		+MTHRUSPECIES;
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if (other is "DI_Monster") {return false;}
		
		return Super.CanCollideWith(other, passive);
	}
	
	States
	{
		Spawn:
			BMEL A 10 A_Look;
			Loop;
		JustOneSec:
			#### # 0 A_ResetScale();
			BMEL A 0 A_DIScale(0.1, -0.1);
			BMEL AA 12;
			BMEL A 0 A_DIScale(-0.1, 0.1);
			Goto See;
		See:
			#### # 0 A_ResetScale();
			BMEL A 10 Slow;
			BMEL A 0 A_DIScale(0.05, -0.05);
			BMEL A 10 Slow A_FaceTarget;
			BMEL B 0 A_DIScale(-0.05, 0.05);
			#### # 0 A_StartSound("whiff2A", attenuation: ATTN_NONE);
			//BMEL B 0 A_SpawnItemEX("BoxSlamWallBIG", 0, 0, 56, -4, 0, 0, 0, SXF_NOCHECKPOSITION);
			BMEL B 0 A_Recoil(-20);
			BMEL B 0 ThrustThingZ(0, 10, 0, 1);
			BMEL BBBBBBBBBB 1 {A_FaceTarget(); A_CustomMeleeAttack(2);}
			BMEL A 0 A_ResetScale();
			//#### # 0 A_BoxExhaust(1);
			BMEL A 0 A_Chase;
			Loop;
		Missile:
			BMEL # 0 A_Jump(256, "BigSlamATK", "GloveATK");
			Goto GloveATK;
		GloveATK:
			#### # 0 {bNOPAIN = true;}
			#### # 0 A_StartSound("whiffA", attenuation: ATTN_NONE);
			BMEL D 12 Slow A_FaceTarget;
			BMEL E 0 A_DIScale(0.05, -0.05);
			#### # 0 A_StartSound("peppowA");
			BMEL E 12 Slow BRIGHT A_SpawnProjectile("BossMelonBullet", 64, 0, 0, CMF_OFFSETPITCH, 0);
			#### # 0 A_StartSound("whiffA", attenuation: ATTN_NONE);
			BMEL F 12 Slow A_FaceTarget;
			BMEL G 0 A_DIScale(0.05, -0.05);
			#### # 0 A_StartSound("peppowA");
			BMEL G 12 Slow BRIGHT A_SpawnProjectile("BossMelonBullet", 64, 0, 0, CMF_OFFSETPITCH, 0);
			//#### # 0 A_BoxExhaust(8);
			BMEL HH 6 Slow A_DIScale(-0.1, 0.1);
			#### # 0 {bNOPAIN = false;}
			Goto JustOneSec;
		BigSlamATK:
			#### # 0 {bNOPAIN = true;}
			BMEL AAAA 3 A_DIScale(0.05, -0.15);
			#### # 0 A_StartSound("pwooshA", attenuation: ATTN_NONE);
			BMEL I 0 A_ResetScale();
			BMEL I 0 {self.Vel.X = 0.0; self.Vel.Y = 0.0;}
			BMEL I 0 A_FaceTarget;
			BMEL I 4 ThrustThingZ(0, 52, 0, 1);
			//BMEL I 0 A_BoxParticle("d7 d7 d7", 12, 40, 80, 8.0, 10.0, true);
			//BMEL III 4 A_SpawnItemEX("BoxSlamBIG", 0, 0, 0, 0, 0, -4, 0, SXF_NOCHECKPOSITION);
			Goto BigSlamLoop;
		BigSlamLoop:
			BMEL I 1 
			{
				//if (self.Vel.Z > 0) {A_BoxParticle2("d7 d7 d7", 1, 40, 80, 32.0, 4.0, -self.Vel.Z, true);}
				A_CustomMeleeAttack(6);
				if ((self.Pos.Z ~== self.FloorZ) || (CheckBlock(zofs: -1) == true)) {return ResolveState('BigSlamDone');}
				else return ResolveState(null);
			}
			Loop;
		BigSlamDone:
			BMEL J 0 BRIGHT A_FaceTarget;
			BMEL J 0 BRIGHT
			{
				A_QuakeEX(2, 2, 2, 16, 1448, 1448, damage: 1);
				A_Explode(40, 256, XF_NOTMISSILE);
				A_SpawnItemEX("GIANTBOOM", -64, 0, random(12, 32), random(-2, 2), random(-2, 2), random(-2, 2), 0, SXF_NOCHECKPOSITION);
				//A_SpawnItemEX("HammerSlamPuff", -64, 0, random(12, 32), random(-2, 2), random(-2, 2), random(-2, 2), 0, SXF_NOCHECKPOSITION);
				//A_SpawnItemEX("HammerSlamPuff", -64, 0, random(12, 32), random(-2, 2), random(-2, 2), random(-2, 2), 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEX("GIANTBOOM", 64, 0, random(12, 32), random(-2, 2), random(-2, 2), random(-2, 2), 0, SXF_NOCHECKPOSITION);
				//A_SpawnItemEX("HammerSlamPuff", 64, 0, random(12, 32), random(-2, 2), random(-2, 2), random(-2, 2), 0, SXF_NOCHECKPOSITION);
				//A_SpawnItemEX("HammerSlamPuff", 64, 0, random(12, 32), random(-2, 2), random(-2, 2), random(-2, 2), 0, SXF_NOCHECKPOSITION);
				A_DIScale(0.25, -0.25);
				//A_BoxParticle("d7 d7 d7", 24, 40, 160, 8.0, 10.0, true);
			}
			BMEL JJ 10 Slow BRIGHT 
			{
				//A_SpawnItemEX("BoxSlamSUPER", 0, 0, 0, 0, 0, 4, 0, SXF_NOCHECKPOSITION);
				//A_DIScale(-0.075, 0.075);
			}
			#### # 0 {bNOPAIN = false;}
			#### # 0 A_ResetScale();
			Goto JustOneSec;
		XDeath:
		Death:
			#### # 0 A_ResetScale();
			BMEL L 0 A_RemoveLight("Shocking");
			BMEL L 0 A_FaceTarget;
			BMEL LLLLL 5 
			{
				A_SpawnItemEX("SafeBoom", random(-64, 64), random(-64, 64), random(32, 96), random(-2, 2), random(-2, 2), random(-2, 2));
				A_SpawnItemEX(invoker.coindrop, random(-64, 64), random(-64, 64), random(32, 96), random(-2, 2), random(-2, 2), random(-2, 2), flags: SXF_TRANSFERPOINTERS);
			}
			BMEL L 10;
			TNT1 A 0 A_SpawnItemEX("GIANTBOOM", random(-64, 64), random(-64, 64), random(32, 96), random(-2, 2), random(-2, 2), random(-2, 2));
			#### # 0 A_DIDie();
			#### ### 0 A_DIDieBlood();
			#### # 0 A_DIGibExplode();
			#### # 0 A_DISpawnBloodCoins();
			//#### ############ 0 A_SpawnItemEX("BoomSmokeBig", random(-64, 64), random(-64, 64), random(32, 96), frandom(-2, 2), frandom(-2, 2), frandom(-2, 2), 0, SXF_NOCHECKPOSITION);
			//#### # 0 A_QuakeEX(3, 3, 3, 35, 0, 1280, 0);
			#### # 5 A_NoBlocking;
			Stop;
	}
}

Class BossMelonBullet : DI_Bullet
{
	Default
	{
		Radius 15;
		Height 24;
		Speed 32;
		DamageFunction (15);
		DI_Bullet.Trail "PEPRP0";
		DI_Bullet.TrailSize 30.0;
		DI_Bullet.FancyLight "GLOWYELLOW";
	}
	
	States
	{
		Spawn:
			BMEL Z 0 NoDelay A_Jump(256, "Spinner");
		Death:
			TNT1 A 1 
			{
				A_SpawnItemEX("SafeBoom", zofs: 12, flags: SXF_NOCHECKPOSITION);
				A_Explode(15, 64, XF_CIRCULAR, fulldamagedistance: 64);
			}
			Stop;
	}
}

CLASS DI_BigMelonBlood : DI_Blood
{
	mixin DI_BoxBloodMixin;

	Default
	{
		Alpha 1.0;
	}
	
	override void postbeginplay(void)
	{
		super.postbeginplay();
		DI_BoxGib("BMELW0", 10);
		DI_BoxGib("BMELW0", 10);
		DI_BoxGib("BMELW0", 10);
	}
	
	States
	{
		Roller:
			#### # 0 
			{
				frame = random(0, 3);
				self.Scale.X *= frandom(0.5, 1.2); 
				self.Scale.Y *= frandom(0.5, 1.2);
				A_SetRoll(random(0, 359));
			}
			BLDR # 15 A_SpawnItemEX("DI_BloodPuff", flags: SXF_NOCHECKPOSITION | SXF_TRANSFERTRANSLATION | SXF_TRANSFERSPRITEFRAME | SXF_TRANSFERSCALE | SXF_TRANSFERALPHA | SXF_TRANSFERRENDERSTYLE | SXF_TRANSFERROLL);
		Looper:
			#### # 15 {A_FadeOut(0.2); A_DIScale(1.2, 1.2, true);}
			Loop;
	}
}

Class DI_BigMelonExplosion : DI_GibExplosion
{	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		gibamount = 9;
	}

	override name GetGib(int gibnum) 
	{
		switch(gibnum)
		{
			case 1: return "DI_BigMelonGib1"; break;
			case 2: return "DI_BigMelonGib2"; break;
			case 3: return "DI_BigMelonGib3"; break;
			case 4: return "DI_BigMelonGib3"; break;
			case 5: return "DI_BigMelonGib4"; break;
			case 6: return "DI_BigMelonGib5"; break;
			case 7: return "DI_BigMelonGib6"; break;
			case 8: return "DI_BigMelonGib7"; break;
			case 9: return "DI_BigMelonGib7"; break;
		}
		return "";
	}

	States
	{
		Spawn:
			TNT1 A 10 NoDelay StartGibbing();
			Stop;
	}
}

Class DI_BigMelonGib1 : DI_Gib
{
	States
	{
		Roller:
			#### # 0 GibStart();
			BMEL O 15;
			#### # 0 A_Jump(256, "Looper");
			Stop;
	}
}

Class DI_BigMelonGib2 : DI_FruitGib
{
	States
	{
		Roller:
			#### # 0 GibStart();
			BMEL P 15;
			#### # 0 A_Jump(256, "Looper");
			Stop;
	}
}

Class DI_BigMelonGib3 : DI_FruitGib
{
	States
	{
		Roller:
			#### # 0 GibStart();
			BMEL Q 15;
			#### # 0 A_Jump(256, "Looper");
			Stop;
	}
}

Class DI_BigMelonGib4 : DI_FruitGib
{
	States
	{
		Roller:
			#### # 0 GibStart();
			BMEL R 15;
			#### # 0 A_Jump(256, "Looper");
			Stop;
	}
}

Class DI_BigMelonGib5 : DI_FruitGib
{
	States
	{
		Roller:
			#### # 0 GibStart();
			BMEL S 15;
			#### # 0 A_Jump(256, "Looper");
			Stop;
	}
}

Class DI_BigMelonGib6 : DI_FruitGib
{
	States
	{
		Roller:
			#### # 0 GibStart();
			BMEL T 15;
			#### # 0 A_Jump(256, "Looper");
			Stop;
	}
}

Class DI_BigMelonGib7 : DI_FruitGib
{
	States
	{
		Roller:
			#### # 0 GibStart();
			BMEL U 15;
			#### # 0 A_Jump(256, "Looper");
			Stop;
	}
}