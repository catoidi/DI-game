Class DI_Monster : DI_Actor abstract
{
	String coindrop;
	property DIDrop: coindrop;
	PlayerPawn plrtarget;
	DI_Weapon plrwpn; //used for tracking fresh bonuses for status effect deaths.
	
	bool killedbyplayer;
	int painhp; //health value since a_dipain was last called.
	int stuntic; //how long the enemy is stunned by taking damage.
	bool owie;
	double icenum; //how much ice slowdown to apply.
	int firenum; //how much the enemy is currently on fire.
	int poisonnum; //how much the enemy has been poisoned.
	bool isshocked; //enemy is currently shocked. does not affect the monster in anyway. use this to know if monster is shocked or not.
	int ticker; //a timer.
	int poisonticker; //extra delay for poison effect.
	bool hearted; //whether or not this monster has been hit with a heart attack.
	bool friendlylight; //enable/disable the hearted light.
	int hearttimer; //how long to keep the enemy charmed.
	bool forcefresh; //allow a fresh weapon bonus, if conditions are correct.
	double speedmult; //speed multiplier.
	property DISpeedMult: speedmult;
	
	name GibType;
	Property GibType: GibType;

	//Called by all of DI's enemies.
	Default
	{
		Mass 100;
		PainChance 256;
		GibHealth 100; //player must do ludicrous extra damage in order to get blood coins.
		PainChance "Heart", 256;
		Monster;
		DamageFactor "Enemy", 0;
		DamageFactor "FakeLightning", 1.0; //fake damagetypes only hurt enemies, not players. if i knew a better way of doing this, i would swap this out with that in a heartbeat.
		DamageFactor "FakeIce", 1.0;
		DamageFactor "FakeFire", 1.0;
		DamageFactor "FakePoison", 1.0;
		PainSound "dipain2";
		DeathSound "dipain";
		Species "Enemy";
		DI_Monster.DIDrop "DI_Coin";
		DI_Monster.DISpeedMult 1.0;
		DI_Monster.GibType "DI_GibExplosion";
		+THRUSPECIES; //monsters of the same type can walk through each other.
		+FLOORCLIP;
		+JUMPDOWN;
		+CASTSPRITESHADOW;
		+NOINFIGHTING;
		+LOOKALLAROUND;
		
		//$Category "DI/Enemies/"
		//$Color 4
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		A_SpawnItemEX("DIMarker", flags: SXF_NOCHECKPOSITION | SXF_SETTARGET | SXF_TRANSFERSPRITEFRAME | SXF_ISTARGET);
		
		painhp = health;
		speed = default.speed * speedmult;
	}
	
	override void Tick(void)
	{
		Super.Tick();
	
		if ((target) && (target is "PlayerPawn"))
		{
			plrtarget = PlayerPawn(target);
		}
		
		if (Level.IsFrozen() == false) {StatusTick();}
	}
	
	virtual void StatusTick()
	{
		if (owie) {owie = false;}
		else if (stuntic > 0) {stuntic = 0;}
	
		++ticker;
		if ((ticker >= 20) && (health > 0))
		{
			if (icenum > 0) {A_DIIced(2, 0.15);}
			UpdateIceNum(-0.01);
			
			if ((firenum == 0) && (poisonnum == 0)) {A_DIStatusLight(0);}
			
			if (firenum > 0)
			{
				int firedmg = 3 + (firenum / 2);
				if (firedmg > firenum) {firedmg = firenum;}
				if (poisonnum > 0) {firedmg *= 2;}
				
				A_DIBurned(2, 0.5);
				A_DIStatusLight(2);
				
				if (self.health <= firedmg) 
				{
					if (plrtarget && plrwpn) {ConfirmPlayerWeapon(plrtarget, plrwpn);}
					A_Die("Fire");
				}
				else {self.health -= firedmg; A_Pain();}
				firenum -= firedmg;
				if (firenum < 0) {firenum = 0;}
			}
			
			++poisonticker;
			if ((poisonnum > 0) && (poisonticker > 2))
			{
				int poisondmg = poisonnum / 5;
				if (poisondmg < 1) {poisondmg = 1;}
				if (firenum > 0) {poisondmg *= 2;}
				
				A_DIPoisoned(2, 0.5);
				if (firenum <= 0) {A_DIStatusLight(3);}
				
				if (self.health <= poisondmg) 
				{
					if (plrtarget && plrwpn) {ConfirmPlayerWeapon(plrtarget, plrwpn);}
					A_Die("Poison");
				}
				else {self.health -= poisondmg; A_Pain();}
				poisonnum -= poisondmg;
				if (poisonnum < 0) {poisonnum = 0;}
				
				poisonticker = 0;
			}
			
			if (hearttimer > 0) {--hearttimer;}
			else {hearted = false;}
			if (hearted == true) 
			{
				DoCharmEffect();
			}
			else if (friendlylight == true) 
			{
				bFRIGHTENED = false;
				DamageMultiply += 0.66;
				friendlylight = false;
				A_RemoveLight("friendlylight");
			}
			
			ticker = 0;
		}
	}
	
	override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
	{
		//this code is a necessary evil to ensure players get awarded fresh bonuses if an enemy is killed by a status effect inflicted by their weapon.
		if ((source is "DI_PlayerBase") && (inflictor is "DI_Actor"))
		{
			DI_PlayerBase dicheck = DI_PlayerBase(source);
			DI_Actor dicheck2 = DI_Actor(inflictor);
			if ((dicheck) && (dicheck2.di_notweapon == false))
			{
				plrwpn = DI_Weapon(dicheck.player.readyweapon);
			}
		}
		
		if (damagetype == 'Ice' || damagetype == 'FakeIce')
		{
			//deal double damage if enemy is shocked then frozen
			if (isshocked) {damage *= 2;}
			if (hearted) {damage *= 1.25;}
		}
		else if (damagetype == 'Lightning' || damagetype == 'FakeLightning')
		{
			//deal double damage if enemy is frozen then shocked
			if (icenum > 0) {damage *= 2;}
			if (hearted) {damage *= 1.25;}
		}
		
		if (hearttimer > 0) {++hearttimer;}
		
		//launch enemy vertically upon taking damage
		float thrustnum = 1 + (((damage * 25) / default.health) / (0.01 * mass));
		ThrustThingZ(0, thrustnum, 0, 1);
		
		//calculate stun time
		stuntic += ApplyDamageFactor(damagetype, damage);
	
		return Super.TakeSpecialDamage(inflictor, source, damage, damagetype);
	}
	
	override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath)
	{
		//console.printf("%s", inflictor.GetClassName());
		
		if (killedbyplayer) {di_notweapon = false;}
		else if (inflictor is "DI_Actor")
		{
			DI_Actor dicheck = DI_Actor(inflictor);
			if (dicheck.di_notweapon == true)
			{
				di_notweapon = true; //this monster did not die from a weapon.
			}
		}
		else if (!inflictor) {di_notweapon = true;} //we have no fucking idea what killed this thing :)
	
		Super.Die(source, inflictor, dmgflags, MeansOfDeath);
	}
	
	virtual void ConfirmPlayerWeapon(PlayerPawn plr, DI_Weapon wpn)
	{
		if (wpn == plr.player.readyweapon) {killedbyplayer = true;}
		else {killedbyplayer = false;}
	}
	
	virtual void UpdateIceNum(double iceamount)
	{
		icenum += iceamount;
		if (icenum > 0.9) {icenum = 0.9;}
		else if (icenum < 0) {icenum = 0.0;}
		
		speed = default.speed * speedmult * (1.0 - icenum);
	}
	
	virtual void DoCharmEffect(void)
	{
		A_DIHearted(2, 1.0);
		bFRIGHTENED = true;
		if (friendlylight == false)
		{
			DamageMultiply -= 0.66;
			int size1 = radius;
			int size2 = size1 * 0.75;
			int lightoffset = height / 2;
			A_AttachLight("friendlylight", DynamicLight.PointLight, Color(0xd2a5ff), size1, size2, 0, (0, 0, lightoffset), 0.1);
			friendlylight = true;
		}
	}
	
	action void A_DITargetPlayer(void)
	{
		//ensures that the enemy drops are calculated based on whichever player it was targetting last.
		if (invoker.plrtarget != null)
		{
			target = Actor(invoker.plrtarget);
		}
	}
	
	action void A_DIIcePain(double fakedmg = 0.0)
	{
		//called before A_DIPain.
		//slows the enemy speed based on how much damage they took from the ice attack.
		double icepain = (invoker.painhp - invoker.health) * 2;
		if (fakedmg != 0.0) {icepain = fakedmg;} //ignore damage taken, use preset value instead.
		icepain *= 1.0 / invoker.default.health;
		int iceparticle = icepain * 6;
		invoker.UpdateIceNum(icepain);
		invoker.A_DIIced(iceparticle, 0.15);
	}
	
	action void A_DIFirePain(int fakedmg = 0)
	{
		int firepain = (invoker.painhp - invoker.health); //fire effect will effectively double the damage given.
		if (fakedmg != 0) {firepain = fakedmg;} //ignore damage taken, use preset value instead.
		if (invoker.hearted) {firepain *= 1.25;}
		int fireparticle = 5 + (firepain / 25);
		invoker.firenum += firepain;
		invoker.A_DIBurned(fireparticle, 0.5);
		invoker.A_DIStatusLight(2);
	}
	
	action void A_DIPoisonPain(int fakedmg = 0)
	{
		int poisonpain = (invoker.painhp - invoker.health) * 3; //poison damage gives a strong DOT effect, but is slower than fire.
		if (fakedmg != 0) {poisonpain = fakedmg;} //ignore damage taken, use preset value instead.
		if (invoker.hearted) {poisonpain *= 1.25;}
		int poisonparticle = 5 + (poisonpain / 25);
		invoker.poisonnum += poisonpain;
		invoker.A_DIPoisoned(poisonparticle, 0.5);
		invoker.A_DIStatusLight(3);
	}
	
	action void A_DIHeartPain(void)
	{
		if (random(1, invoker.PainThreshold) <= 1)
		{
			invoker.hearted = true;
			invoker.hearttimer += 8;
			invoker.DoCharmEffect();
		}
		else
		{
			invoker.A_DIPoisonPain(invoker.PainThreshold * 10);
		}
	}
	
	action void A_DIPain(void)
	{
		if ((invoker.firenum == 0) && (invoker.poisonnum == 0)) {A_DIStatusLight(0);} //remove any lingering status lights if there's not status effect active.
		invoker.isshocked = false;
		
		if ((invoker.stuntic > 0) && (invoker.health > 0))
		{
			float hploss = (1.0 * invoker.stuntic) / invoker.health;
			if (hploss < 0.1) {hploss = 0.1;}
			else if (hploss > 2.0) {hploss = 2.0;}
			tics *= hploss;
			tics += invoker.stuntic / 10;
			if (tics < 5) {tics = 5;}
			invoker.owie = true;
		}
		invoker.painhp = invoker.health;
		A_Pain();
	}
	
	action void A_DIPoisonDeath()
	{
		A_SpawnItemEX("DI_AcidBlood_Pool", flags: SXF_NOCHECKPOSITION);
		A_AttachLightDef("deathlight", "POISONER2");
		A_DIPoisoned(5, 2.0);
	}
	
	action void A_DIFireDeath()
	{
		A_Explode(5, invoker.radius + 32, XF_NOTMISSILE | XF_EXPLICITDAMAGETYPE, 0, 32678, damagetype: "FakeFire");
		A_QuakeEX(1, 1, 1, 10, 0, invoker.radius + 32, 0);
		A_AttachLightDef("deathlight", "BURNER2");
		A_DIBurned(5, 2.0);
	}
	
	action void A_DIShockDeath()
	{
		A_Explode(1, invoker.radius + 32, XF_NOTMISSILE | XF_EXPLICITDAMAGETYPE, 0, 32678, damagetype: "FakeLightning");
		A_QuakeEX(1, 1, 1, 10, 0, invoker.radius + 32, 0);
		A_AttachLightDef("deathlight", "SHOCKER");
		A_DIShocked(2.0, inum: 5);
	}
	
	action void A_DIIceDeath()
	{
		A_SetTranslation("Ice");
		A_DIIced(16, 0.5, true);
		A_DIDie();
		A_DIDieBlood();
		for (int i = 0; i < 2; ++i)
		{
			A_DISpawnIceCoin();
		}
	}
	
	action void A_DISpawnIceCoin()
	{
		A_SpawnItemEx(invoker.coindrop, random(-8, 8), random(-8, 8), random(8, 16), random(-2, 2), random(-2, 2), random(6, 10), 0, SXF_TRANSFERTRANSLATION | SXF_TRANSFERPOINTERS | SXF_NOCHECKPOSITION);
	}
	
	action void A_DISpawnBloodCoins()
	{
		for (int i = 0; i < 2; ++i)
		{
			bool fakebool;
			actor bcoin;
			[fakebool, bcoin] = A_SpawnItemEx(invoker.coindrop, random(-8, 8), random(-8, 8), random(8, 16), random(-2, 2), random(-2, 2), random(6, 10), 0, SXF_TRANSFERPOINTERS | SXF_NOCHECKPOSITION);
			if (bcoin) {bcoin.A_SetTranslation("DamRed");}
		}
	}
	
	action void A_DIGibExplode()
	{
		if (bNOBLOOD == false)
		{
			A_SpawnItemEX(invoker.GibType, 0, 0, invoker.height / 0.75, flags: SXF_USEBLOODCOLOR | SXF_NOCHECKPOSITION);
		}
	}
	
	States
	{
		Pain:
			#### # 10 A_DIPain();
			#### # 0 A_ResetScale();
			#### # 0 A_Jump(256, "See");
			Stop;
		Pain.Melee:
			#### # 15 A_DIPain();
			#### # 0 A_ResetScale();
			#### # 0 A_Jump(256, "See");
			Stop;
		Pain.FakeLightning:
			#### # 0 A_Jump(256, "Pain.Lightning");
			Stop;
		Pain.Lightning:
			#### ### 0 A_DIShocked();
			#### # 30 
			{
				A_DIPain(); 
				A_DIStatusLight(1); 
				invoker.isshocked = true;
				if (invoker.icenum > 0) {A_SetTics(90);}
			}
			#### # 0 A_ResetScale();
			#### # 0 A_DIStatusLight(0);
			#### # 0 {invoker.isshocked = false;}
			#### # 0 A_Jump(256, "See");
			Stop;
		Pain.FakeIce:
			#### # 0 A_Jump(256, "Pain.Ice");
			Stop;
		Pain.Ice:
			#### # 0 A_DIIcePain();
			#### # 0 A_Jump(256, "Pain");
			Stop;
		Pain.FakeFire:
			#### # 0 A_Jump(256, "Pain.Fire");
			Stop;
		Pain.Fire:
			#### # 0 A_DIFirePain();
			#### # 0 A_Jump(256, "Pain");
		Pain.FakePoison:
			#### # 0 A_Jump(256, "Pain.Poison");
			Stop;
		Pain.Poison:
			#### # 0 A_DIPoisonPain();
			#### # 0 A_Jump(256, "Pain");
		Pain.Heart:
			#### # 0 A_DIHeartPain();
			#### # 0 A_Jump(256, "Pain");
		Death:
			#### # 0 A_DITargetPlayer();
			#### # 0 A_DIDie();
			#### ### 0 A_DIDieBlood();
			#### # 0 A_Jump(256, "DeathLoop");
		DeathLoop:
			#### # 1 
			{
				A_DIScale(1.01, 0.95, true);
				A_FadeOut(0.03);
			}
			Loop;
		Death.FakeLightning:
			#### # 0 A_Jump(256, "Death.Lightning");
			Stop;
		Death.Lightning:
			#### # 0 A_DIShockDeath();
			#### # 0 A_Jump(256, "Death");
			Stop;
		Death.FakeLightning:
			#### # 0 A_Jump(256, "Death.Lightning");
		Death.Lightning:
			#### # 0 A_DIShockDeath();
			#### # 0 A_Jump(256, "Death");
		Death.FakeFire:
			#### # 0 A_Jump(256, "Death.Lightning");
		Death.Fire:
			#### # 0 A_DIFireDeath();
			#### # 0 A_Jump(256, "Death");
		Death.FakePoison:
			#### # 0 A_Jump(256, "Death.Poison");
		Death.Poison:
			#### # 0 A_DIPoisonDeath();
			#### # 0 A_Jump(256, "Death");
		Death.FakeIce:
			#### # 0 A_Jump(256, "Death.Ice");
			Stop;
		Death.Ice:
			#### # 0 A_DIIceDeath(); //di stuff
			#### # 0 A_FreezeDeath(); //gzdoom stuff
			#### # 35 A_FreezeDeathChunks();
			Wait;
		XDeath:
			#### # 0 A_DITargetPlayer();
			#### # 0 A_DIDie();
			#### #### 0 A_DIDieBlood();
			#### # 0 A_DIGibExplode();
			#### # 0 A_DISpawnBloodCoins();
			#### # 0 A_Jump(256, "DeathLoop");
			Stop;
		XDeath.FakeLightning:
			#### # 0 A_Jump(256, "XDeath.Lightning");
		XDeath.Lightning:
			#### # 0 A_DIShockDeath();
			#### # 0 A_Jump(256, "XDeath");
		XDeath.FakeFire:
			#### # 0 A_Jump(256, "XDeath.Lightning");
		XDeath.Fire:
			#### # 0 A_DIFireDeath();
			#### # 0 A_Jump(256, "XDeath");
		XDeath.FakePoison:
			#### # 0 A_Jump(256, "XDeath.Poison");
		XDeath.Poison:
			#### # 0 A_DIPoisonDeath();
			#### # 0 A_Jump(256, "XDeath");
		XDeath.FakeIce:
			#### # 0 A_Jump(256, "XDeath.Ice");
		XDeath.Ice:
			#### ## 0 A_DIDieBlood();
			#### # 0 A_DISpawnBloodCoins();
			#### # 0 A_DIIceDeath(); //di stuff
			#### # 0 A_FreezeDeath(); //gzdoom stuff
			#### # 35 A_FreezeDeathChunks();
			Wait;
	}
}