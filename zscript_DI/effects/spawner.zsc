//zscript_DI/effects/spawner.zsc

Class DIMapSpot : MapSpot
{
	//meant to help quickly identify spawner locations in the map editor.
	Default
	{
		//$Category "DI/Map Spots/"
		//$Color 5
		//$Title "Map Spot (Spawner)"
		//$IgnoreRenderstyle
	}
}

Class DIMapSpot_Decor : DIMapSpot
{
	//for easily identifying decoration spawns.
	Default
	{
		//$Color 4
		//$Title "Map Spot (Decor)"
		//$IgnoreRenderstyle
	}
}

Class DIMapSpot_Event : DIMapSpot
{
	//for easily identifying random event spawns.
	Default
	{
		//$Color 12
		//$Title "Map Spot (Random Event)"
		//$IgnoreRenderstyle
	}
}

CLASS DISpawnerSpot : DI_Actor
{
	//spawner spots control where the enemy spawners will originate from.
	//the spawner will constantly die and respawn according to the spawn delay.
	//the best way to control spawnerspots is to add/remove the spots entirely.

	Default
	{
		Radius 32; //maximum radius of enemies using this spawner.
		Height 96; //maximum enemy height.
		Scale 2.0;
		Alpha 0.15;
		RenderStyle "Translucent";
		DISpawnerSpot.SpawnFX "DISpawner_FX";
		+FLATSPRITE;
		+DONTSPLASH;
		//+NOINTERACTION;
		+MOVEWITHSECTOR;
		//+INVISIBLE;
		//$Category "DI/Spawners"
		//$Color 5
		//$Title "Enemy Spawner"
	}
	
	string SpawnFX;
	Property SpawnFX: SpawnFX;
	
	int SpawnDelay;
	Actor spawned;
	
	override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath)
	{
		Super.Die(source, inflictor, dmgflags, MeansOfDeath);
		if (MeansOfDeath == "Spawner")
		{
			SetStateLabel("Death.Spawner"); //gross hack
		}
	}
	
	States
	{
		Spawn:
			PLAT N -1;
			Stop;
		Death:
			TNT1 A -1;
			Stop;
		Death.Spawner:
			TNT1 A 1 A_SetTics(SpawnDelay);
			TNT1 A -1 A_RaiseSelf(RF_NOCHECKPOSITION);
			Stop;
		Raise:
			PLAT N 1;
			Goto Spawn;
	}
}

Class DISpawnerSpot_Big : DISpawnerSpot
{
	Default
	{
		Radius 64; //double the radius/height of regular spawners.
		Height 192;
		Scale 4.0;
		//$Title "Enemy Spawner (Large)"
	}
}

Class DISpawnerSpot_Flying : DISpawnerSpot 
{
	//flying enemies can spawn here.
	Default
	{
		//$Title "Enemy Spawner (Flying)"
	}
}

Class DISpawnerSpot_Boss : DISpawnerSpot
{
	Default
	{
		Radius 128;
		Height 320;
		Scale 8.0;
		//$Title "Enemy Spawner (BOSS)"
	}
}

Class DISpawnerSpot_Turret : DISpawnerSpot
{
	//spawner waits until both timer is finished and spawned enemy is dead before reactivating.
	Default
	{
		//$Title "Enemy Spawner (Turret)"
	}
	
	clearscope bool CheckSpawned()
	{
		if (!spawned) {return false;} //there is no spawned enemy.
		else if (spawned.health <= 0) {return false;} //the spawned enemy is dead.
		else {return true;} //the spawned enemy is alive.
	}
	
	States
	{
		Death.Spawner:
			TNT1 A 1 A_SetTics(SpawnDelay);
			TNT1 A 10
			{
				if (CheckSpawned() == true) {return ResolveState(null);}
				else {return ResolveState("StartRaise");}
			}
			Wait;
		StartRaise:
			TNT1 A -1 A_RaiseSelf(RF_NOCHECKPOSITION);
			Stop;
	}
}

Class DISpawner : DI_Actor
{
	Default
	{
		Height 8;
		Radius 32;
		-SOLID;
		+MOVEWITHSECTOR;
	}
	
	string SpawnChoice;
	DISpawnerSpot Spotter;
	DISpawner_FX FX;
	
	virtual void ActivateSpawner()
	{
		if (Spotter)
		{
			bool hasspawned;
			actor creature;
			[hasspawned, creature] = A_SpawnItemEX(Spotter.SpawnFX, flags: SXF_NOCHECKPOSITION);
			if (creature is "DISpawner_FX")
			{
				FX = DISpawner_FX(creature);
				FX.Spawner = self;
			}
			else {ThrowAbortException("Failed to spawn visual effects for %s!", Spotter.SpawnFX);}
		}
		else {ThrowAbortException("%s", "Spawner spawned with no Spot located!");}
	}
	
	virtual void TimeToSpawn()
	{
		bool hasspawned;
		actor creature;
		[hasspawned, creature] = A_SpawnItemEX(SpawnChoice, flags: SXF_NOCHECKPOSITION);
		if (hasspawned && creature) 
		{
			 //give spawned creature pointer to spawnerspot
			Spotter.spawned = creature;
			if (creature is "DI_Monster")
			{
				let newmon = DI_Monster(creature);
				newmon.spawnspotted = Spotter.getclassname();
			}
		}
		SpawnerToggle(true);
		for (int i = 0; i < 6; ++i)
		{
			//replace this with particles later. :)
			A_SpawnItemEX("DISpawner_Spark", frandom(-8, 8), frandom(-8, 8), frandom(0, 8), frandom(-2, 2), frandom(-2, 2), frandom(0, 4), 0, SXF_NOCHECKPOSITION);
		}
		SetStateLabel("Death");
	}
	
	virtual void SpawnerToggle(bool finished = false)
	{
		ACS_NamedExecuteAlways("SpawnerToggle", 0, finished, 0, 0);
	}
	
	virtual void FXWait()
	{
		if (!FX) 
		{
			SetStateLabel("Death");
		}
	}
	
	States
	{
		Spawn:
			TNT1 A 1 NoDelay {ActivateSpawner();}
			#### # 5 {FXWait();}
			Wait;
		Death:
			#### # 1;
			Stop;
	}
}

Class DISpawner_FX : DI_Actor
{
	//how the spawner looks and behaves doesnt really matter.
	//all that matters is the SpawnerToggle script and the SpawnChoice being spawned after a delay.

	Default
	{
		Height 8;
		Radius 32;
		-SOLID;
		+MOVEWITHSECTOR;
		+FLATSPRITE;
		+INTERPOLATEANGLES;
	}
	
	DISpawner Spawner;
	
	virtual void DoSpawn()
	{
		A_StartSound("plateB");
		A_Explode(25, 32, XF_NOTMISSILE | XF_EXPLICITDAMAGETYPE, damagetype: "Enemy");
		Spawner.TimeToSpawn();
	}

	States
	{
		Spawn:
			PLAT B 0 NoDelay {invoker.Spawner.SpawnerToggle();}
			#### # 0 A_StartSound("plateA");
			PLAT B 0 BRIGHT A_SpawnItemEX("DISpawner_Spark", frandom(-8, 8), frandom(-8, 8), frandom(0, 8), frandom(-2, 2), frandom(-2, 2), frandom(0, 4), 0, SXF_NOCHECKPOSITION);
			PLAT BBBBBBBBBBBBBBBBBBBBBBBB 1 BRIGHT A_SetRoll(roll + 4);
			PLAT C 0 BRIGHT A_SpawnItemEX("DISpawner_Spark", frandom(-8, 8), frandom(-8, 8), frandom(0, 8), frandom(-2, 2), frandom(-2, 2), frandom(0, 4), 0, SXF_NOCHECKPOSITION);
			PLAT CCCCCCCCCCCCCCCCCCCCCCCC 1 BRIGHT A_SetRoll(roll + 8);
			PLAT DD 0 BRIGHT A_SpawnItemEX("DISpawner_Spark", frandom(-8, 8), frandom(-8, 8), frandom(0, 8), frandom(-2, 2), frandom(-2, 2), frandom(0, 4), 0, SXF_NOCHECKPOSITION);
			PLAT DDDDDDDDDDDDDDDDDDDDDDDD 1 BRIGHT A_SetRoll(roll + 16);
			PLAT E 0 {DoSpawn();}
			PLAT E 0 A_SpawnItemEX("DISpawner_Ring", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			TNT1 A 60;
			Stop;
		Death:
			TNT1 A 1;
			Stop;
	}
}

CLASS DISpawner_FXBoss : DISpawner_FX
{
	override void DoSpawn()
	{
		A_StartSound("plateB", pitch: 0.5);
		A_Explode(100, 64, XF_NOTMISSILE | XF_EXPLICITDAMAGETYPE, damagetype: "Enemy");
		Spawner.TimeToSpawn();
	}
	
	States
	{
		Spawn:
			PLAT B 0 NoDelay {invoker.Spawner.SpawnerToggle();}
			#### # 0 A_StartSound("plateA", pitch: 0.5);
			PLAT B 0 BRIGHT A_SpawnItemEX("DISpawner_SparkBig", frandom(-16, 16), frandom(-16, 16), frandom(0, 16), frandom(-4, 4), frandom(-4, 4), frandom(0, 8), 0, SXF_NOCHECKPOSITION);
			PLAT BBBBBBBBBBBBBBBBBBBBBBBB 1 BRIGHT A_SetRoll(roll + 2);
			PLAT B 0 BRIGHT A_SpawnItemEX("DISpawner_SparkBig", frandom(-16, 16), frandom(-16, 16), frandom(0, 16), frandom(-4, 4), frandom(-4, 4), frandom(0, 8), 0, SXF_NOCHECKPOSITION);
			PLAT BBBBBBBBBBBBBBBBBBBBBBBB 1 BRIGHT A_SetRoll(roll + 2);
			PLAT C 0 BRIGHT A_SpawnItemEX("DISpawner_SparkBig", frandom(-16, 16), frandom(-16, 16), frandom(0, 16), frandom(-4, 4), frandom(-4, 4), frandom(0, 8), 0, SXF_NOCHECKPOSITION);
			PLAT CCCCCCCCCCCCCCCCCCCCCCCC 1 BRIGHT A_SetRoll(roll + 4);
			PLAT C 0 BRIGHT A_SpawnItemEX("DISpawner_SparkBig", frandom(-16, 16), frandom(-16, 16), frandom(0, 16), frandom(-4, 4), frandom(-4, 4), frandom(0, 8), 0, SXF_NOCHECKPOSITION);
			PLAT CCCCCCCCCCCCCCCCCCCCCCCC 1 BRIGHT A_SetRoll(roll + 4);
			PLAT DD 0 BRIGHT A_SpawnItemEX("DISpawner_SparkBig", frandom(-16, 16), frandom(-16, 16), frandom(0, 16), frandom(-4, 4), frandom(-4, 4), frandom(0, 8), 0, SXF_NOCHECKPOSITION);
			PLAT DDDDDDDDDDDDDDDDDDDDDDDD 1 BRIGHT A_SetRoll(roll + 8);
			PLAT DD 0 BRIGHT A_SpawnItemEX("DISpawner_SparkBig", frandom(-16, 16), frandom(-16, 16), frandom(0, 16), frandom(-4, 4), frandom(-4, 4), frandom(0, 8), 0, SXF_NOCHECKPOSITION);
			PLAT DDDDDDDDDDDDDDDDDDDDDDDD 1 BRIGHT A_SetRoll(roll + 8);
			PLAT E 0 {DoSpawn();}
			PLAT E 0 A_SpawnItemEX("DISpawner_RingBig", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			TNT1 A 60;
			Stop;
		Death:
			TNT1 A 1;
			Stop;
	}
}

CLASS DISpawner_Spark : BoxTeleportSpark 
{
	Default
	{
		Alpha 1.0;
		Scale 1.0;
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_SetRoll(random(0, 359));
			PLAT M 0;
			Goto Looper;
	}
}

CLASS DISpawner_SparkBig : DISpawner_Spark {Default {Scale 2.0;}}

CLASS DISpawner_Ring : DI_Actor
{
	Default
	{
		FloatBobPhase 0;
		RenderStyle "Translucent";
		Alpha 1.0;
		+NOGRAVITY;
		+FLATSPRITE;
		+NOBLOCKMAP;
		+NOINTERACTION;
		+BRIGHT;
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_SetRoll(random(0, 359));
			PLAT K 0 { 
				A_QuakeEX(1, 1, 1, 35, 0, 128, 0);
			}
			Goto Looper;
		Looper:
			#### # 1 {
				A_DIScale(1.05, 1.05, true);
				A_FadeOut(0.05);
			}
			Loop;
	}
}

CLASS DISpawner_RingBig : DISpawner_Ring {Default {Scale 2.0;}}

//leftover code from box party

/*
CLASS PlateSpawnerGib1 : BoxGib
{
	States
	{
		Spawn:
			PLAT F 0 NoDelay A_SetRoll(random(0, 359));
			"####" "#" 0 A_QueueCorpse;
			"####" "#" 1 A_Jump(128, "SpeenLeft");
			Goto SpeenRight;
	}
}

CLASS PlateSpawnerGib2 : BoxGib
{
	States
	{
		Spawn:
			PLAT G 0 NoDelay A_SetRoll(random(0, 359));
			"####" "#" 0 A_QueueCorpse;
			"####" "#" 1 A_Jump(128, "SpeenLeft");
			Goto SpeenRight;
	}
}

CLASS PlateSpawnerGib3 : BoxGib
{
	States
	{
		Spawn:
			PLAT H 0 NoDelay A_SetRoll(random(0, 359));
			"####" "#" 0 A_QueueCorpse;
			"####" "#" 1 A_Jump(128, "SpeenLeft");
			Goto SpeenRight;
	}
}

CLASS PlateSpawnerGib4 : BoxGib
{
	States
	{
		Spawn:
			PLAT I 0 NoDelay A_SetRoll(random(0, 359));
			"####" "#" 0 A_QueueCorpse;
			"####" "#" 1 A_Jump(128, "SpeenLeft");
			Goto SpeenRight;
	}
}
*/

/*
CLASS PlateSpawnerRingPuff : HammerSlamPuff
{
	Default
	{
		Alpha 1.0;
		+BRIGHT;
	}

	States
	{
		Spawn:
			PLAT L 1 {
				A_BoxScaleXY(0.01, 0.05);
				A_FadeOut(0.05);
			}
			Loop;
	}
}
*/