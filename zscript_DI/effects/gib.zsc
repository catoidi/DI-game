//zscript_DI/effects/gib.zsc

Class DI_Gib : DI_FloorActor
{
	Default
	{
		Radius 8;
		Height 8;
		Mass 0;
		BounceType "Doom";
		BounceFactor 0.4;
		WallBounceFactor 0.8;
	
		-SOLID;
		+NOBLOCKMAP;
		+NOTELEPORT;
		+ALLOWPARTICLES;
		+THRUACTORS;
		+MISSILE;
		+ROLLSPRITE;
		+SPRITEANGLE;
		+EXPLODEONWATER;
	}
	
	override void Tick(void)
	{
		super.tick();
		
		if (!InStateSequence(CurState, ResolveState("Death")))
		{
			AliveTick();
		}
	}
	
	virtual void AliveTick(void)
	{
		if (self.Pos.Z ~== self.FloorZ) {A_Die();}
	}
	
	override void postbeginplay(void)
	{
		super.postbeginplay();
		self.Vel += (frandom(-2, 2), frandom(-2, 2), frandom(-2, 2));
	}
	
	action void GibStart()
	{
		self.Scale.X *= frandom(0.5, 1.2); 
		self.Scale.Y *= frandom(0.5, 1.2);
		A_SetRoll(random(0, 359));
	}

	States
	{
		Spawn:
			TNT1 AAA 0 NoDelay A_Jump(256, "Roller");
			Stop;
		Roller:
			#### # 0 GibStart();
			BLUD D 15;
			#### # 0 A_Jump(256, "Looper");
			Stop;
		Looper:
			#### # 15;
			#### # 0 {A_FadeOut(0.1);}
			Loop;
		Death.Sky:
		Death:
			#### # 0 {bFLATSPRITE = true; invoker.Alpha = invoker.default.Alpha;}
			#### # 1050 A_SetTics(floortic);
			#### # 1 A_FadeOut(0.05);
			Wait;
	}
}

Class DI_GibBloody : DI_Gib
{
	int randomblood;
	int bloodtimer;
	
	Default {+USEBOUNCESTATE;}
	
	override void postbeginplay()
	{
		super.postbeginplay();
		
		randomblood = random(4, 8);
	}

	override void AliveTick()
	{
		super.AliveTick();
		
		++bloodtimer;
		if (bloodtimer >= randomblood)
		{
			A_SpawnItemEX("DI_BloodPuff_Gib", flags: SXF_NOCHECKPOSITION | SXF_TRANSFERTRANSLATION | SXF_TRANSFERALPHA);
			bloodtimer = 0;
		}
	}
	
	virtual name TrailSprite()
	{
		string trailer = "BLUDA0";
		switch(random(0, 2))
		{
			case 1: trailer = "BLUDB0"; break;
			case 2: trailer = "BLUDC0"; break;
		}
		return trailer;
	}
	
	States
	{
		Bounce:
			#### # 0 A_SpawnItemEX("DI_BloodPuff_GibBig", flags: SXF_NOCHECKPOSITION | SXF_TRANSFERTRANSLATION | SXF_TRANSFERALPHA);
			#### # 0 A_Jump(256, "Looper");
		Death:
			#### # 0 
			{
				invoker.Alpha = invoker.default.Alpha;
				bFLATSPRITE = true;
				A_SpawnItemEX("DI_BloodPuff_GibBig", flags: SXF_NOCHECKPOSITION | SXF_TRANSFERTRANSLATION | SXF_TRANSFERALPHA);
			}
			#### # 1050 A_SetTics(floortic);
			#### # 1 A_FadeOut(0.05);
			Wait;
	}
}

Class DI_GibExplosion : DI_Actor
{
	Default
	{
		Radius 8;
		Height 8;
		Mass 0;
		RenderStyle "Translucent";
		Alpha 0.8;
		Scale 3.0;
		BounceType "Doom";
	
		-SOLID;
		+NOINTERACTION;
		+NOBLOCKMAP;
		+NOTELEPORT;
		+ROLLSPRITE;
		+SPRITEANGLE;
	}
	
	int gibamount;
	float boomsize;
	int randomblood;
	
	override void PostBeginPlay()
	{
		super.postbeginplay();
		
		randomblood = random(0, 2);
		
		if (target)
		{
			gibamount = (target.height * target.radius) / 50;
			if (gibamount < 2) {gibamount = 2;}
			if (gibamount > 24) {gibamount = 24;}
			boomsize = (target.height + target.radius) / 48;
			Scale *= boomsize;
		}
		else {gibamount = 4;}
	}
	
	override void Tick()
	{
		super.tick();
		
		Vel.Z += 0.05;
	}
	
	virtual name GetGib(int gibnum = 0)
	{
		return "DI_GibBloody";
	}
	
	action void StartGibbing()
	{
		A_SetRoll(random(0, 359));
		for (int i = 0; i < invoker.gibamount; ++i)
		{
			let gibvel = invoker.boomsize * 9;
			A_SpawnItemEX(invoker.GetGib(i), 0, 0, 0, frandom(-gibvel, gibvel), frandom(-gibvel, gibvel), frandom(gibvel / 2, gibvel * 2), random(0, 359), SXF_NOCHECKPOSITION | SXF_TRANSFERTRANSLATION | SXF_TRANSFERRENDERSTYLE, 0, invoker.tid);
		}
		A_StartSound("wilhelm");
	}
	
	action void GibAway(int gibframe = -1)
	{
		if (gibframe > -1) {frame = gibframe;}
		A_DIScale(1.025, 1.025, true); 
		A_FadeOut(0.05);
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay StartGibbing();
			BLUD A 1 GibAway(invoker.randomblood);
			Wait;
	}
}