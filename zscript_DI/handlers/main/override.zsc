extend class DIHandler
{
	override void WorldLoaded(WorldEvent e)
	{	
		++wavenum;
		++fakewavenum;
		
		++endless_capmult;
		++endless_ratemult;
		++endless_spawnmult;
		++endless_healthmult;
		++endless_damagemult;
		
		ParseDIWAVE(e);
		//GetWaveData(e);
		//ParseWaveData(e);
	}

	override void WorldThingSpawned(WorldEvent e)
	{
		if (e.Thing != null)
		{
			if (e.Thing is "DISpawner") {SpawnerSpawned(e);}
			if (e.Thing is "DISpawnerSpot") {SpawnerSpotUpdate(e);}
			if ((e.Thing.target != null) && (e.Thing.target is "PlayerPawn"))
			{
				if (e.Thing is "DI_Drop") {CoinDropper(e);}
			}
			if (e.Thing.GetClassName() == "DI_WaveStarter") //if it ain't broke don't fix it
			{
				GetWaveData(e);
				ParseWaveData(e);
				waveinprogress = true;
				for (int i = 0; i < 8; ++i)
				{
					let p = players[i].mo;
					if ((p is "DI_PlayerBase") && (playeringame[i]))
					{
						DI_PlayerBase plr = DI_PlayerBase(p);
						plr.DIWave_Start();
					}
				}
				DoWaveEvent(e);
			}
			if (e.Thing.GetClassName() == "DI_ClearPlayerItems")
			{
				for (int i = 0; i < 8; ++i)
				{
					let p = players[i].mo;
					if ((p is "DI_PlayerBase") && (playeringame[i]))
					{
						DI_PlayerBase plr = DI_PlayerBase(p);
						plr.DIWave_End();
					}
				}
			}
			if (e.Thing is "DI_Monster")
			{
				DIMonsterHandler(e);
			}
			if (e.Thing is "DIShop")
			{
				shoparray.Push(e.Thing);
			}
		}
	}
	
	override void WorldThingRevived(WorldEvent e)
	{
		if (e.Thing != null)
		{
			if (e.Thing is "DISpawnerSpot") {SpawnerSpotUpdate(e);}
		}
	}
	
	override void WorldThingDied(WorldEvent e)
	{
		if (e.Thing != null)
		{
			if (e.Thing.bIsMonster == true) {DIMonsterDied(e);}
			if (e.Thing is "DISpawnerSpot") {SpawnerSpotUpdate(e, false);}
			if (e.Thing.target != null) 
			{
				if (e.Thing is "DI_Monster")
				{
					DI_Monster dimon = DI_Monster(e.Thing);
					bool notweapon = dimon.di_notweapon;
					GivePlayerCombo(e, notweapon); //notweapon needs to be passed to all functions that involve fresh weapon kills.
					if (e.Thing.target is "DI_PlayerBase")
					{
						DI_PlayerBase plr = DI_PlayerBase(e.Thing.target);
						BoxDrops(e, plr, notweapon); //notweapon needs to be passed to all functions that involve fresh weapon kills.
						BonusArmorDrop(e, plr);
						BonusAmmoGiver(e, plr); //used for DI_LeadRecycling.
					}
				}
			}
		}
	}
	
	override void WorldThingDestroyed(WorldEvent e)
	{
		if (e.Thing != null)
		{
			if (e.Thing is "DISpawnerSpot") {SpawnerSpotUpdate(e, false);}
			if (e.Thing is "DIShop") 
			{
				int removeshop;
				foreach(shopmo : shoparray)
				{
					if (shoparray.Find(shopmo) < shoparray.Size()) {removeshop = shoparray.Find(shopmo);}
				}
				shoparray.Delete(removeshop);
			}
		}
	}
	
	override void WorldTick()
	{
		ammogivetick = false;
	}
	
	override void NetworkProcess(ConsoleEvent e)
	{
		if (e.Name == "DIRerollShops")
		{
			foreach(shopmo : shoparray)
			{
				if (shopmo)
				{
					shopmo.SetStateLabel("Reroll");
				}
			}
		}
		else if (e.Name == "dieventtest")
		{
			console.printf("%s", "SWAG EVENT ACTIVATED!!!!!!!!!!");
		}
		else if (e.Name == "diaddenemycount") //allows other scripts to add to the handler's estimated enemy count.
		{
			enemycount += e.Args[0];
		}
		else if (e.Name.Left(16) == "diplayeritemused")
		{
			let itemplr = players[e.Player].mo;
			if (itemplr)
			{
				int consumer = itemplr.CountInv("DI_Consumer");
				if (consumer > 0) {itemplr.GiveInventory("DI_Regen", 3 * consumer);}
			}
		}
		else if (e.Name == "wave_debug")
		{
			console.printf("waitnum: %d\ncurrentspawners: %d\nspawnqueue: %d\nalive monsters: %d\nenemycount: %d", waitnum, currentspawners, spawnqueue.Size(), Level.Total_Monsters - Level.Killed_Monsters, enemycount);
			//if ((waitnum == 0) && (currentspawners <= 0) && (spawnqueue.Size() == 0) && (queuefinished == true) && (Level.Total_Monsters == Level.Killed_Monsters + 1) && (enemycount <= 0))
		}
	}
}