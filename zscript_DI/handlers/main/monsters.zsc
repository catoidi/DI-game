extend class DIHandler
{
	virtual void DIMonsterDied(WorldEvent e)
	{
		--enemycount;
		e.Thing.ACS_ScriptCall("EnemyCount", enemycount);
		currentspawners = e.Thing.ACS_ScriptCall("CheckSpawner", spawnamount, spawntime);
		bool queuefinished = e.Thing.ACS_ScriptCall("CheckSpawnQueue"); //this is to fix a bug when you kill the 2nd to last enemy on the same frame the last enemy starts spawning.
		if (waveinprogress == true)
		{
			if ((currentspawners <= 0) && (spawnqueue.Size() == 0) && (queuefinished == true) && (Level.Total_Monsters == Level.Killed_Monsters + 1))
			{
				if ((waitnum == 0) && (enemycount <= 0))
				{
					//console.printf("%s", "wave is over!");
					++wavenum;
					++fakewavenum;
					e.Thing.ACS_NamedExecuteAlways("DIWaveFinished", 0, wavenum, 0, 0);
					eventhandler.sendnetworkevent("DIWaveFinished", wavenum, 0, 0);
					waveinprogress = false;
					//GetWaveData(e);
					//ParseWaveData(e);
				}
				else if ((waitnum != 0) && (waitnum != waitcurrent) && (enemycount > 0))
				{
					//bypass wait quota if all queued monsters have been killed.
					waitnum = 0;
					waitcurrent = 0;
					++batchnum;
					ParseWaveData(e);
				}
			}
			else 
			{
				++waitcurrent;
				//console.printf("%d, %d", waitnum, waitcurrent);
				if ((waitnum != 0) && (waitcurrent == waitnum))
				{
					waitnum = 0;
					waitcurrent = 0;
					++batchnum;
					ParseWaveData(e);
					//console.printf("%s", "activating next batch...");
				}
				//console.printf("%s %d %d %d", "wave is still going,", currentspawners, spawnqueue.Size(), Level.Total_Monsters - (Level.Killed_Monsters + 1));
			}
		}
	}
	
	virtual void DIMonsterHandler(WorldEvent e)
	{	
		DI_Monster mon = DI_Monster(e.Thing);
		
		if (endless_healthmult != 1)
		{
			int starthp = mon.Health * endless_healthmult;
			if (starthp < 1) {starthp = 1;}
			mon.Health = starthp;
			mon.StartHealth = starthp  / G_SkillPropertyFloat(SKILLP_MonsterHealth);
		}
		if (endless_damagemult != 1)
		{
			double startdmg = mon.DamageMultiply * endless_damagemult;
			mon.DamageMultiply = startdmg;
		}
		if (endless_speedmult != 1.0)
		{
			mon.speedmult *= endless_speedmult;
		}
		
		//code for DI_Firestarter Passive Item.
		int firenum = 0;
		for (int i = 0; i < players.Size(); ++i) 
		{
			if (firenum >= 4) {firenum = 4; continue;}
			if (playeringame[i]) {firenum += players[i].mo.CountInv("DI_Firestarter");}
		}
		if (firenum > 0)
		{
			let firechance = 3 + (firenum * 3);
			if ((random(1, 20) <= firechance) || (mon.CheckRange(192) == false))
			{
				let firedmg = 4 + (firenum * 4);
				if (firedmg >= mon.Health) {firedmg = mon.Health - 1;}
				mon.A_DamageSelf(firedmg, "Fire");
			}
		}
		
		//code for DI_DeathMark passive item.
		int markednum = 0;
		for (int i = 0; i < players.Size(); ++i) 
		{
			if (markednum >= 3) {markednum = 3; continue;}
			if (playeringame[i]) {markednum += players[i].mo.CountInv("DI_DeathMark");}
		}
		if (markednum > 0)
		{
			if (random(1, 20) <= (markednum * 3))
			{
				//multiple death marks dont make the marks stronger, just more likely to appear.
				mon.A_GiveInventory("DI_DeathMark_Enemy", 1);
			}
		}
		
		//code for DI_Farsight passive item.
		int farnum = 0;
		for (int i = 0; i < players.Size(); ++i) 
		{
			if (farnum >= 5) {farnum = 5; continue;}
			if (playeringame[i]) {farnum += players[i].mo.CountInv("DI_Farsight");}
		}
		if (farnum > 0) {mon.A_GiveInventory("DI_Farsight_Enemy", farnum);}
	}
}