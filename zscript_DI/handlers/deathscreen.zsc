//zscript_DI/handlers/deathscreen.zsc

Class DeathscreenHandler : EventHandler
{
	ui DI_PlayerBase plr;
	ui bool IsDead;
	ui float DeathFade;
	ui int DeathTimer;
	ui float diedmove;
	ui int wavenum;
	ui int msgrng;
	ui bool unlockedscore;
	ui bool scoredone;
	ui int prevscore;
	
	override void InterfaceProcess(ConsoleEvent e)
	{
		if (e.Name == "newwave_ui")
		{
			wavenum = e.Args[0];
		}
	}

	override void UITick()
	{
		plr = DI_PlayerBase(players[consoleplayer].mo);
		if (!plr) {return;}
		if (plr.Health <= 0) {IsDead = true;}
		else {IsDead = false;}
		
		if (IsDead == true)
		{
			if (msgrng == 0)
			{
				msgrng = random[die](0, 100);
			}
			
			if (DeathFade < 1.0) {DeathFade += 0.01;}
			//else {DeathFade2 += 0.04;}
			++DeathTimer;
			if ((DeathTimer > 105) && (diedmove < 4.0))
			{
				float newmove = 0.02 + ((4.0 - diedmove) / 35);
				diedmove += newmove;
				if ((plr.ScoreUnlock() != "") && (!unlockedscore))
				{
					eventhandler.sendinterfaceevent(consoleplayer, plr.ScoreUnlock());
					unlockedscore = true;
				}
			}
			else if (diedmove > 4.0) {diedmove = 4.0;}
			else if (diedmove < 2.0) {diedmove = 2.0;}
		}
		else
		{
			DeathFade = 0.0;
			DeathTimer = 0;
			diedmove = 2.0;
		}
	}
	
	ui virtual int GetHighScore()
	{
		if (!plr) {return 999999999;}
		cvar highscores = cvar.findcvar("di_highscore");
		string fullscores = highscores.getstring();
		array<string> scorelines;
		fullscores.split(scorelines, ",", TOK_SKIPEMPTY);
		if (scorelines.size() < 1) {return 0;}
		string playername = plr.GetClassName();
		int currentscore;
		for (int i = 0; i < scorelines.size(); ++i)
		{
			array<string> currentline;
			scorelines[i].split(currentline, " ", TOK_SKIPEMPTY);
			if (currentline.size() != 3) 
			{
				//something has gone terribly wrong!
				console.printf("%s", "\caWARNING: Junk data was detected in the highscore CVAR!");
				continue;
			}
			else
			{
				if (currentline[0] != playername) {continue;}
				if (currentline[1] != Level.MapName) {continue;}
				int lsize = currentline[2].Length();
				if (currentline[2].Left(1) == "E")
				{
					string newcheck = currentline[2].Mid(1, lsize - 1);
					if (newcheck.ToInt(10) > currentscore) {currentscore = newcheck.ToInt(10);}
				}
				else 
				{
					string newcheck = currentline[2].Mid(0);
					if (newcheck.ToInt(10) > currentscore) {currentscore = newcheck.ToInt(10);}
				}
			}
		}
		return currentscore;
	}
	
	ui virtual void UpdateHighScore(int newscore, bool iseasy)
	{
		if (!plr) {return;}
		cvar highscores = cvar.findcvar("di_highscore");
		string fullscores = highscores.getstring();
		array<string> scorelines;
		fullscores.split(scorelines, ",", TOK_SKIPEMPTY);
		string playername = plr.GetClassName();
		int scoreposition = -1;
		for (int i = 0; i < scorelines.size(); ++i)
		{
			array<string> currentline;
			scorelines[i].split(currentline, " ", TOK_SKIPEMPTY);
			if (currentline.size() != 3) 
			{
				//something has gone terribly wrong!
				console.printf("%s", "\caWARNING: Junk data was detected in the highscore CVAR!");
				continue;
			}
			else
			{
				if (currentline[0] != playername) {continue;}
				if (currentline[1] != Level.MapName) {continue;}
				string easycheck = "";
				if (skill == 0) {easycheck = "E";}
				currentline[2] = string.format("%s%d", easycheck, newscore);
				scorelines[i] = string.format("%s %s %s", currentline[0], currentline[1], currentline[2]);
				scoreposition = i;
			}
		}
		if (scoreposition == -1)
		{
			string easycheck = "";
			if (skill == 0) {easycheck = "E";}
			string scoreinput = string.format("%s %s %s%d", playername, Level.MapName, easycheck, newscore);
			scorelines.push(scoreinput);
		}
		
		string newcvar = "";
		for (int i = 0; i < scorelines.size(); ++i)
		{
			newcvar.AppendFormat("%s,", scorelines[i]);
		}
		highscores.setstring(newcvar);
	}
	
	override void RenderOverlay(RenderEvent e)
	{
		if (plr && (IsDead == true))
		{
			let blackscreen = TexMan.CheckForTexture("textures/box/BLACK.png");
			Screen.DrawTexture(blackscreen, false,
				0, 0,
				DTA_DestWidth, Screen.GetWidth(),
				DTA_DestHeight, Screen.GetHeight(),
				DTA_Alpha, DeathFade
			);
			if (DeathTimer > 35)
			{
				string died = "DEATH IS INEVITABLE";
				if (plr.Score < 0) {died = "DEBT IS INEVITABLE";}
				else switch(msgrng)
				{
					case 1: died = "MEMENTO MORI"; break;
					case 2: died = "u ded lmao"; break;
					case 3: died = "rip bozo"; break;
					case 4: died = "better luck next time"; break;
					case 5: died = "unlucky"; break;
					case 6: died = "99% of players died here"; break;
					case 7: died = "your life has expired"; break;
				}
				int scaley = (bigfont.GetHeight() * (CleanYFac * 1.3)) / 2;
				Screen.DrawText(bigfont, Font.CR_BRICK,
					(Screen.GetWidth() / 2) - ((bigfont.StringWidth(died) / 2) * (CleanXFac * 1.3)),
					(Screen.GetHeight() / diedmove) - scaley,
					died,
					DTA_ScaleX, CleanXFac * 1.3,
					DTA_ScaleY, CleanYFac * 1.3
				);
			}
			if (DeathTimer > 155)
			{
				string died = string.format("Current Wave: \ck%d", wavenum);
				int scaley = (32 * (CleanYFac * 2)) / 2;
				Screen.DrawText(smallfont, Font.CR_WHITE,
					(Screen.GetWidth() / 2) - ((smallfont.StringWidth(died) / 2) * (CleanXFac * 1.3)),
					(Screen.GetHeight() / 2) - scaley,
					died,
					DTA_ScaleX, CleanXFac * 1.3,
					DTA_ScaleY, CleanYFac * 1.3
				);
			}
			if (DeathTimer > 170)
			{
				string died = string.format("\n\nEnemies Killed: \cr%d", plr.killcounter);
				int scaley = (32 * (CleanYFac * 2)) / 2;
				Screen.DrawText(smallfont, Font.CR_WHITE,
					(Screen.GetWidth() / 2) - ((smallfont.StringWidth(died) / 2) * (CleanXFac * 1.3)),
					(Screen.GetHeight() / 2) - scaley,
					died,
					DTA_ScaleX, CleanXFac * 1.3,
					DTA_ScaleY, CleanYFac * 1.3
				);
			}
			if (DeathTimer > 185)
			{
				string died = string.format("\n\n\n\nItems Bought: \cn%d", plr.buycounter);
				int scaley = (32 * (CleanYFac * 2)) / 2;
				Screen.DrawText(smallfont, Font.CR_WHITE,
					(Screen.GetWidth() / 2) - ((smallfont.StringWidth(died) / 2) * (CleanXFac * 1.3)),
					(Screen.GetHeight() / 2) - scaley,
					died,
					DTA_ScaleX, CleanXFac * 1.3,
					DTA_ScaleY, CleanYFac * 1.3
				);
			}
			if (DeathTimer > 200)
			{
				string died = string.format("\n\n\n\n\n\nMoney Spent: \cp$%d", plr.moneyspent);
				int scaley = (32 * (CleanYFac * 2)) / 2;
				Screen.DrawText(smallfont, Font.CR_WHITE,
					(Screen.GetWidth() / 2) - ((smallfont.StringWidth(died) / 2) * (CleanXFac * 1.3)),
					(Screen.GetHeight() / 2) - scaley,
					died,
					DTA_ScaleX, CleanXFac * 1.3,
					DTA_ScaleY, CleanYFac * 1.3
				);
			}
			if (DeathTimer > 215)
			{
				int worth = plr.Score;
				string dollar = "\cd$";
				if (worth < 0) {dollar = "\ca-$"; worth *= -1;}
				string died = string.format("\n\n\n\n\n\n\n\nCurrent Worth: %s%d", dollar, worth);
				int scaley = (32 * (CleanYFac * 2)) / 2;
				Screen.DrawText(smallfont, Font.CR_WHITE,
					(Screen.GetWidth() / 2) - ((smallfont.StringWidth(died) / 2) * (CleanXFac * 1.3)),
					(Screen.GetHeight() / 2) - scaley,
					died,
					DTA_ScaleX, CleanXFac * 1.3,
					DTA_ScaleY, CleanYFac * 1.3
				);
			}
			if (DeathTimer > 230)
			{
				int totalscore = plr.GetScore();
				string totalcolor = "\cf";
				if (totalscore < 0) {totalcolor = "\ca";}
				string died = string.format("\n\n\n\n\n\n\n\n\n\n%sFinal Rating: %d", totalcolor, totalscore);
				int scaley = (32 * (CleanYFac * 2)) / 2;
				Screen.DrawText(smallfont, Font.CR_WHITE,
					(Screen.GetWidth() / 2) - ((smallfont.StringWidth(died) / 2) * (CleanXFac * 1.3)),
					(Screen.GetHeight() / 2) - scaley,
					died,
					DTA_ScaleX, CleanXFac * 1.3,
					DTA_ScaleY, CleanYFac * 1.3
				);
			}
			if (DeathTimer > 245)
			{
				if (!scoredone)
				{
					prevscore = GetHighScore();
					if (plr.GetScore() > prevscore)
					{
						bool iseasy = false;
						if (skill == 0) {iseasy = true;}
						UpdateHighScore(plr.GetScore(), iseasy);
					}
					scoredone = true;
				}
				
				string totalcolor = "\ci";
				string newbest = "";
				if (plr.GetScore() > prevscore) {newbest = "\n\cv(New Best!)";}
				string died = string.format("\n\n\n\n\n\n\n\n\n\n\n\n%sPrevious Score: %d%s", totalcolor, prevscore, newbest);
				int scaley = (32 * (CleanYFac * 2)) / 2;
				Screen.DrawText(smallfont, Font.CR_WHITE,
					(Screen.GetWidth() / 2) - ((smallfont.StringWidth(died) / 2) * (CleanXFac * 1.3)),
					(Screen.GetHeight() / 2) - scaley,
					died,
					DTA_ScaleX, CleanXFac * 1.3,
					DTA_ScaleY, CleanYFac * 1.3
				);
			}
		}
	}
}