extend class DIHandler
{
	virtual void CoinDropper(WorldEvent e)
	{
		DI_Drop dropper = DI_Drop(e.Thing);
		int combo;
		DI_PlayerBase plr;
		
		if (e.Thing.target is "DI_PlayerBase")
		{
			plr = DI_PlayerBase(dropper.target);
			if (dropper.coinnum > -1) 
			{
				combo = dropper.coinnum;
				if ((dropper.di_notweapon == false) && (plr.CanFreshKill()))
				{
					let diwep = DI_Weapon(plr.player.ReadyWeapon);
					combo += diwep.wpn_freshbonus;
				}
			}
			else if (dropper.di_notweapon == true) {combo = plr.combonum;}
			else {combo = plr.CountInv("DI_TokenCombo");}
		}
		else {combo = 1;}
		
		for (int i = 0; i < combo; ++i)
		{
			dropper.A_SpawnItemEx(dropper.coindrop, random(-8, 8), random(-8, 8), random(8, 16), random(-2, 2), random(-2, 2), random(6, 10), 0, SXF_TRANSFERPOINTERS | SXF_NOCHECKPOSITION);
		}
		
		if ((plr) && (dropper.di_notweapon == false))
		{
			if (plr.CanFreshKill()) {plr.IsFreshKill();}
		}
	}
	
	virtual void GivePlayerCombo(WorldEvent e, bool notweapon = false)
	{
		for (int i = 0; i < 8; ++i)
		{
			if (playeringame[i])
			{
				bool iskiller = false;
				DI_PlayerBase plr = DI_PlayerBase(e.Thing.target);
				DI_PlayerBase cplr = DI_PlayerBase(players[i].mo);
					
				if (plr && cplr)
				{
					if (cplr == plr) {iskiller = true;}
				
					int compoint = 120 + e.Thing.default.Health;
					int fakescore = plr.score;
					if (fakescore < 0) {fakescore = 0;}
					if ((iskiller == true) && (plr.CanFreshKill()) && (notweapon == false)) {compoint += (30 * (plr.CountInv("DI_TokenCombo") + 2)) + fakescore;}
					cplr.GiveInventory("DI_TokenComboTimer", compoint);
					if (iskiller == true) {plr.DIMonsterKilled(notweapon);}
				}
			
			}
		}
	}
	
	virtual void BoxDrops(WorldEvent e, DI_PlayerBase plr, bool notweapon = false)
	{
		if ((plr.boxammonum > 0) && (plr.CanFreshKill() == true))
		{
			e.Thing.A_SpawnItemEX("BoxAmmo", random(-8, 8), random(-8, 8), random(8, 16), random(-2, 2), random(-2, 2), random(6, 10), 0, SXF_TRANSFERPOINTERS | SXF_NOCHECKPOSITION);
		}
		if ((plr.CountInv("Glowstick") > 0) && (notweapon == false))
		{
			if ((plr.player.ReadyWeapon is "Glowstick") && (plr.health < plr.DIMaxHealth()))
			{
				int glowamount = 1;
				if (plr.health * 2 < plr.DIMaxHealth()) {++glowamount;}
				if (plr.health * 4 < plr.DIMaxHealth()) {++glowamount;}
				for (int i = 0; i < glowamount; ++i)
				{
					e.Thing.A_SpawnItemEx("GlowstickHealthDrop", random(-8, 8), random(-8, 8), random(8, 16), random(-2, 2), random(-2, 2), random(6, 10), 0, SXF_TRANSFERPOINTERS | SXF_NOCHECKPOSITION);
				}
			}
			if (plr.CanFreshKill() == true)
			{
				e.Thing.A_SpawnItemEx("GlowstickAmmoDrop", random(-8, 8), random(-8, 8), random(8, 16), random(-2, 2), random(-2, 2), random(6, 10), 0, SXF_TRANSFERPOINTERS | SXF_NOCHECKPOSITION);
			}
		}
	}
	
	virtual void BonusArmorDrop(WorldEvent e, DI_PlayerBase plr)
	{
		int armorchance = plr.CountInv("DI_BonusArmor");
		
		if (random(1, 3) <= armorchance)
		{
			e.Thing.A_SpawnItemEx("DI_BonusArmorPickup", random(-8, 8), random(-8, 8), random(8, 16), random(-2, 2), random(-2, 2), random(6, 10), 0, SXF_TRANSFERPOINTERS | SXF_NOCHECKPOSITION);
		}
	}
	
	virtual void BonusAmmoGiver(WorldEvent e, DI_PlayerBase plr)
	{
		let ammogivenum = plr.CountInv("DI_LeadRecycling");
		if ((ammogivenum > 0) && (ammogivetick == false))
		{
			let curwpn = DI_Weapon(plr.player.ReadyWeapon);
			let curammo1 = curwpn.AmmoType1;
			let curammo2 = curwpn.AmmoType2;
			if (curammo1 && (curwpn.wpn_dontgiveammo1 == false))
			{
				plr.GiveInventory(curammo1, ammogivenum);
			}
			if (curammo2 && (curwpn.wpn_dontgiveammo2 == false))
			{
				plr.GiveInventory(curammo2, ammogivenum);
			}
			ammogivetick = true; //only give 1 ammo per tick.
		}
	}
	
	virtual void ToastDrop(WorldEvent e, DI_PlayerBase plr)
	{
		int toastnum = plr.CountInv("DI_Toaster");
		if (toastnum > 0)
		{
			if (random(1, 4) <= toastnum)
			{
				e.Thing.A_SpawnItemEX("DI_Toast", random(-8, 8), random(-8, 8), random(8, 16), random(-2, 2), random(-2, 2), random(6, 10), 0, SXF_TRANSFERPOINTERS | SXF_NOCHECKPOSITION);
			}
		}
	}
}