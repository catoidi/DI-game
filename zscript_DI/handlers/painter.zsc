//zscript_DI/handlers/painter.zsc

class PaintHandler : EventHandler
{
	Array<String> PaintLines;
	Array<String> PaintNames;
	Array<Int> PaintChance;
	Array<Double> PaintScale;
	
	override void WorldLoaded(WorldEvent e)
	{
		PaintLoader(e);
	}
	
	override void WorldThingSpawned(WorldEvent e)
	{
		if (e.Thing != null)
		{
			if (e.Thing.GetClassName() == "Painting") {PaintController(e);}
		}
	}

	static const string alphabet[] = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "[", "]"}; //all characters you can use sprite frames for, excluding \.
	static const string rotations[] = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G"}; 
	
	void PaintController(WorldEvent e)
	{	
		string fullpainting;
		string paintsprite;
		string paintframe;
		string paintrotation;
	
		//Choosing a Painting...
		int painttries = 0;
		while (painttries < 32) //cap attempts to 32 tries.
		{
			int paintnum = random(0, (PaintNames.Size() - 1));
			fullpainting = PaintNames[paintnum]; //go ahead and define selected painting to the string, just in case this thing fails 32 times in a row.
			if (random(0, PaintChance[paintnum]) == 0) {painttries = 32;} //if Painting's random chance lands on 0, go ahead and choose this painting.
			else {++painttries;} //otherwise, try again.
		}
		paintsprite = fullpainting.Mid(0, 4);
		paintframe = fullpainting.Mid(4, 1);
		paintrotation = fullpainting.Mid(5, 1);
		
		//Setting the painting's sprite...
		e.Thing.sprite = e.Thing.GetSpriteIndex(paintsprite);
		
		//Setting the painting's frame...
		for (int i = 0; i < alphabet.Size(); i++) 
		{
			if (paintframe == alphabet[i]) {e.Thing.frame = i;}
		}
		
		//Setting the painting's rotation...
		for (int i = 0; i < rotations.Size(); i++) 
		{			
			if (paintrotation == rotations[i]) 
			{
				switch (i)
				{
					case 0: e.Thing.SpriteAngle = 180; break;
					case 1: e.Thing.SpriteAngle = 180; break;
					case 2: e.Thing.SpriteAngle = 225; break;
					case 3: e.Thing.SpriteAngle = 270; break;
					case 4: e.Thing.SpriteAngle = 315; break;
					case 5: e.Thing.SpriteAngle = 0; break;
					case 6: e.Thing.SpriteAngle = 45; break;
					case 7: e.Thing.SpriteAngle = 90; break;
					case 8: e.Thing.SpriteAngle = 135; break;
					case 9: e.Thing.SpriteAngle = 202.5; break;
					case 10: e.Thing.SpriteAngle = 247.5; break;
					case 11: e.Thing.SpriteAngle = 292.5; break;
					case 12: e.Thing.SpriteAngle = 337.5; break;
					case 13: e.Thing.SpriteAngle = 22.5; break;
					case 14: e.Thing.SpriteAngle = 67.5; break;
					case 15: e.Thing.SpriteAngle = 112.5; break;
					case 16: e.Thing.SpriteAngle = 157.5; break;
				}
			}
		}
		
		//Setting the painting's size...
		double currentscale = 1.0;
		for (int i = 0; i < PaintScale.Size(); i++) {if (fullpainting == PaintNames[i]) {currentscale = PaintScale[i];}}
		e.Thing.Scale.X *= currentscale;
		e.Thing.Scale.Y *= currentscale;
	}
	
	void PaintLoader(WorldEvent e)
	{
		//ensure there is nothing inside these arrays before proceeding.
		PaintLines.Clear();
		PaintNames.Clear();
		PaintChance.Clear();
		PaintScale.Clear();
		
		int DropMode = 0; //if 1, add to player list. if 2, add to ammo list.
		
		int ThisLump = Wads.FindLump("BOXPAINT", 0, Wads.ANYNAMESPACE);
		int NextLump = Wads.FindLump("BOXPAINT", ThisLump + 1, Wads.ANYNAMESPACE);
		
		while (ThisLump != -1)
		{
			Wads.ReadLump(ThisLump).Split(PaintLines, "\n", TOK_SKIPEMPTY);
			ThisLump = NextLump;
			NextLump = Wads.FindLump("BOXPAINT", ThisLump + 1, 1);
		}
		
		for (int i = 0; i < PaintLines.Size(); i++)
		{
			string currentline = PaintLines[i];
			int currentlength = currentline.Length();
			array<string> fixedline;
			array<string> splitline;
			if (currentline.Left(2) == ">>") {continue;} //dont bother reading the next lines of code if it's a comment (starts with ">>")
			if (currentline == "") {continue;} //skip line if it is empty
			
			if (currentline.Left(11) == "Painting = ")
			{
				currentline = currentline.Mid(11, currentlength);
				
				currentline.Split(fixedline, ";"); //this fixes that strange space that appears at the end of each line.
				fixedline[0].Split(splitline, ", ");
				
				let PaintCap = splitline[1].MakeLower();
				if ((PaintCap == level.MapName) || (PaintCap == "*")) //run this code if 2nd argument is "*" or the name of the current level.
				{
					let PaintPriority = splitline[3].ToInt(10);
					if (PaintPriority > 64) {PaintPriority = 64;} //cap priority to 64.
					for (int j = 0; j < PaintPriority; j++) //run this code multiple times based on the number from 4th argument.
					{
						PaintNames.Push(splitline[0]); //the full sprite name of the Painting.
						let PaintInt = splitline[2].ToInt(10);
						PaintChance.Push(PaintInt); //the chance of this specific Painting not being chosen.
						let PaintDouble = splitline[4].ToDouble();
						PaintScale.Push(PaintDouble); //the scale of the Painting.
						//double realchance = (100.0 / (PaintInt + 1.0));
						//console.printf("\ctName = '%s', \coSize = '%.2f', \ckChance = %.2f%%.", splitline[0], PaintDouble, realchance);
					}
				}
			}
			else
			{
				console.printf("\cgBOXPAINT ERROR - LINE #%d SHOULD NOT BE HERE:\n'%s'", i, currentline);
			}
		}
		//console.printf("'%d' paintings loaded.", PaintNames.Size());
		//console.printf("current level is '%s'.", level.MapName);
	}
}