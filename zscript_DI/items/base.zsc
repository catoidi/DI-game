//zscript_DI/items/base.zsc

class DIPassiveInventory : Inventory 
{
	//this is used for tracking purposes for the Item HUD.
	bool dipassive_hidden; //if enabled, this item is not shown on the item hud.
	
	DI_PlayerBase plr;
	DI_Weapon wpn;
	
	property DIHidden: dipassive_hidden;
	
	default
	{
		+BRIGHT;
		+FLOATBOB;
	}

	//Called in "AttachToOwner".
	virtual int ItemPriority() {return 0;} //Used for determining which passive item's functions are ran first. Set to a high positive number to ensure your item's code is ran after everything else.
	
	override void AttachToOwner(Actor other)
	{
		Super.AttachToOwner(other);
		
		if (other is "DI_PlayerBase")
		{
			let plr = DI_PlayerBase(other);
			if (plr.knownpassives.Find(GetClassName()) == plr.knownpassives.Size())
			{
				//plr.knownpassives.Push(GetClassName());
				int insertnum = -1;
				for (int i = 0; i < plr.knownpassives.Size(); ++i)
				{
					let curitem = DIPassiveInventory(plr.FindInventory(plr.knownpassives[i]));
					if (!curitem) {continue;}
					if (ItemPriority() >= curitem.ItemPriority()) {continue;}
					else
					{
						insertnum = i;
						i = plr.knownpassives.Size();
					}
				}

				if (insertnum == -1) {plr.knownpassives.Push(GetClassName());}
				else {plr.knownpassives.Insert(insertnum, GetClassName());}
			}
		}
	}
	
	override void DetachFromOwner()
	{
		Super.DetachFromOwner();
		
		if (plr)
		{
			int spot = plr.knownpassives.Find(GetClassName());
			if (spot != plr.knownpassives.Size()) {plr.knownpassives.Delete(spot);} //forget about it!!!!!!
		}
	}
	
	override void DoEffect()
	{
		Super.DoEffect();
		
		if (owner is "DI_PlayerBase")
		{
			plr = DI_PlayerBase(owner);
			if (plr.player.ReadyWeapon is "DI_Weapon")
			{
				wpn = DI_Weapon(plr.player.ReadyWeapon);
			}
		}
	}
	
	//Stat Upgrades.
	virtual int GiveExtraCoin() {return 0;} //Makes all enemies drop more coins.
	virtual int GiveFreshBonus() {return 0;} //Increases coin drops from fresh weapon bonus.
	virtual int GiveFreshCharge() {return 0;} //Makes fresh bonus recharge faster.
	virtual int GiveBaseDamage() {return 0;} //Adds to the current weapon, before multipliers are applied.
	virtual double GiveDamageMult() {return 0.0;} //Multiplies the weapon's base damage.
	virtual double GiveAccuracy() {return 0.0;} //Lower numbers improve base acccuracy, and vice versa.
	virtual double GiveRecoil() {return 0.0;} //Increases accuracy loss from each attack.
	virtual double GiveRecoilRecover() {return 0.0;} //Allows weapon to recover from recoil faster.
	virtual int GiveProjectiles() {return 0;} //Increases the number of attacks for all hitscan/projectile-based weapons.
	virtual double GiveWeaponSpeed() {return 0.0;} //Lower numbers improve weapon's animation speed at diminishing rates, and vice versa.
	virtual double GiveFirerate() {return 0.0;} //Weapon Speed again, but only while the weapon is being fired.
	virtual double GiveReloadSpeed() {return 0.0;} //Weapon Speed again, but only while the weapon is being reloaded.
	virtual int GiveAmmoUse1() {return 0;} //Control how much ammo is required to fire the current weapon. Is hard-capped to never exceed the max ammo.
	virtual int GiveAmmoUse2() {return 0;} //2nd ammo control
	virtual int GiveMaxAmmo1() {return 0;} //Controls the max primary ammo. Can't go below the minimum ammo requirement for ammo type.
	virtual int GiveMaxAmmo2() {return 0;} //Same as above, but for secondary ammo.
	virtual double GivePlayerSpeed() {return 0.0;} //Adds movement speed to the player. Has a lower cap of 0.1.
	virtual double GiveComboDrain() {return 1.0;} //Multiplies the speed of the combo drain.
	virtual double GiveBulletSize() {return 0.0;} //change projectile hitbox size.

	//Called by thebrain handler's monster code.
	virtual string, int GiveEnemyItem() {return "", 0;} //Specify an inventory item and its quantity to make enemies spawn with.
	virtual string, int, int GiveEnemyDrop(DI_Monster mon) {return "", 0, 0;} //Add new drops to killed enemies. Outputs item name, quantity, and failchance (like A_SpawnItemEX).
	
	//Functions activated by scripts or events. Returns true if item is activated.
	virtual bool EnterWave() {return false;} //called once a new wave is started.
	virtual bool EnterShop() {return false;} //called once the player returns to the shop. this is called right before rental items are removed. if you wish for your code to run after rentals are returned, have this function call your code after 1 tic.
}

class DIPowerup : DIPassiveInventory
{
	//behaves exactly like a passive, but removes 1 of itself every second.

	int poweruptimer;

	override void DoEffect()
	{
		Super.DoEffect();
		
		if (plr && (plr.isFrozen() == false))
		{
			++poweruptimer;
			if (poweruptimer >= 35)
			{
				plr.A_TakeInventory(GetClassName(), 1);
				poweruptimer = 0;
			}
		}
	}
}

class DIBundle : Inventory
{
	//instantly gives the player a set amount of items on pickup.
	//if the item is meant to be permanent, will remove itself and add the corresponding item as permanent to the player.
	
	int bundleamount;
	string bundleitem;
	
	property BundleAmount : bundleamount;
	property BundleItem : bundleitem;
	
	Default
	{
		DIBundle.BundleAmount 1;
	}
	
	override void DoEffect()
	{
		Super.DoEffect();
		
		if (owner is "DI_PlayerBase")
		{
			let plr = DI_PlayerBase(owner);
			let itemnum = plr.CountInv(self.GetClassName());
			
			if (plr.GetPermaItemAmount(self.GetClassName()) > 0)
			{
				plr.BuyPermaItem(bundleitem, BundleAmount * itemnum);
				plr.BuyPermaItem(self.GetClassName(), itemnum * -1);
			}
			
			plr.GiveInventory(bundleitem, BundleAmount);
			plr.TakeInventory(self.GetClassName(), 1);
		}
	}
}