//zscript_DI/items/passives/fakestatups.zsc

//the code for these items isn't here, but within the player actor itself.
//for compatibility purposes, this is the WRONG way to create new items.

Class DI_KnifeBullets : DIPassiveInventory
{
	Default
	{
		Tag "Knife Bullets";
		Inventory.Icon "POWRA0";
		Inventory.PickupMessage "Knife Bullets Acquired! (+2 Base DMG, -15% Firerate)";
		Inventory.MaxAmount 5;
	}
	
	override int GiveBaseDamage()
	{
		if (!plr) {return 0;}
		return plr.countinv(GetClassName()) * 2;
	}

	override double GiveFirerate()
	{
		if (!plr) {return 0;}
		return plr.countinv(GetClassName()) * 0.15;
	}
	
	States
	{
		Spawn:
			POWR A -1;
			Stop;
	}
}

Class DI_Starfruit : DIPassiveInventory
{
	Default
	{
		Tag "Starfruit";
		Inventory.Icon "POWRF0";
		Inventory.PickupMessage "Starfruit Acquired! (Combo-based chance to gain +20% DMG.)";
		Inventory.MaxAmount 10;
	}
	
	override double GiveDamageMult()
	{
		if (!plr) {return 0;}
		if (random(plr.combonum, 9) == 9)
		{
			return 0.2 * plr.CountInv(GetClassName());
		}
		else {return 0;}
	}
	
	States
	{
		Spawn:
			POWR F -1;
			Stop;
	}
}

Class DI_ExtraCoinGiver : DIPassiveInventory
{
	Default
	{
		Tag "9 Dollar Bill";
		Inventory.Icon "POWRB0";
		Inventory.PickupMessage "9 Dollar Bill acquired! (Combo-based chance to make enemies drop +1 coin.)";
		Inventory.MaxAmount 3;
	}
	
	override int GiveExtraCoin()
	{
		if (!plr) {return 0;}
		if (random(plr.GetCombo(), 9) != 9) {return 0;}
		return plr.CountInv(GetClassName());
	}
	
	States
	{
		Spawn:
			POWR B -1;
			Stop;
	}
}

Class DI_FreshBonusGiver : DIPassiveInventory
{
	Default
	{
		Tag "Fresh Bonus +";
		Inventory.Icon "POWRC0";
		Inventory.PickupMessage "Freshness Increased! (+1 coin per Fresh Weapon Bonus)";
		Inventory.MaxAmount 3;
	}
	
	override int GiveFreshBonus()
	{
		if (!wpn || !plr) {return 0;}
		return (plr.CountInv(GetClassName()));
	}
	
	States
	{
		Spawn:
			POWR C -1;
			Stop;
	}
}

Class DI_FreshBonusCharger : DIPassiveInventory
{
	Default
	{
		Tag "Fast Fresh";
		Inventory.Icon "POWRL0";
		Inventory.PickupMessage "Fast Fresh Acquired! (Shortens Fresh Weapon Cooldown)";
		Inventory.MaxAmount 5;
	}
	
	override int GiveFreshCharge()
	{
		if (!plr) {return 0;}
		return plr.CountInv(GetClassName());
	}
	
	States
	{
		Spawn:
			POWR L -1;
			Stop;
	}
}

Class DI_TooManyBullets : DIPassiveInventory
{
	Default
	{
		Tag "TooManyBullets";
		Inventory.Icon "POWRH0";
		Inventory.PickupMessage "Too Many Bullets Acquired! (Projectiles x2, -35% Reload and DMG)";
		Inventory.MaxAmount 3;
	}
	
	override int GiveProjectiles()
	{
		if (!wpn || !plr) {return 0;}
		return (plr.CountInv(GetClassName()) * wpn.default.wpn_projectiles);
	}
	
	override double GiveReloadSpeed()
	{
		if (!plr) {return 0;}
		return plr.CountInv(GetClassName()) * 0.35;
	}
	
	override double GiveDamageMult()
	{
		if (!plr) {return 0;}
		return plr.CountInv(GetClassName()) * -0.35;
	}
	
	override double GiveAccuracy()
	{
		if (!plr) {return 0;}
		return plr.CountInv(GetClassName()) * 3;
	}
	
	States
	{
		Spawn:
			POWR H -1;
			Stop;
	}
}

Class DI_LongMagazine : DIPassiveInventory
{
	Default
	{
		Tag "Long Magazine";
		Inventory.Icon "POWRI0";
		Inventory.PickupMessage "Long Magazine Acquired! (+50% Max Ammo, but reduces reload speed.)";
		Inventory.MaxAmount 5;
	}
	
	override int GiveMaxAmmo1()
	{
		if (!wpn || !plr) {return 0;}
		if (!wpn.Ammo1) {return 0;}
		int itemnum = plr.CountInv(GetClassName());
		int returnvalue = itemnum * (wpn.Ammo1.Default.MaxAmount / 2);
		if (returnvalue < itemnum) {returnvalue = itemnum;}
		return returnvalue;
	}
	
	override int GiveMaxAmmo2()
	{
		if (!wpn || !plr) {return 0;}
		if (!wpn.Ammo2) {return 0;}
		int itemnum = plr.CountInv(GetClassName());
		int returnvalue = itemnum * (wpn.Ammo2.Default.MaxAmount / 2);
		if (returnvalue < itemnum) {returnvalue = itemnum;}
		return returnvalue;
	}
	
	override double GiveReloadSpeed()
	{
		if (!wpn || !plr) {return 0;}
		if (!wpn.Ammo1 && !wpn.Ammo2) {return 0;}
		else return plr.CountInv(GetClassName()) * 0.25;
	}
	
	States
	{
		Spawn:
			POWR I -1;
			Stop;
	}
}

Class DI_BulletMitosis : DIPassiveInventory
{
	//gives +1 projectile, but reduces accuracy by 3.
	Default
	{
		Tag "Bullet Mitosis";
		Inventory.Icon "POWRG0";
		Inventory.PickupMessage "Bullet Mitosis Acquired! (+1 Projectile, +1 Ammo Consumption.)";
		Inventory.MaxAmount 3;
	}

	int returnvalue;

	override void DoEffect()
	{
		Super.DoEffect();
		if (wpn) 
		{
			returnvalue = owner.CountInv(GetClassName());
			if (returnvalue > wpn.maxammouse) {returnvalue = wpn.maxammouse;};
		}
	}
	
	override int GiveProjectiles()
	{
		if (!wpn) {return 0;}
		return returnvalue;
	}
	
	override int GiveAmmoUse1()
	{
		if (!wpn) {return 0;}
		if (wpn.wpn_dontgiveammo1) {return 0;}
		return returnvalue;
	}
	
	override int GiveAmmoUse2()
	{
		if (!wpn) {return 0;}
		if (wpn.wpn_dontgiveammo2) {return 0;}
		return returnvalue;
	}
	
	override void Tick()
	{
		super.tick();
		
		if (plr && (plr.CountInv(GetClassName()) >= 3))
		{
			eventhandler.SendInterfaceEvent(consoleplayer, "diunlock_di_unlock_item_toomanybullets");
		}
	}
	
	States
	{
		Spawn:
			POWR G -1;
			Stop;
	}
}

Class DI_PainStar : DIPassiveInventory
{
	Default
	{
		Tag "Pain Star";
		Inventory.Icon "POWRJ0";
		Inventory.PickupMessage "Pain Star Acquired! (+5 DMG, decreases with high combos.)";
		Inventory.MaxAmount 3;
	}
	
	override int GiveBaseDamage()
	{
		if (!plr) {return 0;}
		int painstarnum = plr.CountInv("DI_PainStar") * 6;
		painstarnum -= plr.CountInv("DI_PainStar") * plr.combonum;
		if (painstarnum < 0) {painstarnum = 0;}
		return painstarnum;
	}
	
	States
	{
		Spawn:
			POWR J -1;
			Stop;
	}
}

Class DI_Gunslinger : DIPassiveInventory
{
	Default
	{
		Tag "Gunslinger";
		Inventory.Icon "POWRK0";
		Inventory.PickupMessage "Gunslinger Acquired! (Gain +1 DMG for every weapon you own.)";
		Inventory.MaxAmount 3;
	}
	
	override int GiveBaseDamage()
	{
		if (!plr) {return 0;}
		return plr.weaponnum * plr.CountInv(GetClassName());
	}
	
	States
	{
		Spawn:
			POWR K -1;
			Stop;
	}
}