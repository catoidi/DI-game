//zscript_DI/items/passives/toaster.zsc

Class DI_Toaster : DIPassiveInventory
{
	Default
	{
		Tag "Toaster";
		Inventory.Icon "POW1P0";
		Inventory.PickupMessage "Toaster Acquired! (Spawns a toaster that passively creates Toast. Toast grants +4 Regen. Gain +20% Firerate while regen is active.)";
		Inventory.MaxAmount 4;
	}
	
	int wavetime;
	
	DI_Toaster_Object toaster;
	
	override void DoEffect()
	{
		Super.DoEffect();
		
		if (plr)
		{
			if (plr.inwave)
			{
				++wavetime;
				if ((wavetime > 35) && !toaster)
				{
					bool spawned;
					actor creature;
					[spawned, creature] = plr.A_SpawnItemEX("DI_Toaster_Object", plr.Radius + 32, 0, 32);
					if (creature)
					{
						toaster = DI_Toaster_Object(creature);
						toaster.plr = plr;
						toaster.A_SpawnItemEX("TeleportFog", flags: SXF_NOCHECKPOSITION);
					}
				}
				else if (toaster)
				{
					plr.SetInventory("DI_Toast_Powerup", plr.CountInv("DI_Regen"));
				}
			}
		}
	}
	
	States
	{
		Spawn:
			POW1 P -1;
			Stop;
	}
}

Class DI_Toaster_Object : DI_Actor
{
	DI_PlayerBase plr;
	bool toastin;
	int killedmon;
	
	Default
	{
		Height 24;
		Radius 16;
		+MOVEWITHSECTOR;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		ChangeTID(7499);
		A_AttachLightDef("glower", "GLOWWHITE");
	}
	
	override void Tick()
	{
		Super.Tick();
		
		if (!Level.IsFrozen())
		{
			if (toastin)
			{
				A_StartSound("toast2", CHAN_BODY, CHANF_LOOPING);
				ToastSmoke();
			}
		}
	}
	
	virtual void ToastSmoke()
	{
		if (random(1, 10) == 1)
		{
			A_SpawnParticleEX("White", TexMan.CheckForTexture("SMOKA0"), STYLE_NONE, SPF_ROLL, 70, 12, xoff: frandom(-4.0, 4.0), yoff: frandom(-4.0, 4.0), zoff: 12.0, accelz: 0.25, startalphaf: 0.25, startroll: random(0, 359));
		}
	}
	
	action void SpawnToast()
	{
		invoker.toastin = false;
		A_StartSound("toast3", CHAN_BODY);
		int toasts = invoker.plr.CountInv("DI_Toaster");
		int maxtoasts = Level.Killed_Monsters - invoker.killedmon;
		if (toasts > maxtoasts) {toasts = maxtoasts;}
		for (int i = 0; i < toasts; ++i)
		{
			int failure = 192;
			if (i == 0) {failure = 0;}
			A_SpawnItemEX("DI_Toast", 0, 0, 12, frandom(-1, 1), frandom(-1, 1), random(8, 16), flags: SXF_NOCHECKPOSITION, failchance: failure); 
		}
	}
	
	States
	{
		Spawn:
			POW1 P 30;
			//start toastin...
			POW3 G 30 A_StartSound("toast1", CHAN_AUTO);
			POW3 G 1 
			{
				invoker.toastin = true;
				A_SetTics(random(120, 320));
			}
			//toastin done...
			POW3 F 30 SpawnToast();
			POW3 F 1 
			{
				if (plr)
				{
					if ((plr.health + (plr.countinv("DI_Regen") * 2)) >= plr.DIMaxHealth()) {return ResolveState(null);}
				}
				if (invoker.killedmon < Level.Killed_Monsters)
				{
					invoker.killedmon = Level.Killed_Monsters;
					return ResolveState("Spawn");
				}
				return ResolveState(null);
			}
			Wait;
	}
}

Class DI_Toast : Inventory
{	
	Default
	{
		Tag "Toast";
		Height 8;
		Radius 4;
		Inventory.Icon "POW1Q0";
		Inventory.PickupMessage "Toast Acquired!";
		+BRIGHT;
		+FLOATBOB;
		+Inventory.AUTOACTIVATE;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		ChangeTID(7499);
	}

	override bool Use(bool pickup)
	{
		if (owner) {owner.GiveInventory("DI_Regen", 4);}
		return true;
	}
	
	States
	{
		Spawn:
			POW1 Q 140;
			POW1 Q 105 A_FadeOut(0.25);
			Wait;
	}
}

Class DI_Toast_Powerup : DIPowerup
{
	override double GiveFirerate() 
	{
		if (!plr) {return 0.0;}
		return -0.2 * plr.CountInv("DI_Toaster");
	}
	
	Default
	{
		Tag "\cvToast (Powerup)";
		Inventory.Icon "POW1U0";
		Inventory.MaxAmount 999;
	}
	
	States
	{
		Spawn:
			POW1 U -1;
			Stop;
	}
}