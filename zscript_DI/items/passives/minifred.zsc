//zscript_DI/items/passives/minifred.zsc

Class DI_MiniFred : DIPassiveInventory
{
	Default
	{
		Tag "Mini Fred";
		Inventory.Icon "POW1N0";
		Inventory.PickupMessage "Mini Fred Acquired! (Getting fresh kills will spawn a friendly fred to assist you.)";
		Inventory.MaxAmount 10;
	}
	
	Array<DI_MiniFred_Actor> freds;
	
	bool freefred;
	
	virtual void FredDead(DI_MiniFred_Actor deadfred)
	{
		int frednum = freds.Find(deadfred);
		if (frednum != freds.Size())
		{
			freds.Delete(frednum);
		}
	}
	
	virtual void SpawnFred()
	{
		if (freds.Size() < amount)
		{
			string fredtype = "DI_MiniFred_Actor";
			
			if (frandom(1.0, 20.0) <= sqrt(amount)) {fredtype = "DI_MiniFred_Actor2";}
			
			actor thing;
			bool check;
			[check, thing] = plr.A_SpawnItemEX(fredtype, flags: SXF_NOCHECKPOSITION);
			
			if (thing)
			{
				let newfred = DI_MiniFred_Actor(thing);
				newfred.plr = plr;
				newfred.tracker = self;
				
				freds.Push(newfred);
			}
		}
	}
	
	override void DoEffect()
	{
		Super.DoEffect();
		
		if (plr && !Level.IsFrozen())
		{
			if (plr.JustKilled)
			{
				SpawnFred();
			}
			else if (!freefred)
			{
				SpawnFred();
				freefred = true;
			}
		}
	}
	
	States
	{
		Spawn:
			POW1 N -1;
			Stop;
	}
}

Class DI_MiniFred_Actor : DI_Actor
{
	Default
	{
		Speed 3;
		Health 150;
		Radius 9;
		Height 20;
		Scale 0.5;
		BloodColor "Red";
		BloodType "DI_Blood_Mini";
		PainSound "dipain2";
		DeathSound "dipain";
		Tag "Mini Fred";
		DI_Actor.NoDrops true;
		+SHOOTABLE;
		+FRIENDLY;
	}
	
	DI_PlayerBase plr;
	DI_MiniFred tracker;
	bool trackfail;
	int teletime;
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if (plr == DI_PlayerBase(other)) {return false;}
		if (other.bFRIENDLY == true) {return false;}
		
		return Super.CanCollideWith(other, passive);
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		A_AttachLightDef("glower", "GLOWWHITE");
		
		if (!tracker) {trackfail = true;}
	}
	
	override void Tick()
	{
		Super.Tick();
		
		if (!tracker && !trackfail)
		{
			A_Die();
			trackfail = true;
		}
		
		if (level.IsFrozen() == false)
		{
			++teletime;
			if (teletime >= 35)
			{	
				if (Distance3D(Actor(plr)) >= 512)
				{
					SetOrigin(plr.Pos, false);
					A_ClearTarget();
				}
				
				teletime = 0;
			}
		}
	}
	
	States
	{
		Spawn:
			FRED A 0 NoDelay A_FadeOut(0.9);
			#### ######## 1 A_FadeIn(0.1);
			#### # 10 A_Look;
			Wait;
		See:
			#### AABB 1 A_Chase;
			Loop;
		Melee:
			#### # 0 
			{
				A_FaceTarget();
				A_CustomMeleeAttack(30, "melee", "whiff", "Melee", true);
				A_SpawnItemEX("Fred_Slash_Mini", 6, 0, 9);
				A_DIScale(0.1, -0.1);
			}
			#### # 15;
			#### # 0 A_DIScale(-0.1, 0.1);
			Goto See;
		Pain:
			#### # 10 A_Pain();
			Goto See;
		Death:
			#### # 0
			{
				if (invoker.tracker) {invoker.tracker.FredDead(invoker);}
				A_DIDie();
			}
			#### # 1 
			{
				A_DIScale(1.01, 0.95, true);
				A_FadeOut(0.03);
			}
			Wait;
	}
}

Class Fred_Slash_Mini : Fred_Slash
{
	Default
	{
		Scale 0.5;
	}
}

Class Fred_Slash2_Mini : Fred_Slash2
{
	Default
	{
		Scale 0.5;
	}
}

Class DI_Blood_Mini : DI_Blood
{
	Default
	{
		Scale 0.3;
	}
}

Class DI_MiniFred_Actor2 : DI_MiniFred_Actor
{
	Default
	{
		Speed 9;
		Health 400;
		Tag "Mini Fiendish Fred";
	}

	States
	{
		Spawn:
			FRED D 0 NoDelay A_FadeOut(0.9);
			#### ######## 1 A_FadeIn(0.1);
			#### # 10 A_Look;
			Wait;
		See:
			#### DDEE 1 A_Chase;
			Loop;
		Melee:
			#### # 0 
			{
				A_FaceTarget();
				A_CustomMeleeAttack(60, "melee", "whiff", "Melee", true);
				A_SpawnItemEX("Fred_Slash_Mini", 6, 0, 11);
				A_DIScale(0.05, -0.05);
			}
			#### # 8;
			#### # 0 
			{
				A_FaceTarget();
				A_CustomMeleeAttack(60, "melee", "whiff", "Melee", true);
				A_SpawnItemEX("Fred_Slash2_Mini", 6, 0, 11);
				A_DIScale(0.05, -0.05);
			}
			#### # 6;
			#### # 0 A_DIScale(-0.1, 0.1);
			Goto See;
	}
}