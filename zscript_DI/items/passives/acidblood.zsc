//zscript_DI/items/passives/acidblood.zsc

Class DI_AcidBlood : DIPassiveInventory
{
	int acidstrength;
	
	Default
	{
		Height 20;
		Radius 10;
		Tag "Acid Blood";
		Inventory.Icon "POW1D0";
		Inventory.MaxAmount 5;
		Inventory.PickupMessage "Acid Blood Acquired! (Drop a damaging acid pool upon taking damage.)";
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		if ((damage >= 1) && (owner) && (passive == true))
		{
			acidstrength = amount;
			for (int i = 0; i < amount; ++i) 
			{
				owner.A_SpawnItemEX("DI_AcidBlood_Drop", 0, 0, owner.Height / 2, random(-4, 4), random(-4, 4), flags: SXF_ABSOLUTEVELOCITY | SXF_NOCHECKPOSITION);
			}
		}
	
		Super.ModifyDamage(damage, damageType, newdamage, passive, inflictor, source, flags);
	}
	
	States
	{
		Spawn:
			POW1 D -1;
			Stop;
	}
}

Class DI_AcidBlood_Drop : DI_Actor
{
	int acidstrength;
	
	Default
	{
		Height 20;
		Radius 10;
		Translation "DamGreen";
		DI_Actor.IgnoreWeapon true;
		+BRIGHT;
		-SOLID;
		+NOBLOCKMAP;
		+NOTELEPORT;
		+ALLOWPARTICLES;
		+THRUACTORS;
		+MISSILE;
		-BOUNCEONFLOORS;
		+EXPLODEONWATER;
		+ROLLSPRITE;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if (target && (target.FindInventory("DI_AcidBlood") != null))
		{
			let acid = DI_AcidBlood(target.FindInventory("DI_AcidBlood"));
			
			acidstrength = acid.acidstrength;
		}
	}

	States
	{
		Spawn:
			BLUD B 0 NoDelay A_SetRoll(random(0, 359));
			BLUD B -1;
			Wait;
		Death:
			BLUD B 0 
			{
				bool fakepointer;
				actor pool;
				[fakepointer, pool] = invoker.A_SpawnItemEX("DI_AcidBlood_Pool", flags: SXF_NOCHECKPOSITION | SXF_SETTARGET);
				if (pool)
				{
					let truepool = DI_AcidBlood_Pool(pool);
					truepool.acidstrength = acidstrength;
				}
			}
			BLUD B 1
			{
				A_FadeOut(0.05);
				A_DIScale(0.1, 0.1);
			}
			Wait;
	}
}

Class DI_AcidBlood_Pool : DI_Actor
{
	int acidstrength;
	int acidtimer;
	
	Default
	{
		DI_Actor.IgnoreWeapon true;
		DamageType "FakePoison";
		+FLATSPRITE;
		-SOLID;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if (acidstrength == 0)
		{
			acidstrength = 1;
		}
		
		A_DIScale(0.1, 0.1, true);
		ChangeTID(7499);
	}

	States
	{
		Spawn:
			POOL AAAAAAAAA 1 A_DIScale(0.1, 0.1);
			POOL A 15
			{
				++acidtimer;
				let timermax = 20 * acidstrength;
				if (acidtimer >= timermax)
				{
					return ResolveState("Finished");
				}
				else 
				{
					A_Explode(acidstrength * 10, 40, XF_NOSPLASH | XF_THRUSTLESS | XF_CIRCULAR, fulldamagedistance: 40);
				}
				return ResolveState(null);
			}
			Wait;
		Finished:
			POOL A 1 
			{
				A_DIScale(0.9, 0.9, true);
				A_FadeOut(0.1);
			}
			Wait;
	}
}

Class DI_AcidBlood_PoolAlt : DI_AcidBlood_Pool
{
	States
	{
		Spawn:
			POOL AAAAAAAAA 1 A_DIScale(0.1, 0.1);
			POOL A 15
			{
				++acidtimer;
				let timermax = 20 * acidstrength;
				if (acidtimer >= timermax)
				{
					return ResolveState("Finished");
				}
				else 
				{
					A_Explode(acidstrength * 10, 40, XF_NOSPLASH | XF_HURTSOURCE | XF_THRUSTLESS | XF_CIRCULAR | XF_EXPLICITDAMAGETYPE, fulldamagedistance: 40, damagetype: "FakePoison");
				}
				return ResolveState(null);
			}
			Wait;
	}
}