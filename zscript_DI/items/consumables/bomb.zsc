//zscript_DI/items/consumables/bomb.zsc

Class DI_ThrowBomb : CustomInventory
{
	mixin DI_ConsumableMixin;

	Default
	{
		Tag "Throwable Bomb";
		Inventory.MaxAmount 100;
		Inventory.Icon "GRENA0";
		Inventory.PickupMessage "Got a throwable cartoon bomb.";
		+INVENTORY.INVBAR;
	}
	
	override bool Use(bool pickup)
	{
		if (ACS_ScriptCall("DICheckWaveProgress") == false) 
		{
			console.printf("%s", "\cgYou can't use this if you're not in a wave!");
			return false;
		}
		else {DIUsed(); Super.Use(pickup); return true;} //call DIUsed() either standalone or as a replacement for "return true;" so that EventHandler's can track consumable item usage.
	}
	
	States
	{
		Spawn:
			GREN A -1;
			Loop;
		Use:
			GREN A 0 {A_FireProjectile("DI_ThrowBomb_Projectile", 0, 0, 0, self.height / 3, FPF_NOAUTOAIM, -10);}
			Stop;
	}
}

Class DI_ThrowBomb_Projectile : DI_Actor
{
	Default
	{
		Radius 10;
		Height 20;
		Speed 15;
		DI_Actor.IgnoreWeapon true;
		Projectile;
		-NOGRAVITY;
		+BRIGHT;
		+ROLLSPRITE;
		+ROLLCENTER;
		+SPRITEANGLE;
		+FORCEXYBILLBOARD;
		+INTERPOLATEANGLES;
		+EXTREMEDEATH;
	}
	
	States
	{
		Spawn:
			GREN A 1 A_SetRoll(roll + 8);
			Loop;
		Death:
			TNT1 A 1 
			{
				A_Explode(3000, 64);
				A_SpawnItemEX("SafeBoom", frandom(-4, 4), frandom(-4, 4), frandom(0, 8), frandom(-4, 4), frandom(-4, 4), frandom(0, 4), 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEX("BoomText", frandom(-4, 4), frandom(-4, 4), frandom(0, 8), frandom(-4, 4), frandom(-4, 4), frandom(0, 4), 0, SXF_NOCHECKPOSITION);
			}
			Stop;
	}
}

Class DI_ThrowBomb_Bundle : DIBundle
{
	Default
	{
		Tag "Bundle of Bombs";
		DIBundle.BundleItem "DI_ThrowBomb";
		DIBundle.BundleAmount 5;
		Inventory.PickupMessage "Got a 5-pack of bombs. Fuses are pre-lit for your convenience.";
	}
	
	States
	{
		Spawn:
			GREN G -1;
			Stop;
	}
}