Class DITurret : Inventory
{	
	mixin DI_ConsumableMixin;
	
	Default
	{
		Tag "Turret";
		Inventory.MaxAmount 5;
		Inventory.Icon "TURRC0";
		Inventory.PickupMessage "Got a turret. Use the turret to place it.";
		+INVENTORY.INVBAR;
	}
	
	override bool Use(bool pickup)
	{
		if (ACS_ScriptCall("DICheckWaveProgress") == false) 
		{
			console.printf("%s", "\cgYou can't use this if you're not in a wave!");
			return false;
		}
		
		bool spawned = false;
		if (owner) 
		{
			if (owner.A_SpawnItemEX("DITurret_Actor", 24, 0, 16))
			{
				owner.A_SpawnItemEX("DI_Teleport", 24);
				spawned = true;
				DIUsed();
			}
			else
			{
				console.printf("%s", "\cgThere's not enough room to spawn this here!");
			}
		}
		
		return spawned;
	}
	
	States
	{
		Spawn:
			TURR C -1;
			Stop;
	}
}

Class DITurret_Actor : DI_Actor
{
	Default
	{
		Mass 200;
		Health 50;
		Radius 11;
		Height 22;
		Tag "Turret";
		+SOLID;
		+SHOOTABLE;
		+FRIENDLY;
		+NOBLOOD;
	}
	
	int hptime;
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		A_AttachLightDef("glower", "GLOWWHITE");
	}
	
	override void tick()
	{
		super.tick();
		++hptime;
		if (hptime >= 35)
		{
			if (health < default.health) {health += 1;}
			hptime = 0;
		}
	}
	
	action void DITurret_Shoot(int recoil)
	{
		FLineTraceData plrcheck;
		bool hit = invoker.LineTrace(invoker.angle, 1024, invoker.pitch, 0, 18, 0, 0, plrcheck);
		
		if (hit == false)
		{
			hit = invoker.LineTrace(invoker.angle + recoil, 1024, invoker.pitch, 0, 18, 0, 0, plrcheck);
		}
		if (hit == false)
		{
			hit = invoker.LineTrace(invoker.angle - recoil, 1024, invoker.pitch, 0, 18, 0, 0, plrcheck);
		}
		
		if (hit && plrcheck.HitActor is "DI_PlayerBase")
		{
			A_StartSound("noammo", starttime: 0.1);
		}
		else
		{
			A_StartSound("bullet");
			A_CustomBulletAttack(recoil, recoil, 1, 12, "DI_BulletPuff_NoWPN", 1024, CBAF_AIMFACING | CBAF_NORANDOM | CBAF_NORANDOMPUFFZ, spawnheight: 18);
			A_AttachLightDef("shoot", "BULLETSHOOT");
		}
		A_DIScale(0.025, -0.025);
	}

	States
	{
		Spawn:
			TURR A 10 A_Look;
			Loop;
		See:
			#### A 2 A_Wander();
			Goto RealSee;
		RealSee:
			#### A 2 A_Chase();
			Loop;
		Missile:
			#### B 3 A_FaceTarget();
			#### B 2 BRIGHT DITurret_Shoot(3);
			#### A 2 A_RemoveLight("shoot");
			#### B 2 BRIGHT DITurret_Shoot(6);
			#### A 2 A_RemoveLight("shoot");
			#### B 2 BRIGHT DITurret_Shoot(9);
			#### A 2 A_RemoveLight("shoot");
			#### B 2 BRIGHT DITurret_Shoot(12);
			#### A 19 A_RemoveLight("shoot");
			#### # 0 A_DIScale(-0.1, 0.1);
			Goto See;
		Death:
			#### # 1 
			{
				A_SpawnItemEX("SafeBoomSmall", 0, 0, 11, flags: SXF_NOCHECKPOSITION);
				A_RemoveLight("glower");
				console.printf("%s", "\cga turret has been destroyed.");
			}
			Goto DeathLoop;
		DeathLoop:
			#### # 1 
			{
				A_DIScale(1.01, 0.95, true);
				A_FadeOut(0.03);
			}
			Loop;
	}
}