//zscript_di/parent.zsc

//includes all parent actors for DI.

Class DI_Actor : Actor abstract
{
	//Called by almost every actor in DI.
	
	mixin DI_ActorMixin;
	
	Default
	{
		//$Category "DI"
	}
}

Class DI_FloorActor : DI_Actor abstract 
{
	private bool janitor_actordone;
	private bool janitor_cleanup;
	
	action state ReadyToClean()
	{
		//Called by floor actor once animation is completed.
		invoker.janitor_actordone = true;
		if (invoker.janitor_cleanup) {return ResolveState("Looper");}
		else {return ResolveState(null);}
	}

	action state FloorCleanUp() 
	{
		//Called by EventHandler once too many gibs are alive at once.
		invoker.janitor_cleanup = true; 
		if (invoker.janitor_actordone) {return ResolveState("Looper");}
		else {return ResolveState(null);}
	}
	
	States
	{
		Looper:
			#### # 1 A_FadeOut(0.05);
			Loop;
	}
}

Class DI_Drop : DI_Actor
{
	//string coindrop;
	//int coinnum;
	DI_Monster coindropper;

	//does nothing. gets replaced via eventhandlers.
	Default
	{
		+NOINTERACTION;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if (master is "DI_Monster")
		{
			coindropper = DI_Monster(master);
			//coindrop = coindropper.coindrop;
			//coinnum = coindropper.coinnum;
			//di_notweapon = coindropper.di_notweapon;
		}
	}
	
	States
	{
		Spawn:
			TNT1 A 1;
			Stop;
	}
}

Class DI_WaveStarter : Actor
{
	//gross hack to let ACS tell zscript to start next wave.
	Default
	{
		+NOINTERACTION;
	}
	
	States
	{
		Spawn:
			TNT1 A 1;
			Stop;
	}
}

Class DI_WaveSpawnTimer : Actor
{
	//allows spawn timer to be controlled with items such as time freeze or random events.
	
	int user_wavetimer;

	Default
	{
		+NOINTERACTION;
	}
	
	States
	{
		Spawn:
			TNT1 A 1 NoDelay
			{
				ACS_ScriptCall("SpawnSpawners");
				if (invoker.user_wavetimer < 1) {ThrowAbortException("%s", "WAVE ERROR: Spawn Timer cannot be below 1 tic! (Maybe just increase the spawn rate instead?)");}
				else {A_SetTics(invoker.user_wavetimer);}
				//console.printf("%d", invoker.user_wavetimer);
			}
			Loop;
	}
}

Class DI_ClearPlayerItems : DI_WaveStarter {}

Class DI_Decor : DI_Actor
{
	Default {+NOINTERACTION;}
	
	//These decoration objects will only run 1 tick by default, for performance reasons.
	bool ticked;
	virtual bool dotick() {if (!ticked) {ticked = true; return true;} else {return false;}}
	Override void tick() {if (dotick()) {super.tick();}}

	action void A_DIDecor (bool Flipping = true, double MinScale = 0.75, double MaxScale = 1.0, double MaxFade = 0.0)
	{
		//reduces the amount of copy/paste code for decoration items by performing 3 basic functions in one.
		if (invoker)
		{
			int RandomFlip = random(0, 1);
			if ((Flipping == true) && (RandomFlip == 1)) {bSPRITEFLIP = true;}
			A_DIScale(frandom(MinScale, MaxScale), true);
			if (MaxFade != 0) {A_FadeOut(frandom(0, MaxFade));}
		}
	}
}