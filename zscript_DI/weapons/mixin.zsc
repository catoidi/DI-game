mixin class DI_ProjectileMixin
{
	DI_PlayerBase plr;
	DI_Weapon wpn;

	virtual void GetDIPlayer()
	{
		if (target is "DI_PlayerBase") 
		{
			if (!plr) {plr = DI_PlayerBase(target);}
			if (!wpn) {wpn = DI_Weapon(plr.player.ReadyWeapon);}
		}
	}

	virtual int GetWeaponDamage()
	{
		GetDIPlayer();
		if (wpn) {return wpn.CheckDamage();}
		else return 0;
	}

	virtual void UpdateSize()
	{
		GetDIPlayer();
		if (plr && wpn) 
		{
			if (wpn.wpn_bulletsize != 1.0)
			{
				double newrad = radius * wpn.wpn_bulletsize;
				if (newrad < 1.0) {newrad = 1.0;}
				double newhigh = height * wpn.wpn_bulletsize;
				if (newhigh < 1.0) {newhigh = 1.0;}

				A_DIScale(wpn.wpn_bulletsize, wpn.wpn_bulletsize, true);
				A_SetSize(newrad, newhigh, true);
			}
		}
	}

	virtual void CheckStatusChange()
	{
		GetDIPlayer();
		if (plr) 
		{
			string newstat = plr.statusreplace;
			if (newstat == "Ice") {damagetype = "Ice";}
			else if (newstat == "Fire") {damagetype = "Fire";}
			else if (newstat == "Lightning") {damagetype = "Lightning";}
			else if (newstat == "Poison") {damagetype = "Poison";}
		}
	}
	
	virtual void DIProjectileTrail(double shosize = 1.0)
	{
		int trailnum = 0;
		if (damagetype == "Ice") {trailnum = 1;}
		else if (damagetype == "Fire") {trailnum = 2;}
		else if (damagetype == "Lightning") {trailnum = 3;}
		else if (damagetype == "Poison") {trailnum = 4;}
		
		if (trailnum != 0) {A_DIFakeStatusPuff(shosize, trailnum);}
	}
}

mixin class DI_Spray_PureRandom
{
	//All bullets have equally random spread.
	override vector2 DI_SprayPattern(uint startspray, double spreadscale)
	{
		vector2 totalspread = (wpn_spread_x * wpn_maxspread * spreadscale, wpn_spread_y * wpn_maxspread * spreadscale);
		return (frandom(-totalspread.x, totalspread.x), frandom(-totalspread.y, totalspread.y));
	}
}

mixin class DI_Spray_Progressive
{
	//Meant for weapons that start with 1 projectile and 0 maxspread.

	//Bullets start at 0% spread, and get progressively more spread the higher the startspray value is.
	//It's important that the spread does not go above wpn_spread_XY * wpn_maxspread * spreadscale, or crosshair accuracy will be displayed incorrectly.
	override vector2 DI_SprayPattern(uint startspray, double spreadscale)
	{
		if (wpn_projectiles < 1) {return (0, 0);}
		double progscale = (1.0 * (startspray + 1)) / (1.0 * wpn_projectiles);
		vector2 totalspread = (wpn_spread_x * wpn_maxspread * spreadscale * progscale, wpn_spread_y * wpn_maxspread * spreadscale * progscale);
		return (frandom(-totalspread.x, totalspread.x), frandom(-totalspread.y, totalspread.y));
	}
}