class Sledgehammer : DI_Weapon
{
	Default
	{
		Radius 20;
		Height 24;
		DI_Weapon.FreshBonus 1;
		DI_Weapon.BaseDamage 80;
		DI_Weapon.PlayerSpeed -0.15;
		DI_Weapon.Ammo1HUD 3;
		Weapon.SelectionOrder 1000;
		Weapon.SlotNumber 1;
		Weapon.SlotPriority 1;
		Weapon.Kickback 500;
		Weapon.AmmoType "Sledgehammer_Charge";
		Inventory.PickupMessage "Picked up the Sledgehammer! (Slow, but powerful melee weapon.)";
		Inventory.Icon "HAMRZ0";
		Tag "Sledgehammer";
		DamageType "Melee";
		+BLOODSPLATTER;
		+WEAPON.MELEEWEAPON;
		+WEAPON.AMMO_OPTIONAL;
		+WEAPON.ALT_AMMO_OPTIONAL;
		+INVENTORY.UNDROPPABLE;
		+CASTSPRITESHADOW;
	}
	
	int holdtime;
	bool doalt;

	double xoffset, yoffset, falling;
	
	override void UpdateWeaponValues()
	{
		super.UpdateWeaponValues();
		if (!doalt) {wpn_accuracy += (25 - holdtime) / 4.0;}
		else {wpn_accuracy += (30 - holdtime) / 5.0;}
		
		
		if (!doalt)
		{
			owner.A_SetInventory("Sledgehammer_Charge", 100 * (holdtime / 24.0));
		}
		else
		{
			owner.A_SetInventory("Sledgehammer_Charge", 100 * (holdtime / 30.0));
		}
	}
	
	action void HammerCharge()
	{
		if (!invoker.doalt)
		{
			if (invoker.holdtime <= 24)
			{
				invoker.fovscale -= 0.005;
				HammerOffset(-4, -2);
			}
		}
		else if (invoker.holdtime <= 30)
		{
			invoker.fovscale -= 0.004;
			HammerOffset(-1.6, -3.2);
		}
	}
	
	action void HammerDischarge()
	{
		if (invoker.holdtime > 0)
		{
			if (!invoker.doalt)
			{
				invoker.fovscale += 0.01;
				HammerOffset(4, 2);
			}
			else
			{
				invoker.fovscale += 0.008;
				HammerOffset(1.6, 3.2);
			}
		}
	}
	
	action void HammerSwing()
	{
		int swingrange = 60;
		if (invoker.plr) {swingrange += invoker.plr.radius;}
		DI_BasicMelee(invoker.CheckDamage(2.0), CPF_PULLIN, "SledgePuff", swingrange, MeleeSound: "slam");
		A_Recoil(-16);
	}

	action void HammerSlam()
	{
		int swingrange = 60;
		if (invoker.plr) {swingrange += invoker.plr.radius;}
		A_SetPitch(0, SPF_INTERPOLATE);
		A_SpawnItemEX("HammerSlamPlayer", swingrange, 0, 0, 0, 0, 0, 0, SXF_ABSOLUTEVELOCITY | SXF_NOCHECKPOSITION | SXF_SETTARGET);
		A_SpawnItemEX("HammerSlamPuff", swingrange, 0, 0, 0, 0, 0, 0, SXF_ABSOLUTEVELOCITY | SXF_NOCHECKPOSITION);
		A_Recoil(9);
		ThrustThingZ(0, 30, 0, 1);
		A_StartSound("slam2");
	}

	action void HammerOffset(double newx, double newy)
	{
		invoker.xoffset += newx;
		invoker.yoffset += newy;
		A_WeaponOffset(newx, newy, WOF_ADD);
	}

	action void HammerResetOffset()
	{
		invoker.holdtime = 0;
		A_WeaponOffset(-invoker.xoffset, -invoker.yoffset + 28.8, WOF_ADD);
		invoker.xoffset = 0;
		invoker.yoffset = 0;
	}
	
	States
	{
		Ready:
			HAMR A 1 DI_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			HAMR A 0 A_Lower;
			Loop;
		Select:
			HAMR AAA 0 A_Raise;
			HAMR A 1 A_Raise;
			Loop;
		Fire:
			HAMR A 0 
			{
				invoker.doalt = false;
				invoker.fovscale = 1.0;
				WeaponMode(1);
			}
			#### # 0 A_Jump(256, "Charge");
		Charge:
			HAMR # 0
			{
				int newframe = invoker.holdtime / 12;
				if (newframe > 2) {newframe = 2;}
				++invoker.holdtime;
				switch(newframe)
				{
					//doing "frame = num" isnt working???????????
					default: return ResolveState("Charge1"); break;
					case 1: return ResolveState("Charge2"); break;
					case 2: return ResolveState("Charge3"); break;
				}
				return ResolveState(null);
			}
		Charge1:
			HAMR A 1 HammerCharge();
			#### # 0 A_Refire("Charge");
			Goto Release;
		Charge2:
			HAMR B 1 HammerCharge();
			#### # 0 A_Refire("Charge");
			Goto Release;
		Charge3:
			HAMR C 1; //HammerCharge();
			#### # 0 A_Refire("Charge3");
			Goto Release;
		Release:
			#### # 0
			{
				if (invoker.holdtime <= 24)	{return ResolveState("TooEarly");}
				else {return ResolveState(null);}
			}
			HAMR DDDD 1 HammerOffset(2.4, 1.2);
			#### # 0 A_StartSound("whiff2");
			HAMR EEEE 1 HammerOffset(4.8, 2.4);
			HAMR FFFF 1 HammerOffset(7.2, 3.6);
			#### # 0 HammerSwing();
			HAMR GGGG 1 HammerOffset(9.6, 4.8);
			HAMR GGGGGG 1 HammerOffset(19.2, 9.6);
			Goto AlmostReady;
		AlmostReady:
			#### # 0 HammerResetOffset();
			HAMR AAAA 1 
			{
				invoker.fovscale = 1.0;
				A_WeaponOffset(0, -7.2, WOF_ADD);
			}
			Goto Ready;
		TooEarly:
			#### # 1 HammerDischarge();
			#### # 0
			{
				--invoker.holdtime;
				if (invoker.holdtime <= 0) {return ResolveState("Ready");}
				else {return ResolveState(null);}
			}
			#### # 0 A_Refire();
			Loop;
		AltFire:
			HAMR A 0 
			{
				invoker.doalt = true;
				invoker.fovscale = 1.0;
				WeaponMode(1);
			}
			#### # 0 A_Jump(256, "AltCharge");
		AltCharge:
			HAMR # 0
			{
				int newframe = invoker.holdtime / 10;
				if (newframe > 3) {newframe = 3;}
				++invoker.holdtime;
				switch(newframe)
				{
					default: return ResolveState("AltCharge1"); break;
					case 1: return ResolveState("AltCharge2"); break;
					case 2: return ResolveState("AltCharge3"); break;
					case 3: return ResolveState("AltCharge4"); break;
				}
				return ResolveState(null);
			}
		AltCharge1:
			HAMR H 1 HammerCharge();
			#### # 0 A_Refire("AltCharge");
			Goto AltRelease;
		AltCharge2:
			HAMR I 1 HammerCharge();
			#### # 0 A_Refire("ALtCharge");
			Goto AltRelease;
		AltCharge3:
			HAMR J 1 HammerCharge();
			#### # 0 A_Refire("AltCharge");
			Goto AltRelease;
		AltCharge4:
			HAMR K 1; //HammerCharge();
			#### # 0 A_Refire("AltCharge4");
			Goto AltRelease;
		AltRelease:
			#### # 0
			{
				if (invoker.holdtime <= 30)	{return ResolveState("TooEarly");}
				else {return ResolveState(null);}
			}
			HAMR LLLL 1 
			{
				A_SetPitch(invoker.owner.pitch / 2, SPF_INTERPOLATE);
				HammerOffset(2.4, 4.8);
			}
			#### # 0 A_StartSound("whiff2");
			HAMR MMMM 1 
			{
				A_SetPitch(invoker.owner.pitch / 2, SPF_INTERPOLATE);
				HammerOffset(4.8, 9.6);
			}
			HAMR NNNN 1 
			{
				A_SetPitch(invoker.owner.pitch / 2, SPF_INTERPOLATE);
				HammerOffset(7.2, 14.4);
			}
			#### # 0
			{
				if ((invoker.owner.Pos.Z > invoker.owner.FloorZ) && (!invoker.owner.bOnMobj)) {return ResolveState("Falling");}
				return ResolveState("TheSlam");
			}
		Falling:
			HAMR N 1 
			{
				A_SetPitch(invoker.owner.pitch / 2, SPF_INTERPOLATE);
				if (invoker.owner.Vel.Z < 0) 
				{
					invoker.falling += 10.0;
					HammerOffset(sin(invoker.falling), cos(invoker.falling));
				}
			}
			#### # 0 
			{
				if ((invoker.owner.Pos.Z > invoker.owner.FloorZ) && (!invoker.owner.bOnMobj)) {return ResolveState("Falling");}
				return ResolveState("TheSlam");
			}
		TheSlam:
			#### # 0 HammerSlam();
			HAMR OOOOOOOO 1 HammerOffset(frandom(-6.0, 6.0), frandom(-6.0, 6.0));
			HAMR OOOOOOOOOOOO 1 HammerOffset(frandom(-2.0, 2.0), frandom(-2.0, 2.0));
			HAMR O 4 {invoker.falling = 0.0;}
			Goto AlmostReady;
		Spawn:
			HAMR Z -1;
			Stop;
	}
}

Class HammerSlamPlayer : HammerSlam
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_SetRoll(random(0, 359));
			SLAM B 0 
			{	
				int dam = 80;
				if (target is "DI_PlayerBase")
				{
					let wpn = Sledgehammer(target.player.readyweapon);
					if (wpn) {dam = wpn.CheckDamage() * (1.0 + sqrt(wpn.falling / 360.0));}
				}

				A_Explode(dam, 64, XF_THRUSTZ | XF_CIRCULAR, true, 64);
				A_QuakeEX(3, 3, 3, 35, 0, 128, 0);
			}
			Goto Looper;
	}
}

Class SledgePuff : DI_Actor
{
	Default
	{
		Scale 0.5;
		+NOGRAVITY;
		+EXTREMEDEATH;
	}

	States
	{
		Spawn:
			SLAM B 0 NoDelay A_StartSound("slam");
			SLAM B 1
			{
				A_DIScale(1.1, 1.1, true);
				A_FadeOut(0.1);
			}
			Wait;
	}
}

Class Sledgehammer_Charge : Ammo
{
	Default
	{
		Inventory.MaxAmount 100;
		Inventory.Amount 0;
	}
}