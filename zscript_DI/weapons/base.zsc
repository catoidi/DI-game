Class DI_Weapon : Weapon abstract
{
	int wpn_extracoin; //how many extra coins this weapon will spawn each kill. certain upgrades may use this.
	int wpn_freshbonus; //how many extra coins are spawned for the fresh weapon bonus.
	int wpn_freshcharge; //give a greater cooldown reduction for fresh bonus.
	int wpn_damage; //projectiles use their own damage calculation, so they need to be able to read this value.
	double wpn_accuracy; //the base accuracy of the weapon. lower numbers are more accurate.
	double wpn_recoil; //how much recoil is added to the accuracy per shot. can be negative.
	double wpn_recoil_recover; //how fast the recoil recovers. smaller weapons should recover faster.
	double wpn_recoil_offset; //with autooffset enabled, the weapon's recoil offset gets multiplied by this amount.
	int wpn_recoil_offset_x; //multiply the autooffset of the x axis. defaults to -1, for left-handed weapons.
	int wpn_recoil_offset_y; //same as above, but for the y axis instead. defaults to 1, to make the recoil push the weapon downwards.
	bool wpn_autooffset; //enables/disables the autooffset feature, where the weapon sprite will match the recoil amount.
	int wpn_projectiles; //how many bullets/projectiles are spawned per shot.
	double wpn_bulletsize; //projectile size.
	bool wpn_dontgiveammo1; //tells items to NOT give this weapon it's first ammo type.
	bool wpn_dontgiveammo2; //tells items to NOT give this weapon it's second ammo type.
	int wpn_ammo1restore; //influences how ammo 1 is restored on wave end.
	int wpn_ammo2restore; //influences how ammo 2 is restored on wave end.
	
	double plr_speed;
	
	private int wpn_speed_mode; //determines which "mode" the weapon is in. 0 is neutral. 1 is firing. 2 is reloading.
	double wpn_speed_current; //weapon speed for this specific tic.
	double wpn_speed; //speed multiplier for the entire weapon.
	double wpn_speed_fire; //firerate multiplier.
	double wpn_speed_reload; //reload speed multiplier.
	array<string> firestates; //if the weapon is in a state listed here, the weapon speed will switch to "fire" mode.
	array<string> reloadstates; //if the weapon is in a state listed here, the weapon speed will switch to "reload" mode.
	
	int wpn_ammo1hud, wpn_ammo2hud; 
	//how the ammo bar will be rendered on the HUD. 0 is default (unlimited ammo). 1 is used for limited ammo weapons. 2 is used for recharging weapons. 3 is used for heat ammo, 4 is used for box ammo.
	
	double damagemult;
	
	private PSpriteSpeedScalerSet scalers;
	
	property ExtraCoin: wpn_extracoin;
	property FreshBonus: wpn_freshbonus;
	property FreshCharge: wpn_freshcharge;
	property BaseDamage: wpn_damage;
	property DamageMult: damagemult;
	property BaseAccuracy: wpn_accuracy;
	property Recoil: wpn_recoil;
	property RecoilRecover: wpn_recoil_recover;
	property RecoilOffset: wpn_recoil_offset;
	property RecoilOffset_X: wpn_recoil_offset_x;
	property RecoilOffset_Y: wpn_recoil_offset_y;
	property AutoOffset: wpn_autooffset;
	property Projectiles: wpn_projectiles;
	property BulletSize: wpn_bulletsize;
	property PlayerSpeed: plr_speed;
	
	property DontGiveAmmo1: wpn_dontgiveammo1;
	property DontGiveAmmo2: wpn_dontgiveammo2;
	
	property RestoreAmmo1: wpn_ammo1restore;
	property RestoreAmmo2: wpn_ammo2restore;
	
	property Ammo1HUD: wpn_ammo1hud;
	property Ammo2HUD: wpn_ammo2hud;
	
	//int recnum; //use this in the weapon states to increase/decrease recoil.
	//int reccur;
	double current_recoil;
	double autooffset_prev;
	
	DI_PlayerBase plr;

	Default
	{
		Scale 0.7;
		DI_Weapon.ExtraCoin 0;
		DI_Weapon.FreshBonus 1;
		DI_Weapon.FreshCharge 0;
		DI_Weapon.BaseDamage 0;
		DI_Weapon.DamageMult 1.0;
		DI_Weapon.BaseAccuracy 0;
		DI_Weapon.Recoil 0;
		DI_Weapon.RecoilRecover 0.5;
		DI_Weapon.RecoilOffset 4.0;
		DI_Weapon.RecoilOffset_X -1;
		DI_Weapon.RecoilOffset_Y 1;
		DI_Weapon.AutoOffset true;
		DI_Weapon.Projectiles 1;
		DI_Weapon.BulletSize 1.0;
		DI_Weapon.DontGiveAmmo1 false;
		DI_Weapon.DontGiveAmmo2 false;
		DI_Weapon.RestoreAmmo1 0; //a value of 0 will mean the ammo restore amount will be set automatically.
		DI_Weapon.RestoreAmmo2 0; //you may want to change this value if the ammo for your weapon is shared with another weapon.
		DI_Weapon.Ammo1HUD 0;
		DI_Weapon.Ammo2HUD 0;
		Weapon.WeaponScaleY 1.0;
		+WEAPON.AMMO_OPTIONAL;
		+WEAPON.ALT_AMMO_OPTIONAL;
	}
	
	override void attachtoowner(actor other)
	{
		super.attachtoowner(other);
		if (other is "DI_PlayerBase")
		{
			plr = DI_PlayerBase(owner);
			++plr.weaponnum;
			if (ammo1) {wpn_ammo1restore = plr.CountInv(ammo1.GetClassName());}
			if (ammo2) {wpn_ammo2restore = plr.CountInv(ammo2.GetClassName());}
		}
	}
	
	override void detachfromowner()
	{
		if (plr) {--plr.weaponnum;}
	}
	
	override void tick(void)
	{
		super.tick();

		
		//weapon speed scaling stuff
		if (Owner && Owner.player && Owner.player.ReadyWeapon == self)
			scalers.Tick(self, wpn_speed_current);
		else if (scalers.first)
			scalers.Clear();
			
		
		if ((owner) && (owner is "DI_PlayerBase"))
		{
			//reccur = recnum * wpn_recoil;
			plr = DI_PlayerBase(owner);
			if ((plr.player.readyweapon) && (GetClassName() == plr.player.readyweapon.GetClassName())) //only run this code if this weapon is selected.
			{
				UpdateWeaponValues();
				UpdateWeaponSpeed();
				UpdatePlayerSpeed();
				
				if (owner.IsFrozen() == false) {RecoilTick();}
				//AutoOffset(); //handled through the player actor now, since it doesn't appear to work when called from the gun itself ???????????????????????????????????????
			}
			else {ResetRecoil();}
		}
	}
	
	virtual void RestoreStartAmmo()
	{
		//reset ammo back to starting values.
		
		//this does not respect the "DontGiveAmmo" properties.
		//if you wish to set the restore amount to a custom amount, change the wpn_ammo*restore ints.
		//otherwise, the value will be set to whatever the ammo count is when the weapon is first picked up.
	
		if (ammo1)
		{
			//the ammo will only be reset if the value is below the starting amount or above the maximum amount.
			let ammo1name = ammo1.GetClassName();
			let startammo1 = wpn_ammo1restore;
			let maxammo1 = GetMaxAmmo();
			bool restore1 = false;
			if (plr.CountInv(ammo1name) < startammo1) {restore1 = true;}
			else if (plr.CountInv(ammo1name) > maxammo1) {restore1 = true;}
			if (restore1) {plr.SetInventory(ammo1name, startammo1);}
		}
		
		if (ammo2)
		{
			let ammo2name = ammo2.GetClassName();
			let startammo2 = wpn_ammo2restore;
			let maxammo2 = GetMaxAmmo(true);
			bool restore2 = false;
			if (plr.CountInv(ammo2name) < startammo2) {restore2 = true;}
			else if (plr.CountInv(ammo2name) > maxammo2) {restore2 = true;}
			if (restore2) {plr.SetInventory(ammo2name, startammo2);}
		}
		
	}
	
	virtual void UpdateWeaponValues()
	{
		//this handles getting stat changes from passive items.
		//IMPORTANT NOTE: these values will only apply when the weapon is currently "ready".
		//AKA, this only applies to the weapon you currently have selected.
		//this is done on purpose for performance concerns.
	
		wpn_damage = Default.wpn_damage;
		damagemult = Default.damagemult;
		wpn_extracoin = Default.wpn_extracoin;
		wpn_freshbonus = Default.wpn_freshbonus;
		wpn_accuracy = Default.wpn_accuracy;
		wpn_recoil = Default.wpn_recoil;
		wpn_recoil_recover = Default.wpn_recoil_recover;
		wpn_projectiles = Default.wpn_projectiles;
		wpn_bulletsize = Default.wpn_bulletsize;
		if (Ammo1) {Ammo1.MaxAmount = Ammo1.Default.MaxAmount;}
		if (Ammo2) {Ammo2.MaxAmount = Ammo2.Default.MaxAmount;}
		wpn_speed = Default.wpn_speed;
		wpn_speed_fire = Default.wpn_speed_fire;
		wpn_speed_reload = Default.wpn_speed_reload;
		plr_speed = Default.plr_speed;
		
		for (int i = 0; i < plr.knownpassives.Size(); ++i)
		{
			DIPassiveInventory curinv = DIPassiveInventory(plr.FindInventory(plr.knownpassives[i]));
			if (curinv)
			{
				wpn_damage += curinv.GiveBaseDamage();
				damagemult += curinv.GiveDamageMult();
				wpn_extracoin += curinv.GiveExtraCoin();
				wpn_freshbonus += curinv.GiveFreshBonus();
				wpn_accuracy += curinv.GiveAccuracy();
				wpn_recoil += curinv.GiveRecoil();
				wpn_recoil_recover += curinv.GiveRecoilRecover();
				wpn_projectiles += curinv.GiveProjectiles();
				wpn_bulletsize += curinv.GiveBulletSize();
				if (wpn_bulletsize < 0.1) {wpn_bulletsize = 0.1;}
				if ((Ammo1) && (wpn_dontgiveammo1 == false)) {Ammo1.MaxAmount += curinv.GiveMaxAmmo1();}
				if ((Ammo2) && (wpn_dontgiveammo2 == false)) {Ammo2.MaxAmount += curinv.GiveMaxAmmo2();}
				wpn_speed += curinv.GiveWeaponSpeed();
				wpn_speed_fire += curinv.GiveFirerate();
				wpn_speed_reload += curinv.GiveReloadSpeed();
				plr_speed += curinv.GivePlayerSpeed();
			}
		}
		
		if (wpn_damage < 1) {wpn_damage = 1;}
	}
	
	virtual int GetMaxAmmo(bool doammo2 = false)
	{
		//the updated stats for weapons only apply when the weapon is currently ready.
		//this allows you to bypass that, but maybe we shouldn't call this function often so that we aren't adding even more inventory checks every frame.
		int returnvalue = 0;
		if (!doammo2) {returnvalue = Ammo1.Default.MaxAmount;}
		else {returnvalue = Ammo2.Default.MaxAmount;}
		
		if (wpn_dontgiveammo1 && wpn_dontgiveammo2) {return returnvalue;}
		else
		{
			for (int i = 0; i < plr.knownpassives.Size(); ++i)
			{
				DIPassiveInventory curinv = DIPassiveInventory(plr.FindInventory(plr.knownpassives[i]));
				if (curinv)
				{
					if (!doammo2 && !wpn_dontgiveammo1) {returnvalue += curinv.GiveMaxAmmo1();}
					else if (!wpn_dontgiveammo2) {returnvalue += curinv.GiveMaxAmmo2();}
				}
			}
			return returnvalue;
		}
	}
	
	action void WeaponMode(int mode)
	{
		invoker.wpn_speed_mode = mode;
	}
	
	bool wpnfrozen;
	virtual void UpdateWeaponSpeed()
	{	
		wpn_speed_current = default.wpn_speed_current;
	
		if (wpn_speed_mode == 0) {wpn_speed_current = wpn_speed;}
		else if (wpn_speed_mode == 1) {wpn_speed_current = wpn_speed + wpn_speed_fire;}
		else if (wpn_speed_mode == 2) {wpn_speed_current = wpn_speed + wpn_speed_reload;}
		
		if (owner.IsFrozen()) {wpn_speed_current = 99999999; wpnfrozen = true;}
		else if (wpnfrozen == true) {scalers.Clear(); wpnfrozen = false;}
	}
	
	virtual void UpdatePlayerSpeed()
	{
		plr.Speed = plr.default.Speed + plr_speed;
		if (plr.Speed < 0.1) {plr.Speed = 0.1;}
		//console.printf("%d", plr.Vel.X + plr.Vel.Y);
	}
	
	clearscope float CheckWeaponSpeed()
	{
		//return the current multiplier to weapon speed.
		//we are not using "wpn_speed_current" here as that is on a 1 tic delay.
		float speedcheck = wpn_speed;
		if (wpn_speed_mode == 1) {speedcheck += wpn_speed_fire;}
		else if (wpn_speed_mode == 2) {speedcheck += wpn_speed_reload;}
		
		if (speedcheck == 0.0) {return 1.0;}
		else if (speedcheck < 0) {return 1.0 + -speedcheck;}
		else {return 1.0 / (1.0 + speedcheck);}
	}
	
	virtual void RecoilTick()
	{
		if (current_recoil != 0.0) {current_recoil *= 1.0 - (0.05 * wpn_recoil_recover);} //recovers exponentially faster farther from 0.
		if (wpn_recoil_recover > 0) 
		{
			current_recoil -= (wpn_recoil_recover / 35.0);
			if (current_recoil < 0) {current_recoil = 0.0;}
		}
		else if (wpn_recoil_recover < 0) 
		{
			current_recoil -= (wpn_recoil_recover / 35.0);
			if (current_recoil > 0) {current_recoil = 0.0;}
		}
	}
	
	action void DoRecoil(double recoil_amount = 0)
	{
		if (recoil_amount == 0)
		{
			recoil_amount = invoker.wpn_recoil;
		}
		
		invoker.current_recoil += recoil_amount;
	}
	
	virtual void ResetRecoil() 
	{
		current_recoil = 0.0;
		autooffset_prev = 0.0;
	}
	
	action void DI_WeaponReady(int flags = 0)
	{
		flags += WRF_NOBOB; //always disable vanilla weapon bobbing
		WeaponMode(0);
		A_WeaponReady(flags);
	}
	
	action state DI_FireCheck(bool altmode = false)
	{
		WeaponMode(1);
		if (!altmode) {if (CountInv(invoker.Ammo1.GetClassName()) < invoker.AmmoUse1) {return ResolveState("NoReload");}}
		else 
		{
			if (CountInv(invoker.Ammo2.GetClassName()) < invoker.AmmoUse2) {return ResolveState("NoReload");}
		}
		return ResolveState(null);
	}
	
	action state DI_ReloadCheck(bool altmode = false)
	{
		WeaponMode(2);
		
		eventhandler.sendnetworkevent("diweaponreload", 0, 0, 0);
		
		if (!altmode) {if (CountInv(invoker.Ammo1.GetClassName()) >= invoker.Ammo1.MaxAmount) {return ResolveState("NoReload");}}
		else 
		{
			if (CountInv(invoker.Ammo2.GetClassName()) >= invoker.Ammo2.MaxAmount) {return ResolveState("NoReload");}
		}
		return ResolveState(null);
	}
	
	action void DI_BasicBullet(int dmgnum = 0, bool useammo = true, string defpuff = "DI_BulletPuff", bool isRecoil = true)
	{
		WeaponMode(1);
	
		if (dmgnum == 0) {dmgnum = invoker.wpn_damage;}
		dmgnum *= invoker.damagemult;
		if (dmgnum < 1) {dmgnum = 1;}
		let bflag = FBF_NORANDOM | FBF_NORANDOMPUFFZ | FBF_USEAMMO;
		if (useammo == false) {bflag = FBF_NORANDOM | FBF_NORANDOMPUFFZ;}
		
		if (invoker.plr) 
		{
			string newstat = invoker.plr.statusreplace;
			if (newstat == "Ice") {defpuff = "DI_IcePuff";}
			else if (newstat == "Fire") {defpuff = "DI_FirePuff";}
			else if (newstat == "Lightning") {defpuff = "DI_LightningPuff";}
			else if (newstat == "Poison") {defpuff = "DI_PoisonPuff";}
		}
		
		int bulnum = invoker.wpn_projectiles;
		if (bulnum == 1) {bulnum = -1;} //stop that hard-coded thing in a_firebullets that'll ignore accuracy values for the first bullet if the gun only fires 1 bullet.
		
		A_FireBullets(invoker.wpn_accuracy + invoker.current_recoil, invoker.wpn_accuracy + invoker.current_recoil, bulnum, dmgnum, defpuff, bflag);
		
		if (isRecoil) 
		{
			invoker.DoRecoil();
			A_SetPitch(invoker.owner.pitch - (invoker.wpn_recoil * 0.4));
		}
	}
	
	action void DI_BasicMelee(int damage = 0, int flags = 0, string defpuff = "ProjectileSmoke", float range = 0, float lifesteal = 0, int lifestealmax = 0, string armorbonustype = "", sound meleesound = 0, sound misssound = "", bool isRecoil = false)
	{
		WeaponMode(1);
	
		if (range == 0) {range = DEFMELEERANGE;}
	
		if (invoker.plr) 
		{
			string newstat = invoker.plr.statusreplace;
			if (newstat == "Ice") {defpuff = "DI_IcePuff";}
			else if (newstat == "Fire") {defpuff = "DI_FirePuff";}
			else if (newstat == "Lightning") {defpuff = "DI_LightningPuff";}
			else if (newstat == "Poison") {defpuff = "DI_PoisonPuff";}
			
			
			damage *= invoker.damagemult;
		}
		
		A_CustomPunch(damage, true, flags, defpuff, range, lifesteal, lifestealmax, armorbonustype, meleesound, misssound);
		
		if (isRecoil) 
		{
			invoker.DoRecoil();
			A_SetPitch(invoker.owner.pitch - (invoker.wpn_recoil * 0.4));
		}
	}
	
	action void DI_FireProjectile(class<Actor> missiletype, int projectiles = -32768, double angle = -32768, int ammouse = -32768, double spawnofs_xy = 0, double spawnheight = 0, int flags = 0, double pitch = -32768, bool isRecoil = true)
	{
		WeaponMode(1);
	
		if (projectiles == -32768) {projectiles = invoker.wpn_projectiles;}
		if (ammouse == -32768) {ammouse = invoker.AmmoUse1;}
		
		bool useammo = true;
		
		for (int i = 0; i < projectiles; ++i)
		{
			double randomangle = angle;
			double randompitch = pitch;
			if (angle == -32768) {randomangle = frandom(-invoker.wpn_accuracy - invoker.current_recoil, invoker.wpn_accuracy + invoker.current_recoil);}
			if (pitch == -32768) {randompitch = frandom(-invoker.wpn_accuracy - invoker.current_recoil, invoker.wpn_accuracy + invoker.current_recoil);}
		
			A_FireProjectile(missiletype, randomangle, useammo, spawnofs_xy, spawnheight, flags, randompitch);
			useammo = false;
		}
		
		if (isRecoil) 
		{
			invoker.DoRecoil();
			A_SetPitch(invoker.owner.pitch - (invoker.wpn_recoil * 0.4));
		}
	}
	
	action void DI_MuzzleFlash(string flash = "BULLETSHOOT") {A_AttachLightDef("shoot", flash);}
	action void DI_ClearFlash() {A_RemoveLight("shoot");}
	
	action void DI_BulletCasing(int casingtype = 0)
	{
		//0 = shells.
		//1 = small bullets.
		//2 = big bullets.
		
		string casing = "DI_Casing1";
		switch(casingtype)
		{
			case 1: casing = "DI_Casing2"; break;
			case 2: casing = "DI_Casing3"; break;
		}
		
		A_SpawnItemEX(casing, 4, 0, invoker.owner.height / 2, 0, frandom(2.0, 4.0), frandom(0.0, 4.0), flags: SXF_NOCHECKPOSITION);
	}
	
	action void DI_EjectMagazine(string magactor)
	{
		A_SpawnItemEX(magactor, 4, 0, invoker.owner.height / 2, flags: SXF_NOCHECKPOSITION);
	}
	
	action void DI_StartSound(sound whattoplay, int slot = CHAN_BODY, int flags = CHANF_DEFAULT, double volume = 1.0, double attenuation = ATTN_NORM, double pitch = 0, double startTime = 0)
	{
		//same as A_StartSound, but automatically changes pitch to match current weapon speed.
		pitch *= invoker.CheckWeaponSpeed();
		A_StartSound(whattoplay, slot, flags, volume, attenuation, pitch, startTime);
	}
	
	States
	{
		NoReload:
			#### # 0 WeaponMode(0);
			#### # 0 DI_StartSound("noammo", CHAN_AUTO, starttime: 0.1);
			#### # 1 A_OverlayOffset(PSP_WEAPON, 0, 4, WOF_ADD);
			#### #### 1 A_OverlayOffset(PSP_WEAPON, 0, -1, WOF_ADD);
			#### # 4;
			#### # 0 A_Jump(256, "Ready");
	}
}