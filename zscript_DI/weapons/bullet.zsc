Class DI_BulletPuff : DI_Actor
{
	Default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		+ALLOWPARTICLES;
		+RANDOMIZE;
		+ROLLSPRITE;
		+SPRITEANGLE;
		+FORCEXYBILLBOARD;
		RenderStyle "Translucent";
		Alpha 0.5;
		Mass 5;
	}
	
	States
	{
		Spawn:
			#### # 0 NoDelay A_SetRoll(random(0, 359));
			#### # 0 
			{
				if (random(0, 1) == 1) {bSPRITEFLIP = true;}
			}
			PUFF BBB 0 A_SpawnParticle("f8e63d", SPF_FULLBRIGHT | SPF_RELVEL, 24, 2, random(0, 359), 0, 0, 0, random(0, 4), 0, random(0, 4), 0, 0, -0.33);
			PUFF B 2 A_AttachLightDef("spark", "BULLETSPARK");
			PUFF B 2 A_RemoveLight("spark");
			Goto Looper+1;
		Looper:
			PUFF B 4;
			PUFF C 4 
			{
				A_DIScale(1.05, 1.05, true);
				A_Fadeout(0.1);
			}
			Loop;
	}
}
Class DI_BulletPuff_NoWPN : DI_BulletPuff {Default {DI_Actor.IgnoreWeapon true;}}

Class DI_IcePuff : DI_BulletPuff
{
	Default
	{
		Radius 4;
		Height 8;
		DamageType "Ice";
		Gravity 0.1;
		-NOGRAVITY;
		+ROLLSPRITE;
		+SPRITEANGLE;
		+FORCEXYBILLBOARD;
		+PUFFONACTORS;
		+BLOODSPLATTER;
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_SetRoll(random(0, 359));
			#### # 0 A_DIIced(3, 1.0);
			#### # 0 A_AttachLightDef("spark", "BULLETSPARK_ICE");
			PUFF DD 1
			{
				A_FadeOut(0.025);
				A_DIScale(1.05, 1.05, true);
			}
			#### # 0 A_RemoveLight("spark");
			Goto Looper;
		Looper:
			PUFF D 1 
			{
				A_FadeOut(0.025);
				A_DIScale(1.05, 1.05, true);
			}
			Loop;
	}
}
Class DI_IcePuff_NoWPN : DI_IcePuff {Default {DI_Actor.IgnoreWeapon true;}}

Class DI_FirePuff : DI_IcePuff
{
	Default
	{
		DamageType "Fire";
		VSpeed 1;
		+NOGRAVITY;
		+BRIGHT;
	}
	
	States
	{
		Spawn:
			PUFF EEE 0 NoDelay A_SpawnParticle("ff4f00", SPF_FULLBRIGHT | SPF_RELVEL, 24, 6, random(0, 359), 0, 0, 0, random(0, 4), 0, random(-2, 2), 0, 0, 0.33);
			#### # 0 A_AttachLightDef("spark", "BULLETSPARK_FIRE");
			PUFF ## 1
			{
				A_FadeOut(0.05);
				A_DIScale(1.05, 1.05, true);
			}
			#### # 0 A_RemoveLight("spark");
			Goto Looper;
		Looper:
			PUFF # 1 
			{
				A_FadeOut(0.05);
				A_DIScale(1.05, 1.05, true);
			}
			Loop;	
	}
}
Class DI_FirePuff_NoWPN : DI_FirePuff {Default {DI_Actor.IgnoreWeapon true;}}

Class DI_LightningPuff : DI_IcePuff
{
	Default
	{
		Alpha 0.75;
		DamageType "Lightning";
		+NOGRAVITY;
		+BRIGHT;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_SetRoll(random(0, 359));
			PUFF FFF 0 A_SpawnParticle("ffeb00", SPF_FULLBRIGHT, 24, 4, random(0, 359), random(-8, 8), random(-8, 8), random(-8, 8), 0, 0, -0.167);
			#### # 0 A_AttachLightDef("spark", "BULLETSPARK_LIGHTNING");
			PUFF ## 1
			{
				A_FadeOut(0.1);
				A_DIScale(1.1, 1.1, true);
			}
			#### # 0 A_RemoveLight("spark");
			Goto Looper;
		Looper:
			PUFF # 1 
			{
				A_FadeOut(0.1);
				A_DIScale(1.1, 1.1, true);
			}
			Loop;
	}
}
Class DI_LightningPuff_NoWPN : DI_LightningPuff {Default {DI_Actor.IgnoreWeapon true;}}

Class DI_PoisonPuff : DI_IcePuff
{
	Default
	{
		Alpha 1.0;
		DamageType "Poison";
		+NOGRAVITY;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_SetRoll(random(0, 359));
			PUFF GGG 0 A_SpawnParticle("54c600", SPF_FULLBRIGHT | SPF_RELVEL, 24, 6, random(0, 359), 0, 0, 0, random(1, 2), 0, random(-2, 2));
			#### # 0 A_AttachLightDef("spark", "BULLETSPARK_POISON");
			PUFF ## 1
			{
				A_FadeOut(0.05);
				A_DIScale(1.025, 1.025, true);
			}
			#### # 0 A_RemoveLight("spark");
			Goto Looper;
		Looper:
			PUFF # 1 
			{
				A_FadeOut(0.05);
				A_DIScale(1.025, 1.025, true);
			}
			Loop;
	}
}
Class DI_PoisonPuff_NoWPN : DI_PoisonPuff {Default {DI_Actor.IgnoreWeapon true;}}

Class DI_Projectile : DI_Actor
{
	mixin DI_ProjectileMixin;

	bool flatbullet, dobounce;

	property FlatBullet : flatbullet; //combine with +FLATSPRITE to create fake 3d bullets.
	property DoBounce : dobounce;
	
	DI_Weapon plrwpn;
	
	array<DIProjectileInventory> items;

	Default
	{
		DamageFunction GetWeaponDamage();
		Projectile;
		BounceType "Doom";
		BounceFactor 0.0;
		WallBounceFactor 0.0;
		BounceCount 10;
		DI_Projectile.DoBounce true;
		-NOGRAVITY;
		+BLOODSPLATTER;
		+FORCEXYBILLBOARD;
		+BOUNCEONACTORS;
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();

		if (!di_notweapon) {TrackBulletSource();}
		CheckStatusChange();
		UpdateSize();
		if (flatbullet) {DI_SideBullet();}
		
		//CheckItemStats(); //called by thebrain handler.
	}
	
	override int SpecialBounceHit(Actor bounceMobj, Line bounceLine, readonly<SecPlane> bouncePlane)
	{
		int returnvalue = Super.SpecialBounceHit(bounceMobj, bounceLine, bouncePlane);
		if (dobounce)
		{
			if (bounceMobj) 
			{
				DoImpactActor(bBOUNCEONACTORS, bounceMobj);
				if (BounceFactor == 0.0) {returnvalue = 0;}
			}
			if (bounceLine) 
			{
				DoImpactWall(bBOUNCEONWALLS, bounceLine);
				if (WallBounceFactor == 0.0) {returnvalue = 0;}
			}
			if (bouncePlane) 
			{
				DoImpactFloor((bBOUNCEONFLOORS || bBOUNCEONCEILINGS), bouncePlane);
				if (BounceFactor == 0.0) {returnvalue = 0;}
			}
		}
		return returnvalue;
	}
	
	void CheckItemStats()
	{
		//console.printf("checking for items...");
		for (int i = 0; i < items.Size(); ++i)
		{
			if (items[i])
			{
				//console.printf("\cqFound: %s", items[i].GetClassName());
				if (dobounce)
				{
					//console.printf("\cqReading Bounce Stats...");
					BounceFactor += items[i].GiveBounceFactor(plr);
					WallBounceFactor += items[i].GiveWallBounceFactor(plr);
				}
			}
		}
		
		//console.printf("bounce: %.2f", BounceFactor);
		
		if (dobounce)
		{
			if (BounceFactor == 0.0) 
			{
				bBOUNCEONFLOORS = false;
				bBOUNCEONCEILINGS = false;
				bBOUNCEONACTORS = false;
			}
			if (WallBounceFactor == 0.0)
			{
				bBOUNCEONWALLS = false;
			}
		}
	}
	
	void DoImpactActor(bool bounced, Actor bounceMobj)
	{
		foreach(mo : items) {if (mo) {mo.ImpactActor(plr, bounced, bounceMobj);}}
		//console.printf("hit actor");
	}
	
	void DoImpactWall(bool bounced, Line bounceLine)
	{
		foreach(mo : items) {if (mo) {mo.ImpactWall(plr, bounced, bounceLine);}}
		//console.printf("hit wall");
	}
	
	void DoImpactFloor(bool bounced, readonly<SecPlane> bouncePlane)
	{
		foreach(mo : items) {if (mo) {mo.ImpactFloor(plr, bounced, bouncePlane);}}
		//console.printf("hit floor");
	}
	
	void TrackBulletSource()
	{
		//lets projectiles remember what weapon that it originated from.
		if (target is "DI_PlayerBase")
		{
			let plr = DI_PlayerBase(target);
			if (plr.player.readyweapon is "DI_Weapon") 
			{
				plrwpn = DI_Weapon(plr.player.readyweapon);
				wpn = plrwpn; //oopsie :)
			}
		}
	}

	void DI_SideBullet()
	{
		A_SpawnItemEX("DI_Tracer_Side", flags: SXF_NOCHECKPOSITION | SXF_ORIGINATOR | SXF_SETMASTER | SXF_TRANSFERSPRITEFRAME | SXF_TRANSFERRENDERSTYLE | SXF_TRANSFERTRANSLATION | SXF_TRANSFERSCALE);
	}

	override void Tick()
	{
		Super.Tick();
		if (flatbullet) {pitch = (-Vel.Z / Speed) * 90;}
	}
}

Class DI_Tracer : DI_Projectile
{
	//the projectile fired from DI_Shoot().
	Default
	{
		Mass 0;
		Gravity 0.1;
		Radius 2;
		Height 4;
		Speed 60;
		Scale 0.2;
		DI_Projectile.FlatBullet true;
		+FLATSPRITE;
		+BRIGHT;
	}

	States
	{
		Spawn:
			TRAC A -1;
			Loop;
		Crash:
		Death.Sky:
		Death:
			TNT1 A 1 
			{
				A_SpawnItemEX("DI_BulletPuff", flags: SXF_NOCHECKPOSITION);
				if (invoker.wpn) {A_DIFakeStatusPuff(3.0 * invoker.wpn.wpn_bulletsize);}
			}
			Stop;
		XDeath:
			TNT1 A 1 
			{
				A_SpawnParticleEX("fff59e", TexMan.CheckForTexture("PUFFA0"), STYLE_NONE, SPF_ROLL, 10, 8 + sqrt(invoker.GetWeaponDamage()), startroll: random(0, 359));
				if (invoker.wpn) {A_DIFakeStatusPuff(3.0 * invoker.wpn.wpn_bulletsize);}
			}
			Stop;
	}
}

Class DI_Tracer_Side : DI_Actor
{
	Default
	{
		Health 1;
		+INVISIBLE;
		+ROLLSPRITE;
		+WALLSPRITE;
		+NOCLIP;
		+NOGRAVITY;
	}

	bool finished;

	override void Tick()
	{
		Super.Tick();

		if (master)
		{
			SetOrigin(master.Pos, true);
			bBRIGHT = master.bBRIGHT;
			roll = -90 - master.pitch;
			angle = master.angle + 90;
			bINVISIBLE = false;
		}
		else if (!finished) 
		{
			SetStateLabel("Death");
			finished = true;
		}
	}

	States
	{
		Spawn:
			#### # -1;
			Loop;
		Death:
			TNT1 A 1 {bINVISIBLE = true;}
			Stop;
	}
}

Class DIProjectileInventory : Inventory
{
	override void AttachToOwner(Actor other)
	{
		if (other is "DI_Projectile")
		{
			let proj = DI_Projectile(other);
			if (proj.items.Find(self) == proj.items.Size())
			{
				//keep list of all projectile inventory items here.
				proj.items.Push(self);
				self.owner = proj;
				//console.printf("adding item to projectile");
			}
		}
	}
	
	virtual double GiveBounceFactor(DI_PlayerBase plr) {return 0.0;}
	virtual double GiveWallBounceFactor(DI_PlayerBase plr) {return 0.0;}
	virtual void ImpactActor(DI_PlayerBase plr, bool bounced, Actor victim) {}
	virtual void ImpactWall(DI_PlayerBase plr, bool bounced, Line wall) {}
	virtual void ImpactFloor(DI_PlayerBase plr, bool bounced, readonly<SecPlane> ground) {}
}